/*
Defect Dojo API v2

Defect Dojo - Open Source vulnerability Management made easy. Prefetch related parameters/responses not yet in the schema.

API version: 2.38.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package defectdojo

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type DevelopmentEnvironmentsAPI interface {

	/*
	DevelopmentEnvironmentsCreate Method for DevelopmentEnvironmentsCreate

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDevelopmentEnvironmentsCreateRequest
	*/
	DevelopmentEnvironmentsCreate(ctx context.Context) ApiDevelopmentEnvironmentsCreateRequest

	// DevelopmentEnvironmentsCreateExecute executes the request
	//  @return DevelopmentEnvironment
	DevelopmentEnvironmentsCreateExecute(r ApiDevelopmentEnvironmentsCreateRequest) (*DevelopmentEnvironment, *http.Response, error)

	/*
	DevelopmentEnvironmentsDeletePreviewList Method for DevelopmentEnvironmentsDeletePreviewList

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this development_ environment.
	@return ApiDevelopmentEnvironmentsDeletePreviewListRequest
	*/
	DevelopmentEnvironmentsDeletePreviewList(ctx context.Context, id int32) ApiDevelopmentEnvironmentsDeletePreviewListRequest

	// DevelopmentEnvironmentsDeletePreviewListExecute executes the request
	//  @return PaginatedDeletePreviewList
	DevelopmentEnvironmentsDeletePreviewListExecute(r ApiDevelopmentEnvironmentsDeletePreviewListRequest) (*PaginatedDeletePreviewList, *http.Response, error)

	/*
	DevelopmentEnvironmentsDestroy Method for DevelopmentEnvironmentsDestroy

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this development_ environment.
	@return ApiDevelopmentEnvironmentsDestroyRequest
	*/
	DevelopmentEnvironmentsDestroy(ctx context.Context, id int32) ApiDevelopmentEnvironmentsDestroyRequest

	// DevelopmentEnvironmentsDestroyExecute executes the request
	DevelopmentEnvironmentsDestroyExecute(r ApiDevelopmentEnvironmentsDestroyRequest) (*http.Response, error)

	/*
	DevelopmentEnvironmentsList Method for DevelopmentEnvironmentsList

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDevelopmentEnvironmentsListRequest
	*/
	DevelopmentEnvironmentsList(ctx context.Context) ApiDevelopmentEnvironmentsListRequest

	// DevelopmentEnvironmentsListExecute executes the request
	//  @return PaginatedDevelopmentEnvironmentList
	DevelopmentEnvironmentsListExecute(r ApiDevelopmentEnvironmentsListRequest) (*PaginatedDevelopmentEnvironmentList, *http.Response, error)

	/*
	DevelopmentEnvironmentsPartialUpdate Method for DevelopmentEnvironmentsPartialUpdate

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this development_ environment.
	@return ApiDevelopmentEnvironmentsPartialUpdateRequest
	*/
	DevelopmentEnvironmentsPartialUpdate(ctx context.Context, id int32) ApiDevelopmentEnvironmentsPartialUpdateRequest

	// DevelopmentEnvironmentsPartialUpdateExecute executes the request
	//  @return DevelopmentEnvironment
	DevelopmentEnvironmentsPartialUpdateExecute(r ApiDevelopmentEnvironmentsPartialUpdateRequest) (*DevelopmentEnvironment, *http.Response, error)

	/*
	DevelopmentEnvironmentsRetrieve Method for DevelopmentEnvironmentsRetrieve

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this development_ environment.
	@return ApiDevelopmentEnvironmentsRetrieveRequest
	*/
	DevelopmentEnvironmentsRetrieve(ctx context.Context, id int32) ApiDevelopmentEnvironmentsRetrieveRequest

	// DevelopmentEnvironmentsRetrieveExecute executes the request
	//  @return DevelopmentEnvironment
	DevelopmentEnvironmentsRetrieveExecute(r ApiDevelopmentEnvironmentsRetrieveRequest) (*DevelopmentEnvironment, *http.Response, error)

	/*
	DevelopmentEnvironmentsUpdate Method for DevelopmentEnvironmentsUpdate

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this development_ environment.
	@return ApiDevelopmentEnvironmentsUpdateRequest
	*/
	DevelopmentEnvironmentsUpdate(ctx context.Context, id int32) ApiDevelopmentEnvironmentsUpdateRequest

	// DevelopmentEnvironmentsUpdateExecute executes the request
	//  @return DevelopmentEnvironment
	DevelopmentEnvironmentsUpdateExecute(r ApiDevelopmentEnvironmentsUpdateRequest) (*DevelopmentEnvironment, *http.Response, error)
}

// DevelopmentEnvironmentsAPIService DevelopmentEnvironmentsAPI service
type DevelopmentEnvironmentsAPIService service

type ApiDevelopmentEnvironmentsCreateRequest struct {
	ctx context.Context
	ApiService DevelopmentEnvironmentsAPI
	developmentEnvironmentRequest *DevelopmentEnvironmentRequest
}

func (r ApiDevelopmentEnvironmentsCreateRequest) DevelopmentEnvironmentRequest(developmentEnvironmentRequest DevelopmentEnvironmentRequest) ApiDevelopmentEnvironmentsCreateRequest {
	r.developmentEnvironmentRequest = &developmentEnvironmentRequest
	return r
}

func (r ApiDevelopmentEnvironmentsCreateRequest) Execute() (*DevelopmentEnvironment, *http.Response, error) {
	return r.ApiService.DevelopmentEnvironmentsCreateExecute(r)
}

/*
DevelopmentEnvironmentsCreate Method for DevelopmentEnvironmentsCreate

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDevelopmentEnvironmentsCreateRequest
*/
func (a *DevelopmentEnvironmentsAPIService) DevelopmentEnvironmentsCreate(ctx context.Context) ApiDevelopmentEnvironmentsCreateRequest {
	return ApiDevelopmentEnvironmentsCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DevelopmentEnvironment
func (a *DevelopmentEnvironmentsAPIService) DevelopmentEnvironmentsCreateExecute(r ApiDevelopmentEnvironmentsCreateRequest) (*DevelopmentEnvironment, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DevelopmentEnvironment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DevelopmentEnvironmentsAPIService.DevelopmentEnvironmentsCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/development_environments/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.developmentEnvironmentRequest == nil {
		return localVarReturnValue, nil, reportError("developmentEnvironmentRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.developmentEnvironmentRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDevelopmentEnvironmentsDeletePreviewListRequest struct {
	ctx context.Context
	ApiService DevelopmentEnvironmentsAPI
	id int32
	limit *int32
	offset *int32
}

// Number of results to return per page.
func (r ApiDevelopmentEnvironmentsDeletePreviewListRequest) Limit(limit int32) ApiDevelopmentEnvironmentsDeletePreviewListRequest {
	r.limit = &limit
	return r
}

// The initial index from which to return the results.
func (r ApiDevelopmentEnvironmentsDeletePreviewListRequest) Offset(offset int32) ApiDevelopmentEnvironmentsDeletePreviewListRequest {
	r.offset = &offset
	return r
}

func (r ApiDevelopmentEnvironmentsDeletePreviewListRequest) Execute() (*PaginatedDeletePreviewList, *http.Response, error) {
	return r.ApiService.DevelopmentEnvironmentsDeletePreviewListExecute(r)
}

/*
DevelopmentEnvironmentsDeletePreviewList Method for DevelopmentEnvironmentsDeletePreviewList

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A unique integer value identifying this development_ environment.
 @return ApiDevelopmentEnvironmentsDeletePreviewListRequest
*/
func (a *DevelopmentEnvironmentsAPIService) DevelopmentEnvironmentsDeletePreviewList(ctx context.Context, id int32) ApiDevelopmentEnvironmentsDeletePreviewListRequest {
	return ApiDevelopmentEnvironmentsDeletePreviewListRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PaginatedDeletePreviewList
func (a *DevelopmentEnvironmentsAPIService) DevelopmentEnvironmentsDeletePreviewListExecute(r ApiDevelopmentEnvironmentsDeletePreviewListRequest) (*PaginatedDeletePreviewList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedDeletePreviewList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DevelopmentEnvironmentsAPIService.DevelopmentEnvironmentsDeletePreviewList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/development_environments/{id}/delete_preview/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDevelopmentEnvironmentsDestroyRequest struct {
	ctx context.Context
	ApiService DevelopmentEnvironmentsAPI
	id int32
}

func (r ApiDevelopmentEnvironmentsDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DevelopmentEnvironmentsDestroyExecute(r)
}

/*
DevelopmentEnvironmentsDestroy Method for DevelopmentEnvironmentsDestroy

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A unique integer value identifying this development_ environment.
 @return ApiDevelopmentEnvironmentsDestroyRequest
*/
func (a *DevelopmentEnvironmentsAPIService) DevelopmentEnvironmentsDestroy(ctx context.Context, id int32) ApiDevelopmentEnvironmentsDestroyRequest {
	return ApiDevelopmentEnvironmentsDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *DevelopmentEnvironmentsAPIService) DevelopmentEnvironmentsDestroyExecute(r ApiDevelopmentEnvironmentsDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DevelopmentEnvironmentsAPIService.DevelopmentEnvironmentsDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/development_environments/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDevelopmentEnvironmentsListRequest struct {
	ctx context.Context
	ApiService DevelopmentEnvironmentsAPI
	limit *int32
	offset *int32
}

// Number of results to return per page.
func (r ApiDevelopmentEnvironmentsListRequest) Limit(limit int32) ApiDevelopmentEnvironmentsListRequest {
	r.limit = &limit
	return r
}

// The initial index from which to return the results.
func (r ApiDevelopmentEnvironmentsListRequest) Offset(offset int32) ApiDevelopmentEnvironmentsListRequest {
	r.offset = &offset
	return r
}

func (r ApiDevelopmentEnvironmentsListRequest) Execute() (*PaginatedDevelopmentEnvironmentList, *http.Response, error) {
	return r.ApiService.DevelopmentEnvironmentsListExecute(r)
}

/*
DevelopmentEnvironmentsList Method for DevelopmentEnvironmentsList

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDevelopmentEnvironmentsListRequest
*/
func (a *DevelopmentEnvironmentsAPIService) DevelopmentEnvironmentsList(ctx context.Context) ApiDevelopmentEnvironmentsListRequest {
	return ApiDevelopmentEnvironmentsListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedDevelopmentEnvironmentList
func (a *DevelopmentEnvironmentsAPIService) DevelopmentEnvironmentsListExecute(r ApiDevelopmentEnvironmentsListRequest) (*PaginatedDevelopmentEnvironmentList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedDevelopmentEnvironmentList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DevelopmentEnvironmentsAPIService.DevelopmentEnvironmentsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/development_environments/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDevelopmentEnvironmentsPartialUpdateRequest struct {
	ctx context.Context
	ApiService DevelopmentEnvironmentsAPI
	id int32
	patchedDevelopmentEnvironmentRequest *PatchedDevelopmentEnvironmentRequest
}

func (r ApiDevelopmentEnvironmentsPartialUpdateRequest) PatchedDevelopmentEnvironmentRequest(patchedDevelopmentEnvironmentRequest PatchedDevelopmentEnvironmentRequest) ApiDevelopmentEnvironmentsPartialUpdateRequest {
	r.patchedDevelopmentEnvironmentRequest = &patchedDevelopmentEnvironmentRequest
	return r
}

func (r ApiDevelopmentEnvironmentsPartialUpdateRequest) Execute() (*DevelopmentEnvironment, *http.Response, error) {
	return r.ApiService.DevelopmentEnvironmentsPartialUpdateExecute(r)
}

/*
DevelopmentEnvironmentsPartialUpdate Method for DevelopmentEnvironmentsPartialUpdate

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A unique integer value identifying this development_ environment.
 @return ApiDevelopmentEnvironmentsPartialUpdateRequest
*/
func (a *DevelopmentEnvironmentsAPIService) DevelopmentEnvironmentsPartialUpdate(ctx context.Context, id int32) ApiDevelopmentEnvironmentsPartialUpdateRequest {
	return ApiDevelopmentEnvironmentsPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return DevelopmentEnvironment
func (a *DevelopmentEnvironmentsAPIService) DevelopmentEnvironmentsPartialUpdateExecute(r ApiDevelopmentEnvironmentsPartialUpdateRequest) (*DevelopmentEnvironment, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DevelopmentEnvironment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DevelopmentEnvironmentsAPIService.DevelopmentEnvironmentsPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/development_environments/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedDevelopmentEnvironmentRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDevelopmentEnvironmentsRetrieveRequest struct {
	ctx context.Context
	ApiService DevelopmentEnvironmentsAPI
	id int32
}

func (r ApiDevelopmentEnvironmentsRetrieveRequest) Execute() (*DevelopmentEnvironment, *http.Response, error) {
	return r.ApiService.DevelopmentEnvironmentsRetrieveExecute(r)
}

/*
DevelopmentEnvironmentsRetrieve Method for DevelopmentEnvironmentsRetrieve

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A unique integer value identifying this development_ environment.
 @return ApiDevelopmentEnvironmentsRetrieveRequest
*/
func (a *DevelopmentEnvironmentsAPIService) DevelopmentEnvironmentsRetrieve(ctx context.Context, id int32) ApiDevelopmentEnvironmentsRetrieveRequest {
	return ApiDevelopmentEnvironmentsRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return DevelopmentEnvironment
func (a *DevelopmentEnvironmentsAPIService) DevelopmentEnvironmentsRetrieveExecute(r ApiDevelopmentEnvironmentsRetrieveRequest) (*DevelopmentEnvironment, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DevelopmentEnvironment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DevelopmentEnvironmentsAPIService.DevelopmentEnvironmentsRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/development_environments/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDevelopmentEnvironmentsUpdateRequest struct {
	ctx context.Context
	ApiService DevelopmentEnvironmentsAPI
	id int32
	developmentEnvironmentRequest *DevelopmentEnvironmentRequest
}

func (r ApiDevelopmentEnvironmentsUpdateRequest) DevelopmentEnvironmentRequest(developmentEnvironmentRequest DevelopmentEnvironmentRequest) ApiDevelopmentEnvironmentsUpdateRequest {
	r.developmentEnvironmentRequest = &developmentEnvironmentRequest
	return r
}

func (r ApiDevelopmentEnvironmentsUpdateRequest) Execute() (*DevelopmentEnvironment, *http.Response, error) {
	return r.ApiService.DevelopmentEnvironmentsUpdateExecute(r)
}

/*
DevelopmentEnvironmentsUpdate Method for DevelopmentEnvironmentsUpdate

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A unique integer value identifying this development_ environment.
 @return ApiDevelopmentEnvironmentsUpdateRequest
*/
func (a *DevelopmentEnvironmentsAPIService) DevelopmentEnvironmentsUpdate(ctx context.Context, id int32) ApiDevelopmentEnvironmentsUpdateRequest {
	return ApiDevelopmentEnvironmentsUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return DevelopmentEnvironment
func (a *DevelopmentEnvironmentsAPIService) DevelopmentEnvironmentsUpdateExecute(r ApiDevelopmentEnvironmentsUpdateRequest) (*DevelopmentEnvironment, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DevelopmentEnvironment
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DevelopmentEnvironmentsAPIService.DevelopmentEnvironmentsUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/development_environments/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.developmentEnvironmentRequest == nil {
		return localVarReturnValue, nil, reportError("developmentEnvironmentRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.developmentEnvironmentRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
