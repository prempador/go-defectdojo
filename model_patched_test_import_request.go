/*
Defect Dojo API v2

Defect Dojo - Open Source vulnerability Management made easy. Prefetch related parameters/responses not yet in the schema.

API version: 2.38.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package defectdojo

import (
	"encoding/json"
)

// checks if the PatchedTestImportRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PatchedTestImportRequest{}

// PatchedTestImportRequest struct for PatchedTestImportRequest
type PatchedTestImportRequest struct {
	ImportSettings interface{} `json:"import_settings,omitempty"`
	Type *string `json:"type,omitempty"`
	Version NullableString `json:"version,omitempty"`
	// Build ID that was tested, a reimport may update this field.
	BuildId NullableString `json:"build_id,omitempty"`
	// Commit hash tested, a reimport may update this field.
	CommitHash NullableString `json:"commit_hash,omitempty"`
	// Tag or branch that was tested, a reimport may update this field.
	BranchTag NullableString `json:"branch_tag,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PatchedTestImportRequest PatchedTestImportRequest

// NewPatchedTestImportRequest instantiates a new PatchedTestImportRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPatchedTestImportRequest() *PatchedTestImportRequest {
	this := PatchedTestImportRequest{}
	return &this
}

// NewPatchedTestImportRequestWithDefaults instantiates a new PatchedTestImportRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatchedTestImportRequestWithDefaults() *PatchedTestImportRequest {
	this := PatchedTestImportRequest{}
	return &this
}

// GetImportSettings returns the ImportSettings field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchedTestImportRequest) GetImportSettings() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.ImportSettings
}

// GetImportSettingsOk returns a tuple with the ImportSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchedTestImportRequest) GetImportSettingsOk() (*interface{}, bool) {
	if o == nil || IsNil(o.ImportSettings) {
		return nil, false
	}
	return &o.ImportSettings, true
}

// HasImportSettings returns a boolean if a field has been set.
func (o *PatchedTestImportRequest) HasImportSettings() bool {
	if o != nil && !IsNil(o.ImportSettings) {
		return true
	}

	return false
}

// SetImportSettings gets a reference to the given interface{} and assigns it to the ImportSettings field.
func (o *PatchedTestImportRequest) SetImportSettings(v interface{}) {
	o.ImportSettings = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *PatchedTestImportRequest) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedTestImportRequest) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *PatchedTestImportRequest) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *PatchedTestImportRequest) SetType(v string) {
	o.Type = &v
}

// GetVersion returns the Version field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchedTestImportRequest) GetVersion() string {
	if o == nil || IsNil(o.Version.Get()) {
		var ret string
		return ret
	}
	return *o.Version.Get()
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchedTestImportRequest) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Version.Get(), o.Version.IsSet()
}

// HasVersion returns a boolean if a field has been set.
func (o *PatchedTestImportRequest) HasVersion() bool {
	if o != nil && o.Version.IsSet() {
		return true
	}

	return false
}

// SetVersion gets a reference to the given NullableString and assigns it to the Version field.
func (o *PatchedTestImportRequest) SetVersion(v string) {
	o.Version.Set(&v)
}
// SetVersionNil sets the value for Version to be an explicit nil
func (o *PatchedTestImportRequest) SetVersionNil() {
	o.Version.Set(nil)
}

// UnsetVersion ensures that no value is present for Version, not even an explicit nil
func (o *PatchedTestImportRequest) UnsetVersion() {
	o.Version.Unset()
}

// GetBuildId returns the BuildId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchedTestImportRequest) GetBuildId() string {
	if o == nil || IsNil(o.BuildId.Get()) {
		var ret string
		return ret
	}
	return *o.BuildId.Get()
}

// GetBuildIdOk returns a tuple with the BuildId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchedTestImportRequest) GetBuildIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BuildId.Get(), o.BuildId.IsSet()
}

// HasBuildId returns a boolean if a field has been set.
func (o *PatchedTestImportRequest) HasBuildId() bool {
	if o != nil && o.BuildId.IsSet() {
		return true
	}

	return false
}

// SetBuildId gets a reference to the given NullableString and assigns it to the BuildId field.
func (o *PatchedTestImportRequest) SetBuildId(v string) {
	o.BuildId.Set(&v)
}
// SetBuildIdNil sets the value for BuildId to be an explicit nil
func (o *PatchedTestImportRequest) SetBuildIdNil() {
	o.BuildId.Set(nil)
}

// UnsetBuildId ensures that no value is present for BuildId, not even an explicit nil
func (o *PatchedTestImportRequest) UnsetBuildId() {
	o.BuildId.Unset()
}

// GetCommitHash returns the CommitHash field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchedTestImportRequest) GetCommitHash() string {
	if o == nil || IsNil(o.CommitHash.Get()) {
		var ret string
		return ret
	}
	return *o.CommitHash.Get()
}

// GetCommitHashOk returns a tuple with the CommitHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchedTestImportRequest) GetCommitHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CommitHash.Get(), o.CommitHash.IsSet()
}

// HasCommitHash returns a boolean if a field has been set.
func (o *PatchedTestImportRequest) HasCommitHash() bool {
	if o != nil && o.CommitHash.IsSet() {
		return true
	}

	return false
}

// SetCommitHash gets a reference to the given NullableString and assigns it to the CommitHash field.
func (o *PatchedTestImportRequest) SetCommitHash(v string) {
	o.CommitHash.Set(&v)
}
// SetCommitHashNil sets the value for CommitHash to be an explicit nil
func (o *PatchedTestImportRequest) SetCommitHashNil() {
	o.CommitHash.Set(nil)
}

// UnsetCommitHash ensures that no value is present for CommitHash, not even an explicit nil
func (o *PatchedTestImportRequest) UnsetCommitHash() {
	o.CommitHash.Unset()
}

// GetBranchTag returns the BranchTag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchedTestImportRequest) GetBranchTag() string {
	if o == nil || IsNil(o.BranchTag.Get()) {
		var ret string
		return ret
	}
	return *o.BranchTag.Get()
}

// GetBranchTagOk returns a tuple with the BranchTag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchedTestImportRequest) GetBranchTagOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BranchTag.Get(), o.BranchTag.IsSet()
}

// HasBranchTag returns a boolean if a field has been set.
func (o *PatchedTestImportRequest) HasBranchTag() bool {
	if o != nil && o.BranchTag.IsSet() {
		return true
	}

	return false
}

// SetBranchTag gets a reference to the given NullableString and assigns it to the BranchTag field.
func (o *PatchedTestImportRequest) SetBranchTag(v string) {
	o.BranchTag.Set(&v)
}
// SetBranchTagNil sets the value for BranchTag to be an explicit nil
func (o *PatchedTestImportRequest) SetBranchTagNil() {
	o.BranchTag.Set(nil)
}

// UnsetBranchTag ensures that no value is present for BranchTag, not even an explicit nil
func (o *PatchedTestImportRequest) UnsetBranchTag() {
	o.BranchTag.Unset()
}

func (o PatchedTestImportRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PatchedTestImportRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.ImportSettings != nil {
		toSerialize["import_settings"] = o.ImportSettings
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if o.Version.IsSet() {
		toSerialize["version"] = o.Version.Get()
	}
	if o.BuildId.IsSet() {
		toSerialize["build_id"] = o.BuildId.Get()
	}
	if o.CommitHash.IsSet() {
		toSerialize["commit_hash"] = o.CommitHash.Get()
	}
	if o.BranchTag.IsSet() {
		toSerialize["branch_tag"] = o.BranchTag.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PatchedTestImportRequest) UnmarshalJSON(data []byte) (err error) {
	varPatchedTestImportRequest := _PatchedTestImportRequest{}

	err = json.Unmarshal(data, &varPatchedTestImportRequest)

	if err != nil {
		return err
	}

	*o = PatchedTestImportRequest(varPatchedTestImportRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "import_settings")
		delete(additionalProperties, "type")
		delete(additionalProperties, "version")
		delete(additionalProperties, "build_id")
		delete(additionalProperties, "commit_hash")
		delete(additionalProperties, "branch_tag")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePatchedTestImportRequest struct {
	value *PatchedTestImportRequest
	isSet bool
}

func (v NullablePatchedTestImportRequest) Get() *PatchedTestImportRequest {
	return v.value
}

func (v *NullablePatchedTestImportRequest) Set(val *PatchedTestImportRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchedTestImportRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchedTestImportRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchedTestImportRequest(val *PatchedTestImportRequest) *NullablePatchedTestImportRequest {
	return &NullablePatchedTestImportRequest{value: val, isSet: true}
}

func (v NullablePatchedTestImportRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchedTestImportRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


