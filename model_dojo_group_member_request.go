/*
Defect Dojo API v2

Defect Dojo - Open Source vulnerability Management made easy. Prefetch related parameters/responses not yet in the schema.

API version: 2.38.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package defectdojo

import (
	"encoding/json"
	"fmt"
)

// checks if the DojoGroupMemberRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DojoGroupMemberRequest{}

// DojoGroupMemberRequest struct for DojoGroupMemberRequest
type DojoGroupMemberRequest struct {
	Group int32 `json:"group"`
	User int32 `json:"user"`
	// This role determines the permissions of the user to manage the group.
	Role int32 `json:"role"`
	AdditionalProperties map[string]interface{}
}

type _DojoGroupMemberRequest DojoGroupMemberRequest

// NewDojoGroupMemberRequest instantiates a new DojoGroupMemberRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDojoGroupMemberRequest(group int32, user int32, role int32) *DojoGroupMemberRequest {
	this := DojoGroupMemberRequest{}
	this.Group = group
	this.User = user
	this.Role = role
	return &this
}

// NewDojoGroupMemberRequestWithDefaults instantiates a new DojoGroupMemberRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDojoGroupMemberRequestWithDefaults() *DojoGroupMemberRequest {
	this := DojoGroupMemberRequest{}
	return &this
}

// GetGroup returns the Group field value
func (o *DojoGroupMemberRequest) GetGroup() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Group
}

// GetGroupOk returns a tuple with the Group field value
// and a boolean to check if the value has been set.
func (o *DojoGroupMemberRequest) GetGroupOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Group, true
}

// SetGroup sets field value
func (o *DojoGroupMemberRequest) SetGroup(v int32) {
	o.Group = v
}


// GetUser returns the User field value
func (o *DojoGroupMemberRequest) GetUser() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.User
}

// GetUserOk returns a tuple with the User field value
// and a boolean to check if the value has been set.
func (o *DojoGroupMemberRequest) GetUserOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.User, true
}

// SetUser sets field value
func (o *DojoGroupMemberRequest) SetUser(v int32) {
	o.User = v
}


// GetRole returns the Role field value
func (o *DojoGroupMemberRequest) GetRole() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Role
}

// GetRoleOk returns a tuple with the Role field value
// and a boolean to check if the value has been set.
func (o *DojoGroupMemberRequest) GetRoleOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Role, true
}

// SetRole sets field value
func (o *DojoGroupMemberRequest) SetRole(v int32) {
	o.Role = v
}


func (o DojoGroupMemberRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DojoGroupMemberRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["group"] = o.Group
	toSerialize["user"] = o.User
	toSerialize["role"] = o.Role

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DojoGroupMemberRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"group",
		"user",
		"role",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{} {
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == ""{
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil{
			return err
		}
	}
	varDojoGroupMemberRequest := _DojoGroupMemberRequest{}

	err = json.Unmarshal(data, &varDojoGroupMemberRequest)

	if err != nil {
		return err
	}

	*o = DojoGroupMemberRequest(varDojoGroupMemberRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "group")
		delete(additionalProperties, "user")
		delete(additionalProperties, "role")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDojoGroupMemberRequest struct {
	value *DojoGroupMemberRequest
	isSet bool
}

func (v NullableDojoGroupMemberRequest) Get() *DojoGroupMemberRequest {
	return v.value
}

func (v *NullableDojoGroupMemberRequest) Set(val *DojoGroupMemberRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDojoGroupMemberRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDojoGroupMemberRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDojoGroupMemberRequest(val *DojoGroupMemberRequest) *NullableDojoGroupMemberRequest {
	return &NullableDojoGroupMemberRequest{value: val, isSet: true}
}

func (v NullableDojoGroupMemberRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDojoGroupMemberRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


