/*
Defect Dojo API v2

Defect Dojo - Open Source vulnerability Management made easy. Prefetch related parameters/responses not yet in the schema.

API version: 2.30.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DojoGroupPrefetch type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DojoGroupPrefetch{}

// DojoGroupPrefetch struct for DojoGroupPrefetch
type DojoGroupPrefetch struct {
	ProductGroups *map[string]Product `json:"product_groups,omitempty"`
	ProductTypeGroups *map[string]ProductType `json:"product_type_groups,omitempty"`
	Users *map[string]UserStub `json:"users,omitempty"`
}

// NewDojoGroupPrefetch instantiates a new DojoGroupPrefetch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDojoGroupPrefetch() *DojoGroupPrefetch {
	this := DojoGroupPrefetch{}
	return &this
}

// NewDojoGroupPrefetchWithDefaults instantiates a new DojoGroupPrefetch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDojoGroupPrefetchWithDefaults() *DojoGroupPrefetch {
	this := DojoGroupPrefetch{}
	return &this
}

// GetProductGroups returns the ProductGroups field value if set, zero value otherwise.
func (o *DojoGroupPrefetch) GetProductGroups() map[string]Product {
	if o == nil || IsNil(o.ProductGroups) {
		var ret map[string]Product
		return ret
	}
	return *o.ProductGroups
}

// GetProductGroupsOk returns a tuple with the ProductGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DojoGroupPrefetch) GetProductGroupsOk() (*map[string]Product, bool) {
	if o == nil || IsNil(o.ProductGroups) {
		return nil, false
	}
	return o.ProductGroups, true
}

// HasProductGroups returns a boolean if a field has been set.
func (o *DojoGroupPrefetch) HasProductGroups() bool {
	if o != nil && !IsNil(o.ProductGroups) {
		return true
	}

	return false
}

// SetProductGroups gets a reference to the given map[string]Product and assigns it to the ProductGroups field.
func (o *DojoGroupPrefetch) SetProductGroups(v map[string]Product) {
	o.ProductGroups = &v
}

// GetProductTypeGroups returns the ProductTypeGroups field value if set, zero value otherwise.
func (o *DojoGroupPrefetch) GetProductTypeGroups() map[string]ProductType {
	if o == nil || IsNil(o.ProductTypeGroups) {
		var ret map[string]ProductType
		return ret
	}
	return *o.ProductTypeGroups
}

// GetProductTypeGroupsOk returns a tuple with the ProductTypeGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DojoGroupPrefetch) GetProductTypeGroupsOk() (*map[string]ProductType, bool) {
	if o == nil || IsNil(o.ProductTypeGroups) {
		return nil, false
	}
	return o.ProductTypeGroups, true
}

// HasProductTypeGroups returns a boolean if a field has been set.
func (o *DojoGroupPrefetch) HasProductTypeGroups() bool {
	if o != nil && !IsNil(o.ProductTypeGroups) {
		return true
	}

	return false
}

// SetProductTypeGroups gets a reference to the given map[string]ProductType and assigns it to the ProductTypeGroups field.
func (o *DojoGroupPrefetch) SetProductTypeGroups(v map[string]ProductType) {
	o.ProductTypeGroups = &v
}

// GetUsers returns the Users field value if set, zero value otherwise.
func (o *DojoGroupPrefetch) GetUsers() map[string]UserStub {
	if o == nil || IsNil(o.Users) {
		var ret map[string]UserStub
		return ret
	}
	return *o.Users
}

// GetUsersOk returns a tuple with the Users field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DojoGroupPrefetch) GetUsersOk() (*map[string]UserStub, bool) {
	if o == nil || IsNil(o.Users) {
		return nil, false
	}
	return o.Users, true
}

// HasUsers returns a boolean if a field has been set.
func (o *DojoGroupPrefetch) HasUsers() bool {
	if o != nil && !IsNil(o.Users) {
		return true
	}

	return false
}

// SetUsers gets a reference to the given map[string]UserStub and assigns it to the Users field.
func (o *DojoGroupPrefetch) SetUsers(v map[string]UserStub) {
	o.Users = &v
}

func (o DojoGroupPrefetch) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DojoGroupPrefetch) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ProductGroups) {
		toSerialize["product_groups"] = o.ProductGroups
	}
	if !IsNil(o.ProductTypeGroups) {
		toSerialize["product_type_groups"] = o.ProductTypeGroups
	}
	if !IsNil(o.Users) {
		toSerialize["users"] = o.Users
	}
	return toSerialize, nil
}

type NullableDojoGroupPrefetch struct {
	value *DojoGroupPrefetch
	isSet bool
}

func (v NullableDojoGroupPrefetch) Get() *DojoGroupPrefetch {
	return v.value
}

func (v *NullableDojoGroupPrefetch) Set(val *DojoGroupPrefetch) {
	v.value = val
	v.isSet = true
}

func (v NullableDojoGroupPrefetch) IsSet() bool {
	return v.isSet
}

func (v *NullableDojoGroupPrefetch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDojoGroupPrefetch(val *DojoGroupPrefetch) *NullableDojoGroupPrefetch {
	return &NullableDojoGroupPrefetch{value: val, isSet: true}
}

func (v NullableDojoGroupPrefetch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDojoGroupPrefetch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


