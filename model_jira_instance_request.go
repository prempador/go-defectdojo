/*
Defect Dojo API v2

Defect Dojo - Open Source vulnerability Management made easy. Prefetch related parameters/responses not yet in the schema.

API version: 2.30.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package defectdojo

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the JIRAInstanceRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JIRAInstanceRequest{}

// JIRAInstanceRequest struct for JIRAInstanceRequest
type JIRAInstanceRequest struct {
	// Enter a name to give to this configuration
	ConfigurationName *string `json:"configuration_name,omitempty"`
	// For more information how to configure Jira, read the DefectDojo documentation.
	Url string `json:"url"`
	Username string `json:"username"`
	Password string `json:"password"`
	// You can define extra issue types in settings.py  * `Task` - Task * `Story` - Story * `Epic` - Epic * `Spike` - Spike * `Bug` - Bug * `Security` - Security
	DefaultIssueType *string `json:"default_issue_type,omitempty"`
	// Choose the folder containing the Django templates used to render the JIRA issue description. These are stored in dojo/templates/issue-trackers. Leave empty to use the default jira_full templates.
	IssueTemplateDir NullableString `json:"issue_template_dir,omitempty"`
	// To obtain the 'Epic name id' visit https://<YOUR JIRA URL>/rest/api/2/field and search for Epic Name. Copy the number out of cf[number] and paste it here.
	EpicNameId int32 `json:"epic_name_id"`
	// Transition ID to Re-Open JIRA issues, visit https://<YOUR JIRA URL>/rest/api/latest/issue/<ANY VALID ISSUE KEY>/transitions?expand=transitions.fields to find the ID for your JIRA instance
	OpenStatusKey int32 `json:"open_status_key"`
	// Transition ID to Close JIRA issues, visit https://<YOUR JIRA URL>/rest/api/latest/issue/<ANY VALID ISSUE KEY>/transitions?expand=transitions.fields to find the ID for your JIRA instance
	CloseStatusKey int32 `json:"close_status_key"`
	// Maps to the 'Priority' field in Jira. For example: Info
	InfoMappingSeverity string `json:"info_mapping_severity"`
	// Maps to the 'Priority' field in Jira. For example: Low
	LowMappingSeverity string `json:"low_mapping_severity"`
	// Maps to the 'Priority' field in Jira. For example: Medium
	MediumMappingSeverity string `json:"medium_mapping_severity"`
	// Maps to the 'Priority' field in Jira. For example: High
	HighMappingSeverity string `json:"high_mapping_severity"`
	// Maps to the 'Priority' field in Jira. For example: Critical
	CriticalMappingSeverity string `json:"critical_mapping_severity"`
	// Additional text that will be added to the finding in Jira. For example including how the finding was created or who to contact for more information.
	FindingText NullableString `json:"finding_text,omitempty"`
	// JIRA resolution names (comma-separated values) that maps to an Accepted Finding
	AcceptedMappingResolution NullableString `json:"accepted_mapping_resolution,omitempty"`
	// JIRA resolution names (comma-separated values) that maps to a False Positive Finding
	FalsePositiveMappingResolution NullableString `json:"false_positive_mapping_resolution,omitempty"`
	// This setting can be overidden at the Product level
	GlobalJiraSlaNotification *bool `json:"global_jira_sla_notification,omitempty"`
	// If enabled, this will sync changes to a Finding automatically to JIRA
	FindingJiraSync *bool `json:"finding_jira_sync,omitempty"`
}

type _JIRAInstanceRequest JIRAInstanceRequest

// NewJIRAInstanceRequest instantiates a new JIRAInstanceRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJIRAInstanceRequest(url string, username string, password string, epicNameId int32, openStatusKey int32, closeStatusKey int32, infoMappingSeverity string, lowMappingSeverity string, mediumMappingSeverity string, highMappingSeverity string, criticalMappingSeverity string) *JIRAInstanceRequest {
	this := JIRAInstanceRequest{}
	this.Url = url
	this.Username = username
	this.Password = password
	this.EpicNameId = epicNameId
	this.OpenStatusKey = openStatusKey
	this.CloseStatusKey = closeStatusKey
	this.InfoMappingSeverity = infoMappingSeverity
	this.LowMappingSeverity = lowMappingSeverity
	this.MediumMappingSeverity = mediumMappingSeverity
	this.HighMappingSeverity = highMappingSeverity
	this.CriticalMappingSeverity = criticalMappingSeverity
	return &this
}

// NewJIRAInstanceRequestWithDefaults instantiates a new JIRAInstanceRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJIRAInstanceRequestWithDefaults() *JIRAInstanceRequest {
	this := JIRAInstanceRequest{}
	return &this
}

// GetConfigurationName returns the ConfigurationName field value if set, zero value otherwise.
func (o *JIRAInstanceRequest) GetConfigurationName() string {
	if o == nil || IsNil(o.ConfigurationName) {
		var ret string
		return ret
	}
	return *o.ConfigurationName
}

// GetConfigurationNameOk returns a tuple with the ConfigurationName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JIRAInstanceRequest) GetConfigurationNameOk() (*string, bool) {
	if o == nil || IsNil(o.ConfigurationName) {
		return nil, false
	}
	return o.ConfigurationName, true
}

// HasConfigurationName returns a boolean if a field has been set.
func (o *JIRAInstanceRequest) HasConfigurationName() bool {
	if o != nil && !IsNil(o.ConfigurationName) {
		return true
	}

	return false
}

// SetConfigurationName gets a reference to the given string and assigns it to the ConfigurationName field.
func (o *JIRAInstanceRequest) SetConfigurationName(v string) {
	o.ConfigurationName = &v
}

// GetUrl returns the Url field value
func (o *JIRAInstanceRequest) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *JIRAInstanceRequest) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *JIRAInstanceRequest) SetUrl(v string) {
	o.Url = v
}

// GetUsername returns the Username field value
func (o *JIRAInstanceRequest) GetUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Username
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
func (o *JIRAInstanceRequest) GetUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Username, true
}

// SetUsername sets field value
func (o *JIRAInstanceRequest) SetUsername(v string) {
	o.Username = v
}

// GetPassword returns the Password field value
func (o *JIRAInstanceRequest) GetPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Password
}

// GetPasswordOk returns a tuple with the Password field value
// and a boolean to check if the value has been set.
func (o *JIRAInstanceRequest) GetPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Password, true
}

// SetPassword sets field value
func (o *JIRAInstanceRequest) SetPassword(v string) {
	o.Password = v
}

// GetDefaultIssueType returns the DefaultIssueType field value if set, zero value otherwise.
func (o *JIRAInstanceRequest) GetDefaultIssueType() string {
	if o == nil || IsNil(o.DefaultIssueType) {
		var ret string
		return ret
	}
	return *o.DefaultIssueType
}

// GetDefaultIssueTypeOk returns a tuple with the DefaultIssueType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JIRAInstanceRequest) GetDefaultIssueTypeOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultIssueType) {
		return nil, false
	}
	return o.DefaultIssueType, true
}

// HasDefaultIssueType returns a boolean if a field has been set.
func (o *JIRAInstanceRequest) HasDefaultIssueType() bool {
	if o != nil && !IsNil(o.DefaultIssueType) {
		return true
	}

	return false
}

// SetDefaultIssueType gets a reference to the given string and assigns it to the DefaultIssueType field.
func (o *JIRAInstanceRequest) SetDefaultIssueType(v string) {
	o.DefaultIssueType = &v
}

// GetIssueTemplateDir returns the IssueTemplateDir field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JIRAInstanceRequest) GetIssueTemplateDir() string {
	if o == nil || IsNil(o.IssueTemplateDir.Get()) {
		var ret string
		return ret
	}
	return *o.IssueTemplateDir.Get()
}

// GetIssueTemplateDirOk returns a tuple with the IssueTemplateDir field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JIRAInstanceRequest) GetIssueTemplateDirOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.IssueTemplateDir.Get(), o.IssueTemplateDir.IsSet()
}

// HasIssueTemplateDir returns a boolean if a field has been set.
func (o *JIRAInstanceRequest) HasIssueTemplateDir() bool {
	if o != nil && o.IssueTemplateDir.IsSet() {
		return true
	}

	return false
}

// SetIssueTemplateDir gets a reference to the given NullableString and assigns it to the IssueTemplateDir field.
func (o *JIRAInstanceRequest) SetIssueTemplateDir(v string) {
	o.IssueTemplateDir.Set(&v)
}
// SetIssueTemplateDirNil sets the value for IssueTemplateDir to be an explicit nil
func (o *JIRAInstanceRequest) SetIssueTemplateDirNil() {
	o.IssueTemplateDir.Set(nil)
}

// UnsetIssueTemplateDir ensures that no value is present for IssueTemplateDir, not even an explicit nil
func (o *JIRAInstanceRequest) UnsetIssueTemplateDir() {
	o.IssueTemplateDir.Unset()
}

// GetEpicNameId returns the EpicNameId field value
func (o *JIRAInstanceRequest) GetEpicNameId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.EpicNameId
}

// GetEpicNameIdOk returns a tuple with the EpicNameId field value
// and a boolean to check if the value has been set.
func (o *JIRAInstanceRequest) GetEpicNameIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EpicNameId, true
}

// SetEpicNameId sets field value
func (o *JIRAInstanceRequest) SetEpicNameId(v int32) {
	o.EpicNameId = v
}

// GetOpenStatusKey returns the OpenStatusKey field value
func (o *JIRAInstanceRequest) GetOpenStatusKey() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.OpenStatusKey
}

// GetOpenStatusKeyOk returns a tuple with the OpenStatusKey field value
// and a boolean to check if the value has been set.
func (o *JIRAInstanceRequest) GetOpenStatusKeyOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OpenStatusKey, true
}

// SetOpenStatusKey sets field value
func (o *JIRAInstanceRequest) SetOpenStatusKey(v int32) {
	o.OpenStatusKey = v
}

// GetCloseStatusKey returns the CloseStatusKey field value
func (o *JIRAInstanceRequest) GetCloseStatusKey() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CloseStatusKey
}

// GetCloseStatusKeyOk returns a tuple with the CloseStatusKey field value
// and a boolean to check if the value has been set.
func (o *JIRAInstanceRequest) GetCloseStatusKeyOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CloseStatusKey, true
}

// SetCloseStatusKey sets field value
func (o *JIRAInstanceRequest) SetCloseStatusKey(v int32) {
	o.CloseStatusKey = v
}

// GetInfoMappingSeverity returns the InfoMappingSeverity field value
func (o *JIRAInstanceRequest) GetInfoMappingSeverity() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.InfoMappingSeverity
}

// GetInfoMappingSeverityOk returns a tuple with the InfoMappingSeverity field value
// and a boolean to check if the value has been set.
func (o *JIRAInstanceRequest) GetInfoMappingSeverityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.InfoMappingSeverity, true
}

// SetInfoMappingSeverity sets field value
func (o *JIRAInstanceRequest) SetInfoMappingSeverity(v string) {
	o.InfoMappingSeverity = v
}

// GetLowMappingSeverity returns the LowMappingSeverity field value
func (o *JIRAInstanceRequest) GetLowMappingSeverity() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LowMappingSeverity
}

// GetLowMappingSeverityOk returns a tuple with the LowMappingSeverity field value
// and a boolean to check if the value has been set.
func (o *JIRAInstanceRequest) GetLowMappingSeverityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LowMappingSeverity, true
}

// SetLowMappingSeverity sets field value
func (o *JIRAInstanceRequest) SetLowMappingSeverity(v string) {
	o.LowMappingSeverity = v
}

// GetMediumMappingSeverity returns the MediumMappingSeverity field value
func (o *JIRAInstanceRequest) GetMediumMappingSeverity() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MediumMappingSeverity
}

// GetMediumMappingSeverityOk returns a tuple with the MediumMappingSeverity field value
// and a boolean to check if the value has been set.
func (o *JIRAInstanceRequest) GetMediumMappingSeverityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MediumMappingSeverity, true
}

// SetMediumMappingSeverity sets field value
func (o *JIRAInstanceRequest) SetMediumMappingSeverity(v string) {
	o.MediumMappingSeverity = v
}

// GetHighMappingSeverity returns the HighMappingSeverity field value
func (o *JIRAInstanceRequest) GetHighMappingSeverity() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.HighMappingSeverity
}

// GetHighMappingSeverityOk returns a tuple with the HighMappingSeverity field value
// and a boolean to check if the value has been set.
func (o *JIRAInstanceRequest) GetHighMappingSeverityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HighMappingSeverity, true
}

// SetHighMappingSeverity sets field value
func (o *JIRAInstanceRequest) SetHighMappingSeverity(v string) {
	o.HighMappingSeverity = v
}

// GetCriticalMappingSeverity returns the CriticalMappingSeverity field value
func (o *JIRAInstanceRequest) GetCriticalMappingSeverity() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CriticalMappingSeverity
}

// GetCriticalMappingSeverityOk returns a tuple with the CriticalMappingSeverity field value
// and a boolean to check if the value has been set.
func (o *JIRAInstanceRequest) GetCriticalMappingSeverityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CriticalMappingSeverity, true
}

// SetCriticalMappingSeverity sets field value
func (o *JIRAInstanceRequest) SetCriticalMappingSeverity(v string) {
	o.CriticalMappingSeverity = v
}

// GetFindingText returns the FindingText field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JIRAInstanceRequest) GetFindingText() string {
	if o == nil || IsNil(o.FindingText.Get()) {
		var ret string
		return ret
	}
	return *o.FindingText.Get()
}

// GetFindingTextOk returns a tuple with the FindingText field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JIRAInstanceRequest) GetFindingTextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FindingText.Get(), o.FindingText.IsSet()
}

// HasFindingText returns a boolean if a field has been set.
func (o *JIRAInstanceRequest) HasFindingText() bool {
	if o != nil && o.FindingText.IsSet() {
		return true
	}

	return false
}

// SetFindingText gets a reference to the given NullableString and assigns it to the FindingText field.
func (o *JIRAInstanceRequest) SetFindingText(v string) {
	o.FindingText.Set(&v)
}
// SetFindingTextNil sets the value for FindingText to be an explicit nil
func (o *JIRAInstanceRequest) SetFindingTextNil() {
	o.FindingText.Set(nil)
}

// UnsetFindingText ensures that no value is present for FindingText, not even an explicit nil
func (o *JIRAInstanceRequest) UnsetFindingText() {
	o.FindingText.Unset()
}

// GetAcceptedMappingResolution returns the AcceptedMappingResolution field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JIRAInstanceRequest) GetAcceptedMappingResolution() string {
	if o == nil || IsNil(o.AcceptedMappingResolution.Get()) {
		var ret string
		return ret
	}
	return *o.AcceptedMappingResolution.Get()
}

// GetAcceptedMappingResolutionOk returns a tuple with the AcceptedMappingResolution field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JIRAInstanceRequest) GetAcceptedMappingResolutionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AcceptedMappingResolution.Get(), o.AcceptedMappingResolution.IsSet()
}

// HasAcceptedMappingResolution returns a boolean if a field has been set.
func (o *JIRAInstanceRequest) HasAcceptedMappingResolution() bool {
	if o != nil && o.AcceptedMappingResolution.IsSet() {
		return true
	}

	return false
}

// SetAcceptedMappingResolution gets a reference to the given NullableString and assigns it to the AcceptedMappingResolution field.
func (o *JIRAInstanceRequest) SetAcceptedMappingResolution(v string) {
	o.AcceptedMappingResolution.Set(&v)
}
// SetAcceptedMappingResolutionNil sets the value for AcceptedMappingResolution to be an explicit nil
func (o *JIRAInstanceRequest) SetAcceptedMappingResolutionNil() {
	o.AcceptedMappingResolution.Set(nil)
}

// UnsetAcceptedMappingResolution ensures that no value is present for AcceptedMappingResolution, not even an explicit nil
func (o *JIRAInstanceRequest) UnsetAcceptedMappingResolution() {
	o.AcceptedMappingResolution.Unset()
}

// GetFalsePositiveMappingResolution returns the FalsePositiveMappingResolution field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JIRAInstanceRequest) GetFalsePositiveMappingResolution() string {
	if o == nil || IsNil(o.FalsePositiveMappingResolution.Get()) {
		var ret string
		return ret
	}
	return *o.FalsePositiveMappingResolution.Get()
}

// GetFalsePositiveMappingResolutionOk returns a tuple with the FalsePositiveMappingResolution field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JIRAInstanceRequest) GetFalsePositiveMappingResolutionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FalsePositiveMappingResolution.Get(), o.FalsePositiveMappingResolution.IsSet()
}

// HasFalsePositiveMappingResolution returns a boolean if a field has been set.
func (o *JIRAInstanceRequest) HasFalsePositiveMappingResolution() bool {
	if o != nil && o.FalsePositiveMappingResolution.IsSet() {
		return true
	}

	return false
}

// SetFalsePositiveMappingResolution gets a reference to the given NullableString and assigns it to the FalsePositiveMappingResolution field.
func (o *JIRAInstanceRequest) SetFalsePositiveMappingResolution(v string) {
	o.FalsePositiveMappingResolution.Set(&v)
}
// SetFalsePositiveMappingResolutionNil sets the value for FalsePositiveMappingResolution to be an explicit nil
func (o *JIRAInstanceRequest) SetFalsePositiveMappingResolutionNil() {
	o.FalsePositiveMappingResolution.Set(nil)
}

// UnsetFalsePositiveMappingResolution ensures that no value is present for FalsePositiveMappingResolution, not even an explicit nil
func (o *JIRAInstanceRequest) UnsetFalsePositiveMappingResolution() {
	o.FalsePositiveMappingResolution.Unset()
}

// GetGlobalJiraSlaNotification returns the GlobalJiraSlaNotification field value if set, zero value otherwise.
func (o *JIRAInstanceRequest) GetGlobalJiraSlaNotification() bool {
	if o == nil || IsNil(o.GlobalJiraSlaNotification) {
		var ret bool
		return ret
	}
	return *o.GlobalJiraSlaNotification
}

// GetGlobalJiraSlaNotificationOk returns a tuple with the GlobalJiraSlaNotification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JIRAInstanceRequest) GetGlobalJiraSlaNotificationOk() (*bool, bool) {
	if o == nil || IsNil(o.GlobalJiraSlaNotification) {
		return nil, false
	}
	return o.GlobalJiraSlaNotification, true
}

// HasGlobalJiraSlaNotification returns a boolean if a field has been set.
func (o *JIRAInstanceRequest) HasGlobalJiraSlaNotification() bool {
	if o != nil && !IsNil(o.GlobalJiraSlaNotification) {
		return true
	}

	return false
}

// SetGlobalJiraSlaNotification gets a reference to the given bool and assigns it to the GlobalJiraSlaNotification field.
func (o *JIRAInstanceRequest) SetGlobalJiraSlaNotification(v bool) {
	o.GlobalJiraSlaNotification = &v
}

// GetFindingJiraSync returns the FindingJiraSync field value if set, zero value otherwise.
func (o *JIRAInstanceRequest) GetFindingJiraSync() bool {
	if o == nil || IsNil(o.FindingJiraSync) {
		var ret bool
		return ret
	}
	return *o.FindingJiraSync
}

// GetFindingJiraSyncOk returns a tuple with the FindingJiraSync field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JIRAInstanceRequest) GetFindingJiraSyncOk() (*bool, bool) {
	if o == nil || IsNil(o.FindingJiraSync) {
		return nil, false
	}
	return o.FindingJiraSync, true
}

// HasFindingJiraSync returns a boolean if a field has been set.
func (o *JIRAInstanceRequest) HasFindingJiraSync() bool {
	if o != nil && !IsNil(o.FindingJiraSync) {
		return true
	}

	return false
}

// SetFindingJiraSync gets a reference to the given bool and assigns it to the FindingJiraSync field.
func (o *JIRAInstanceRequest) SetFindingJiraSync(v bool) {
	o.FindingJiraSync = &v
}

func (o JIRAInstanceRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JIRAInstanceRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ConfigurationName) {
		toSerialize["configuration_name"] = o.ConfigurationName
	}
	toSerialize["url"] = o.Url
	toSerialize["username"] = o.Username
	toSerialize["password"] = o.Password
	if !IsNil(o.DefaultIssueType) {
		toSerialize["default_issue_type"] = o.DefaultIssueType
	}
	if o.IssueTemplateDir.IsSet() {
		toSerialize["issue_template_dir"] = o.IssueTemplateDir.Get()
	}
	toSerialize["epic_name_id"] = o.EpicNameId
	toSerialize["open_status_key"] = o.OpenStatusKey
	toSerialize["close_status_key"] = o.CloseStatusKey
	toSerialize["info_mapping_severity"] = o.InfoMappingSeverity
	toSerialize["low_mapping_severity"] = o.LowMappingSeverity
	toSerialize["medium_mapping_severity"] = o.MediumMappingSeverity
	toSerialize["high_mapping_severity"] = o.HighMappingSeverity
	toSerialize["critical_mapping_severity"] = o.CriticalMappingSeverity
	if o.FindingText.IsSet() {
		toSerialize["finding_text"] = o.FindingText.Get()
	}
	if o.AcceptedMappingResolution.IsSet() {
		toSerialize["accepted_mapping_resolution"] = o.AcceptedMappingResolution.Get()
	}
	if o.FalsePositiveMappingResolution.IsSet() {
		toSerialize["false_positive_mapping_resolution"] = o.FalsePositiveMappingResolution.Get()
	}
	if !IsNil(o.GlobalJiraSlaNotification) {
		toSerialize["global_jira_sla_notification"] = o.GlobalJiraSlaNotification
	}
	if !IsNil(o.FindingJiraSync) {
		toSerialize["finding_jira_sync"] = o.FindingJiraSync
	}
	return toSerialize, nil
}

func (o *JIRAInstanceRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"url",
		"username",
		"password",
		"epic_name_id",
		"open_status_key",
		"close_status_key",
		"info_mapping_severity",
		"low_mapping_severity",
		"medium_mapping_severity",
		"high_mapping_severity",
		"critical_mapping_severity",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varJIRAInstanceRequest := _JIRAInstanceRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varJIRAInstanceRequest)

	if err != nil {
		return err
	}

	*o = JIRAInstanceRequest(varJIRAInstanceRequest)

	return err
}

type NullableJIRAInstanceRequest struct {
	value *JIRAInstanceRequest
	isSet bool
}

func (v NullableJIRAInstanceRequest) Get() *JIRAInstanceRequest {
	return v.value
}

func (v *NullableJIRAInstanceRequest) Set(val *JIRAInstanceRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableJIRAInstanceRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableJIRAInstanceRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJIRAInstanceRequest(val *JIRAInstanceRequest) *NullableJIRAInstanceRequest {
	return &NullableJIRAInstanceRequest{value: val, isSet: true}
}

func (v NullableJIRAInstanceRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJIRAInstanceRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


