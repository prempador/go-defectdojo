/*
Defect Dojo API v2

Defect Dojo - Open Source vulnerability Management made easy. Prefetch related parameters/responses not yet in the schema.

API version: 2.30.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package defectdojo

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the VulnerabilityIdTemplate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VulnerabilityIdTemplate{}

// VulnerabilityIdTemplate struct for VulnerabilityIdTemplate
type VulnerabilityIdTemplate struct {
	VulnerabilityId string `json:"vulnerability_id"`
}

type _VulnerabilityIdTemplate VulnerabilityIdTemplate

// NewVulnerabilityIdTemplate instantiates a new VulnerabilityIdTemplate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVulnerabilityIdTemplate(vulnerabilityId string) *VulnerabilityIdTemplate {
	this := VulnerabilityIdTemplate{}
	this.VulnerabilityId = vulnerabilityId
	return &this
}

// NewVulnerabilityIdTemplateWithDefaults instantiates a new VulnerabilityIdTemplate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVulnerabilityIdTemplateWithDefaults() *VulnerabilityIdTemplate {
	this := VulnerabilityIdTemplate{}
	return &this
}

// GetVulnerabilityId returns the VulnerabilityId field value
func (o *VulnerabilityIdTemplate) GetVulnerabilityId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VulnerabilityId
}

// GetVulnerabilityIdOk returns a tuple with the VulnerabilityId field value
// and a boolean to check if the value has been set.
func (o *VulnerabilityIdTemplate) GetVulnerabilityIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VulnerabilityId, true
}

// SetVulnerabilityId sets field value
func (o *VulnerabilityIdTemplate) SetVulnerabilityId(v string) {
	o.VulnerabilityId = v
}

func (o VulnerabilityIdTemplate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VulnerabilityIdTemplate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["vulnerability_id"] = o.VulnerabilityId
	return toSerialize, nil
}

func (o *VulnerabilityIdTemplate) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"vulnerability_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVulnerabilityIdTemplate := _VulnerabilityIdTemplate{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVulnerabilityIdTemplate)

	if err != nil {
		return err
	}

	*o = VulnerabilityIdTemplate(varVulnerabilityIdTemplate)

	return err
}

type NullableVulnerabilityIdTemplate struct {
	value *VulnerabilityIdTemplate
	isSet bool
}

func (v NullableVulnerabilityIdTemplate) Get() *VulnerabilityIdTemplate {
	return v.value
}

func (v *NullableVulnerabilityIdTemplate) Set(val *VulnerabilityIdTemplate) {
	v.value = val
	v.isSet = true
}

func (v NullableVulnerabilityIdTemplate) IsSet() bool {
	return v.isSet
}

func (v *NullableVulnerabilityIdTemplate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVulnerabilityIdTemplate(val *VulnerabilityIdTemplate) *NullableVulnerabilityIdTemplate {
	return &NullableVulnerabilityIdTemplate{value: val, isSet: true}
}

func (v NullableVulnerabilityIdTemplate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVulnerabilityIdTemplate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


