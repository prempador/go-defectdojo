/*
Defect Dojo API v2

Defect Dojo - Open Source vulnerability Management made easy. Prefetch related parameters/responses not yet in the schema.

API version: 2.30.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the PatchedProductTypeRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PatchedProductTypeRequest{}

// PatchedProductTypeRequest struct for PatchedProductTypeRequest
type PatchedProductTypeRequest struct {
	Name *string `json:"name,omitempty"`
	Description NullableString `json:"description,omitempty"`
	CriticalProduct *bool `json:"critical_product,omitempty"`
	KeyProduct *bool `json:"key_product,omitempty"`
}

// NewPatchedProductTypeRequest instantiates a new PatchedProductTypeRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPatchedProductTypeRequest() *PatchedProductTypeRequest {
	this := PatchedProductTypeRequest{}
	return &this
}

// NewPatchedProductTypeRequestWithDefaults instantiates a new PatchedProductTypeRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatchedProductTypeRequestWithDefaults() *PatchedProductTypeRequest {
	this := PatchedProductTypeRequest{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PatchedProductTypeRequest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedProductTypeRequest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PatchedProductTypeRequest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PatchedProductTypeRequest) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchedProductTypeRequest) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchedProductTypeRequest) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *PatchedProductTypeRequest) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *PatchedProductTypeRequest) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *PatchedProductTypeRequest) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *PatchedProductTypeRequest) UnsetDescription() {
	o.Description.Unset()
}

// GetCriticalProduct returns the CriticalProduct field value if set, zero value otherwise.
func (o *PatchedProductTypeRequest) GetCriticalProduct() bool {
	if o == nil || IsNil(o.CriticalProduct) {
		var ret bool
		return ret
	}
	return *o.CriticalProduct
}

// GetCriticalProductOk returns a tuple with the CriticalProduct field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedProductTypeRequest) GetCriticalProductOk() (*bool, bool) {
	if o == nil || IsNil(o.CriticalProduct) {
		return nil, false
	}
	return o.CriticalProduct, true
}

// HasCriticalProduct returns a boolean if a field has been set.
func (o *PatchedProductTypeRequest) HasCriticalProduct() bool {
	if o != nil && !IsNil(o.CriticalProduct) {
		return true
	}

	return false
}

// SetCriticalProduct gets a reference to the given bool and assigns it to the CriticalProduct field.
func (o *PatchedProductTypeRequest) SetCriticalProduct(v bool) {
	o.CriticalProduct = &v
}

// GetKeyProduct returns the KeyProduct field value if set, zero value otherwise.
func (o *PatchedProductTypeRequest) GetKeyProduct() bool {
	if o == nil || IsNil(o.KeyProduct) {
		var ret bool
		return ret
	}
	return *o.KeyProduct
}

// GetKeyProductOk returns a tuple with the KeyProduct field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedProductTypeRequest) GetKeyProductOk() (*bool, bool) {
	if o == nil || IsNil(o.KeyProduct) {
		return nil, false
	}
	return o.KeyProduct, true
}

// HasKeyProduct returns a boolean if a field has been set.
func (o *PatchedProductTypeRequest) HasKeyProduct() bool {
	if o != nil && !IsNil(o.KeyProduct) {
		return true
	}

	return false
}

// SetKeyProduct gets a reference to the given bool and assigns it to the KeyProduct field.
func (o *PatchedProductTypeRequest) SetKeyProduct(v bool) {
	o.KeyProduct = &v
}

func (o PatchedProductTypeRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PatchedProductTypeRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if !IsNil(o.CriticalProduct) {
		toSerialize["critical_product"] = o.CriticalProduct
	}
	if !IsNil(o.KeyProduct) {
		toSerialize["key_product"] = o.KeyProduct
	}
	return toSerialize, nil
}

type NullablePatchedProductTypeRequest struct {
	value *PatchedProductTypeRequest
	isSet bool
}

func (v NullablePatchedProductTypeRequest) Get() *PatchedProductTypeRequest {
	return v.value
}

func (v *NullablePatchedProductTypeRequest) Set(val *PatchedProductTypeRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchedProductTypeRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchedProductTypeRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchedProductTypeRequest(val *PatchedProductTypeRequest) *NullablePatchedProductTypeRequest {
	return &NullablePatchedProductTypeRequest{value: val, isSet: true}
}

func (v NullablePatchedProductTypeRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchedProductTypeRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


