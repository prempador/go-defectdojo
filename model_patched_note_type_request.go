/*
Defect Dojo API v2

Defect Dojo - Open Source vulnerability Management made easy. Prefetch related parameters/responses not yet in the schema.

API version: 2.38.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package defectdojo

import (
	"encoding/json"
)

// checks if the PatchedNoteTypeRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PatchedNoteTypeRequest{}

// PatchedNoteTypeRequest struct for PatchedNoteTypeRequest
type PatchedNoteTypeRequest struct {
	Name *string `json:"name,omitempty"`
	Description *string `json:"description,omitempty"`
	IsSingle *bool `json:"is_single,omitempty"`
	IsActive *bool `json:"is_active,omitempty"`
	IsMandatory *bool `json:"is_mandatory,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PatchedNoteTypeRequest PatchedNoteTypeRequest

// NewPatchedNoteTypeRequest instantiates a new PatchedNoteTypeRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPatchedNoteTypeRequest() *PatchedNoteTypeRequest {
	this := PatchedNoteTypeRequest{}
	return &this
}

// NewPatchedNoteTypeRequestWithDefaults instantiates a new PatchedNoteTypeRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatchedNoteTypeRequestWithDefaults() *PatchedNoteTypeRequest {
	this := PatchedNoteTypeRequest{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PatchedNoteTypeRequest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedNoteTypeRequest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PatchedNoteTypeRequest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PatchedNoteTypeRequest) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *PatchedNoteTypeRequest) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedNoteTypeRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *PatchedNoteTypeRequest) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *PatchedNoteTypeRequest) SetDescription(v string) {
	o.Description = &v
}

// GetIsSingle returns the IsSingle field value if set, zero value otherwise.
func (o *PatchedNoteTypeRequest) GetIsSingle() bool {
	if o == nil || IsNil(o.IsSingle) {
		var ret bool
		return ret
	}
	return *o.IsSingle
}

// GetIsSingleOk returns a tuple with the IsSingle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedNoteTypeRequest) GetIsSingleOk() (*bool, bool) {
	if o == nil || IsNil(o.IsSingle) {
		return nil, false
	}
	return o.IsSingle, true
}

// HasIsSingle returns a boolean if a field has been set.
func (o *PatchedNoteTypeRequest) HasIsSingle() bool {
	if o != nil && !IsNil(o.IsSingle) {
		return true
	}

	return false
}

// SetIsSingle gets a reference to the given bool and assigns it to the IsSingle field.
func (o *PatchedNoteTypeRequest) SetIsSingle(v bool) {
	o.IsSingle = &v
}

// GetIsActive returns the IsActive field value if set, zero value otherwise.
func (o *PatchedNoteTypeRequest) GetIsActive() bool {
	if o == nil || IsNil(o.IsActive) {
		var ret bool
		return ret
	}
	return *o.IsActive
}

// GetIsActiveOk returns a tuple with the IsActive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedNoteTypeRequest) GetIsActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.IsActive) {
		return nil, false
	}
	return o.IsActive, true
}

// HasIsActive returns a boolean if a field has been set.
func (o *PatchedNoteTypeRequest) HasIsActive() bool {
	if o != nil && !IsNil(o.IsActive) {
		return true
	}

	return false
}

// SetIsActive gets a reference to the given bool and assigns it to the IsActive field.
func (o *PatchedNoteTypeRequest) SetIsActive(v bool) {
	o.IsActive = &v
}

// GetIsMandatory returns the IsMandatory field value if set, zero value otherwise.
func (o *PatchedNoteTypeRequest) GetIsMandatory() bool {
	if o == nil || IsNil(o.IsMandatory) {
		var ret bool
		return ret
	}
	return *o.IsMandatory
}

// GetIsMandatoryOk returns a tuple with the IsMandatory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedNoteTypeRequest) GetIsMandatoryOk() (*bool, bool) {
	if o == nil || IsNil(o.IsMandatory) {
		return nil, false
	}
	return o.IsMandatory, true
}

// HasIsMandatory returns a boolean if a field has been set.
func (o *PatchedNoteTypeRequest) HasIsMandatory() bool {
	if o != nil && !IsNil(o.IsMandatory) {
		return true
	}

	return false
}

// SetIsMandatory gets a reference to the given bool and assigns it to the IsMandatory field.
func (o *PatchedNoteTypeRequest) SetIsMandatory(v bool) {
	o.IsMandatory = &v
}

func (o PatchedNoteTypeRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PatchedNoteTypeRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.IsSingle) {
		toSerialize["is_single"] = o.IsSingle
	}
	if !IsNil(o.IsActive) {
		toSerialize["is_active"] = o.IsActive
	}
	if !IsNil(o.IsMandatory) {
		toSerialize["is_mandatory"] = o.IsMandatory
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PatchedNoteTypeRequest) UnmarshalJSON(data []byte) (err error) {
	varPatchedNoteTypeRequest := _PatchedNoteTypeRequest{}

	err = json.Unmarshal(data, &varPatchedNoteTypeRequest)

	if err != nil {
		return err
	}

	*o = PatchedNoteTypeRequest(varPatchedNoteTypeRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "description")
		delete(additionalProperties, "is_single")
		delete(additionalProperties, "is_active")
		delete(additionalProperties, "is_mandatory")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePatchedNoteTypeRequest struct {
	value *PatchedNoteTypeRequest
	isSet bool
}

func (v NullablePatchedNoteTypeRequest) Get() *PatchedNoteTypeRequest {
	return v.value
}

func (v *NullablePatchedNoteTypeRequest) Set(val *PatchedNoteTypeRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchedNoteTypeRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchedNoteTypeRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchedNoteTypeRequest(val *PatchedNoteTypeRequest) *NullablePatchedNoteTypeRequest {
	return &NullablePatchedNoteTypeRequest{value: val, isSet: true}
}

func (v NullablePatchedNoteTypeRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchedNoteTypeRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


