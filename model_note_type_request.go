/*
Defect Dojo API v2

Defect Dojo - Open Source vulnerability Management made easy. Prefetch related parameters/responses not yet in the schema.

API version: 2.33.5
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package defectdojo

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the NoteTypeRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NoteTypeRequest{}

// NoteTypeRequest struct for NoteTypeRequest
type NoteTypeRequest struct {
	Name string `json:"name"`
	Description string `json:"description"`
	IsSingle *bool `json:"is_single,omitempty"`
	IsActive *bool `json:"is_active,omitempty"`
	IsMandatory *bool `json:"is_mandatory,omitempty"`
}

type _NoteTypeRequest NoteTypeRequest

// NewNoteTypeRequest instantiates a new NoteTypeRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNoteTypeRequest(name string, description string) *NoteTypeRequest {
	this := NoteTypeRequest{}
	this.Name = name
	this.Description = description
	return &this
}

// NewNoteTypeRequestWithDefaults instantiates a new NoteTypeRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNoteTypeRequestWithDefaults() *NoteTypeRequest {
	this := NoteTypeRequest{}
	return &this
}

// GetName returns the Name field value
func (o *NoteTypeRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *NoteTypeRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *NoteTypeRequest) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value
func (o *NoteTypeRequest) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *NoteTypeRequest) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *NoteTypeRequest) SetDescription(v string) {
	o.Description = v
}

// GetIsSingle returns the IsSingle field value if set, zero value otherwise.
func (o *NoteTypeRequest) GetIsSingle() bool {
	if o == nil || IsNil(o.IsSingle) {
		var ret bool
		return ret
	}
	return *o.IsSingle
}

// GetIsSingleOk returns a tuple with the IsSingle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NoteTypeRequest) GetIsSingleOk() (*bool, bool) {
	if o == nil || IsNil(o.IsSingle) {
		return nil, false
	}
	return o.IsSingle, true
}

// HasIsSingle returns a boolean if a field has been set.
func (o *NoteTypeRequest) HasIsSingle() bool {
	if o != nil && !IsNil(o.IsSingle) {
		return true
	}

	return false
}

// SetIsSingle gets a reference to the given bool and assigns it to the IsSingle field.
func (o *NoteTypeRequest) SetIsSingle(v bool) {
	o.IsSingle = &v
}

// GetIsActive returns the IsActive field value if set, zero value otherwise.
func (o *NoteTypeRequest) GetIsActive() bool {
	if o == nil || IsNil(o.IsActive) {
		var ret bool
		return ret
	}
	return *o.IsActive
}

// GetIsActiveOk returns a tuple with the IsActive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NoteTypeRequest) GetIsActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.IsActive) {
		return nil, false
	}
	return o.IsActive, true
}

// HasIsActive returns a boolean if a field has been set.
func (o *NoteTypeRequest) HasIsActive() bool {
	if o != nil && !IsNil(o.IsActive) {
		return true
	}

	return false
}

// SetIsActive gets a reference to the given bool and assigns it to the IsActive field.
func (o *NoteTypeRequest) SetIsActive(v bool) {
	o.IsActive = &v
}

// GetIsMandatory returns the IsMandatory field value if set, zero value otherwise.
func (o *NoteTypeRequest) GetIsMandatory() bool {
	if o == nil || IsNil(o.IsMandatory) {
		var ret bool
		return ret
	}
	return *o.IsMandatory
}

// GetIsMandatoryOk returns a tuple with the IsMandatory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NoteTypeRequest) GetIsMandatoryOk() (*bool, bool) {
	if o == nil || IsNil(o.IsMandatory) {
		return nil, false
	}
	return o.IsMandatory, true
}

// HasIsMandatory returns a boolean if a field has been set.
func (o *NoteTypeRequest) HasIsMandatory() bool {
	if o != nil && !IsNil(o.IsMandatory) {
		return true
	}

	return false
}

// SetIsMandatory gets a reference to the given bool and assigns it to the IsMandatory field.
func (o *NoteTypeRequest) SetIsMandatory(v bool) {
	o.IsMandatory = &v
}

func (o NoteTypeRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NoteTypeRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["description"] = o.Description
	if !IsNil(o.IsSingle) {
		toSerialize["is_single"] = o.IsSingle
	}
	if !IsNil(o.IsActive) {
		toSerialize["is_active"] = o.IsActive
	}
	if !IsNil(o.IsMandatory) {
		toSerialize["is_mandatory"] = o.IsMandatory
	}
	return toSerialize, nil
}

func (o *NoteTypeRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"description",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNoteTypeRequest := _NoteTypeRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNoteTypeRequest)

	if err != nil {
		return err
	}

	*o = NoteTypeRequest(varNoteTypeRequest)

	return err
}

type NullableNoteTypeRequest struct {
	value *NoteTypeRequest
	isSet bool
}

func (v NullableNoteTypeRequest) Get() *NoteTypeRequest {
	return v.value
}

func (v *NullableNoteTypeRequest) Set(val *NoteTypeRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableNoteTypeRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableNoteTypeRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNoteTypeRequest(val *NoteTypeRequest) *NullableNoteTypeRequest {
	return &NullableNoteTypeRequest{value: val, isSet: true}
}

func (v NullableNoteTypeRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNoteTypeRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


