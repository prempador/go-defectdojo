/*
Defect Dojo API v2

Defect Dojo - Open Source vulnerability Management made easy. Prefetch related parameters/responses not yet in the schema.

API version: 2.33.5
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package defectdojo

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the Note type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Note{}

// Note struct for Note
type Note struct {
	Id int32 `json:"id"`
	Author UserStub `json:"author"`
	Editor NullableUserStub `json:"editor"`
	History []NoteHistory `json:"history"`
	NoteType NoteType `json:"note_type"`
	Entry string `json:"entry"`
	Date time.Time `json:"date"`
	Private *bool `json:"private,omitempty"`
	Edited *bool `json:"edited,omitempty"`
	EditTime NullableTime `json:"edit_time"`
}

type _Note Note

// NewNote instantiates a new Note object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNote(id int32, author UserStub, editor NullableUserStub, history []NoteHistory, noteType NoteType, entry string, date time.Time, editTime NullableTime) *Note {
	this := Note{}
	this.Id = id
	this.Author = author
	this.Editor = editor
	this.History = history
	this.NoteType = noteType
	this.Entry = entry
	this.Date = date
	this.EditTime = editTime
	return &this
}

// NewNoteWithDefaults instantiates a new Note object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNoteWithDefaults() *Note {
	this := Note{}
	return &this
}

// GetId returns the Id field value
func (o *Note) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Note) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Note) SetId(v int32) {
	o.Id = v
}

// GetAuthor returns the Author field value
func (o *Note) GetAuthor() UserStub {
	if o == nil {
		var ret UserStub
		return ret
	}

	return o.Author
}

// GetAuthorOk returns a tuple with the Author field value
// and a boolean to check if the value has been set.
func (o *Note) GetAuthorOk() (*UserStub, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Author, true
}

// SetAuthor sets field value
func (o *Note) SetAuthor(v UserStub) {
	o.Author = v
}

// GetEditor returns the Editor field value
// If the value is explicit nil, the zero value for UserStub will be returned
func (o *Note) GetEditor() UserStub {
	if o == nil || o.Editor.Get() == nil {
		var ret UserStub
		return ret
	}

	return *o.Editor.Get()
}

// GetEditorOk returns a tuple with the Editor field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Note) GetEditorOk() (*UserStub, bool) {
	if o == nil {
		return nil, false
	}
	return o.Editor.Get(), o.Editor.IsSet()
}

// SetEditor sets field value
func (o *Note) SetEditor(v UserStub) {
	o.Editor.Set(&v)
}

// GetHistory returns the History field value
func (o *Note) GetHistory() []NoteHistory {
	if o == nil {
		var ret []NoteHistory
		return ret
	}

	return o.History
}

// GetHistoryOk returns a tuple with the History field value
// and a boolean to check if the value has been set.
func (o *Note) GetHistoryOk() ([]NoteHistory, bool) {
	if o == nil {
		return nil, false
	}
	return o.History, true
}

// SetHistory sets field value
func (o *Note) SetHistory(v []NoteHistory) {
	o.History = v
}

// GetNoteType returns the NoteType field value
func (o *Note) GetNoteType() NoteType {
	if o == nil {
		var ret NoteType
		return ret
	}

	return o.NoteType
}

// GetNoteTypeOk returns a tuple with the NoteType field value
// and a boolean to check if the value has been set.
func (o *Note) GetNoteTypeOk() (*NoteType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NoteType, true
}

// SetNoteType sets field value
func (o *Note) SetNoteType(v NoteType) {
	o.NoteType = v
}

// GetEntry returns the Entry field value
func (o *Note) GetEntry() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Entry
}

// GetEntryOk returns a tuple with the Entry field value
// and a boolean to check if the value has been set.
func (o *Note) GetEntryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Entry, true
}

// SetEntry sets field value
func (o *Note) SetEntry(v string) {
	o.Entry = v
}

// GetDate returns the Date field value
func (o *Note) GetDate() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Date
}

// GetDateOk returns a tuple with the Date field value
// and a boolean to check if the value has been set.
func (o *Note) GetDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Date, true
}

// SetDate sets field value
func (o *Note) SetDate(v time.Time) {
	o.Date = v
}

// GetPrivate returns the Private field value if set, zero value otherwise.
func (o *Note) GetPrivate() bool {
	if o == nil || IsNil(o.Private) {
		var ret bool
		return ret
	}
	return *o.Private
}

// GetPrivateOk returns a tuple with the Private field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Note) GetPrivateOk() (*bool, bool) {
	if o == nil || IsNil(o.Private) {
		return nil, false
	}
	return o.Private, true
}

// HasPrivate returns a boolean if a field has been set.
func (o *Note) HasPrivate() bool {
	if o != nil && !IsNil(o.Private) {
		return true
	}

	return false
}

// SetPrivate gets a reference to the given bool and assigns it to the Private field.
func (o *Note) SetPrivate(v bool) {
	o.Private = &v
}

// GetEdited returns the Edited field value if set, zero value otherwise.
func (o *Note) GetEdited() bool {
	if o == nil || IsNil(o.Edited) {
		var ret bool
		return ret
	}
	return *o.Edited
}

// GetEditedOk returns a tuple with the Edited field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Note) GetEditedOk() (*bool, bool) {
	if o == nil || IsNil(o.Edited) {
		return nil, false
	}
	return o.Edited, true
}

// HasEdited returns a boolean if a field has been set.
func (o *Note) HasEdited() bool {
	if o != nil && !IsNil(o.Edited) {
		return true
	}

	return false
}

// SetEdited gets a reference to the given bool and assigns it to the Edited field.
func (o *Note) SetEdited(v bool) {
	o.Edited = &v
}

// GetEditTime returns the EditTime field value
// If the value is explicit nil, the zero value for time.Time will be returned
func (o *Note) GetEditTime() time.Time {
	if o == nil || o.EditTime.Get() == nil {
		var ret time.Time
		return ret
	}

	return *o.EditTime.Get()
}

// GetEditTimeOk returns a tuple with the EditTime field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Note) GetEditTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.EditTime.Get(), o.EditTime.IsSet()
}

// SetEditTime sets field value
func (o *Note) SetEditTime(v time.Time) {
	o.EditTime.Set(&v)
}

func (o Note) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Note) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["author"] = o.Author
	toSerialize["editor"] = o.Editor.Get()
	toSerialize["history"] = o.History
	toSerialize["note_type"] = o.NoteType
	toSerialize["entry"] = o.Entry
	toSerialize["date"] = o.Date
	if !IsNil(o.Private) {
		toSerialize["private"] = o.Private
	}
	if !IsNil(o.Edited) {
		toSerialize["edited"] = o.Edited
	}
	toSerialize["edit_time"] = o.EditTime.Get()
	return toSerialize, nil
}

func (o *Note) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"author",
		"editor",
		"history",
		"note_type",
		"entry",
		"date",
		"edit_time",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNote := _Note{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNote)

	if err != nil {
		return err
	}

	*o = Note(varNote)

	return err
}

type NullableNote struct {
	value *Note
	isSet bool
}

func (v NullableNote) Get() *Note {
	return v.value
}

func (v *NullableNote) Set(val *Note) {
	v.value = val
	v.isSet = true
}

func (v NullableNote) IsSet() bool {
	return v.isSet
}

func (v *NullableNote) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNote(val *Note) *NullableNote {
	return &NullableNote{value: val, isSet: true}
}

func (v NullableNote) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNote) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


