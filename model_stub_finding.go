/*
Defect Dojo API v2

Defect Dojo - Open Source vulnerability Management made easy. Prefetch related parameters/responses not yet in the schema.

API version: 2.38.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package defectdojo

import (
	"encoding/json"
	"fmt"
)

// checks if the StubFinding type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StubFinding{}

// StubFinding struct for StubFinding
type StubFinding struct {
	Id int32 `json:"id"`
	Title string `json:"title"`
	Date *string `json:"date,omitempty"`
	Severity NullableString `json:"severity,omitempty"`
	Description NullableString `json:"description,omitempty"`
	Test int32 `json:"test"`
	Reporter int32 `json:"reporter"`
	AdditionalProperties map[string]interface{}
}

type _StubFinding StubFinding

// NewStubFinding instantiates a new StubFinding object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStubFinding(id int32, title string, test int32, reporter int32) *StubFinding {
	this := StubFinding{}
	this.Id = id
	this.Title = title
	this.Test = test
	this.Reporter = reporter
	return &this
}

// NewStubFindingWithDefaults instantiates a new StubFinding object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStubFindingWithDefaults() *StubFinding {
	this := StubFinding{}
	return &this
}

// GetId returns the Id field value
func (o *StubFinding) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *StubFinding) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *StubFinding) SetId(v int32) {
	o.Id = v
}


// GetTitle returns the Title field value
func (o *StubFinding) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *StubFinding) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *StubFinding) SetTitle(v string) {
	o.Title = v
}


// GetDate returns the Date field value if set, zero value otherwise.
func (o *StubFinding) GetDate() string {
	if o == nil || IsNil(o.Date) {
		var ret string
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StubFinding) GetDateOk() (*string, bool) {
	if o == nil || IsNil(o.Date) {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *StubFinding) HasDate() bool {
	if o != nil && !IsNil(o.Date) {
		return true
	}

	return false
}

// SetDate gets a reference to the given string and assigns it to the Date field.
func (o *StubFinding) SetDate(v string) {
	o.Date = &v
}

// GetSeverity returns the Severity field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StubFinding) GetSeverity() string {
	if o == nil || IsNil(o.Severity.Get()) {
		var ret string
		return ret
	}
	return *o.Severity.Get()
}

// GetSeverityOk returns a tuple with the Severity field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StubFinding) GetSeverityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Severity.Get(), o.Severity.IsSet()
}

// HasSeverity returns a boolean if a field has been set.
func (o *StubFinding) HasSeverity() bool {
	if o != nil && o.Severity.IsSet() {
		return true
	}

	return false
}

// SetSeverity gets a reference to the given NullableString and assigns it to the Severity field.
func (o *StubFinding) SetSeverity(v string) {
	o.Severity.Set(&v)
}
// SetSeverityNil sets the value for Severity to be an explicit nil
func (o *StubFinding) SetSeverityNil() {
	o.Severity.Set(nil)
}

// UnsetSeverity ensures that no value is present for Severity, not even an explicit nil
func (o *StubFinding) UnsetSeverity() {
	o.Severity.Unset()
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StubFinding) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StubFinding) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *StubFinding) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *StubFinding) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *StubFinding) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *StubFinding) UnsetDescription() {
	o.Description.Unset()
}

// GetTest returns the Test field value
func (o *StubFinding) GetTest() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Test
}

// GetTestOk returns a tuple with the Test field value
// and a boolean to check if the value has been set.
func (o *StubFinding) GetTestOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Test, true
}

// SetTest sets field value
func (o *StubFinding) SetTest(v int32) {
	o.Test = v
}


// GetReporter returns the Reporter field value
func (o *StubFinding) GetReporter() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Reporter
}

// GetReporterOk returns a tuple with the Reporter field value
// and a boolean to check if the value has been set.
func (o *StubFinding) GetReporterOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Reporter, true
}

// SetReporter sets field value
func (o *StubFinding) SetReporter(v int32) {
	o.Reporter = v
}


func (o StubFinding) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StubFinding) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["title"] = o.Title
	if !IsNil(o.Date) {
		toSerialize["date"] = o.Date
	}
	if o.Severity.IsSet() {
		toSerialize["severity"] = o.Severity.Get()
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	toSerialize["test"] = o.Test
	toSerialize["reporter"] = o.Reporter

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *StubFinding) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"title",
		"test",
		"reporter",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{} {
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == ""{
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil{
			return err
		}
	}
	varStubFinding := _StubFinding{}

	err = json.Unmarshal(data, &varStubFinding)

	if err != nil {
		return err
	}

	*o = StubFinding(varStubFinding)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "title")
		delete(additionalProperties, "date")
		delete(additionalProperties, "severity")
		delete(additionalProperties, "description")
		delete(additionalProperties, "test")
		delete(additionalProperties, "reporter")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableStubFinding struct {
	value *StubFinding
	isSet bool
}

func (v NullableStubFinding) Get() *StubFinding {
	return v.value
}

func (v *NullableStubFinding) Set(val *StubFinding) {
	v.value = val
	v.isSet = true
}

func (v NullableStubFinding) IsSet() bool {
	return v.isSet
}

func (v *NullableStubFinding) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStubFinding(val *StubFinding) *NullableStubFinding {
	return &NullableStubFinding{value: val, isSet: true}
}

func (v NullableStubFinding) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStubFinding) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


