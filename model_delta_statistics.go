/*
Defect Dojo API v2

Defect Dojo - Open Source vulnerability Management made easy. Prefetch related parameters/responses not yet in the schema.

API version: 2.38.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package defectdojo

import (
	"encoding/json"
	"fmt"
)

// checks if the DeltaStatistics type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeltaStatistics{}

// DeltaStatistics struct for DeltaStatistics
type DeltaStatistics struct {
	Created SeverityStatusStatistics `json:"created"`
	Closed SeverityStatusStatistics `json:"closed"`
	Reactivated SeverityStatusStatistics `json:"reactivated"`
	LeftUntouched SeverityStatusStatistics `json:"left untouched"`
	AdditionalProperties map[string]interface{}
}

type _DeltaStatistics DeltaStatistics

// NewDeltaStatistics instantiates a new DeltaStatistics object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeltaStatistics(created SeverityStatusStatistics, closed SeverityStatusStatistics, reactivated SeverityStatusStatistics, leftUntouched SeverityStatusStatistics) *DeltaStatistics {
	this := DeltaStatistics{}
	this.Created = created
	this.Closed = closed
	this.Reactivated = reactivated
	this.LeftUntouched = leftUntouched
	return &this
}

// NewDeltaStatisticsWithDefaults instantiates a new DeltaStatistics object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeltaStatisticsWithDefaults() *DeltaStatistics {
	this := DeltaStatistics{}
	return &this
}

// GetCreated returns the Created field value
func (o *DeltaStatistics) GetCreated() SeverityStatusStatistics {
	if o == nil {
		var ret SeverityStatusStatistics
		return ret
	}

	return o.Created
}

// GetCreatedOk returns a tuple with the Created field value
// and a boolean to check if the value has been set.
func (o *DeltaStatistics) GetCreatedOk() (*SeverityStatusStatistics, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Created, true
}

// SetCreated sets field value
func (o *DeltaStatistics) SetCreated(v SeverityStatusStatistics) {
	o.Created = v
}


// GetClosed returns the Closed field value
func (o *DeltaStatistics) GetClosed() SeverityStatusStatistics {
	if o == nil {
		var ret SeverityStatusStatistics
		return ret
	}

	return o.Closed
}

// GetClosedOk returns a tuple with the Closed field value
// and a boolean to check if the value has been set.
func (o *DeltaStatistics) GetClosedOk() (*SeverityStatusStatistics, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Closed, true
}

// SetClosed sets field value
func (o *DeltaStatistics) SetClosed(v SeverityStatusStatistics) {
	o.Closed = v
}


// GetReactivated returns the Reactivated field value
func (o *DeltaStatistics) GetReactivated() SeverityStatusStatistics {
	if o == nil {
		var ret SeverityStatusStatistics
		return ret
	}

	return o.Reactivated
}

// GetReactivatedOk returns a tuple with the Reactivated field value
// and a boolean to check if the value has been set.
func (o *DeltaStatistics) GetReactivatedOk() (*SeverityStatusStatistics, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Reactivated, true
}

// SetReactivated sets field value
func (o *DeltaStatistics) SetReactivated(v SeverityStatusStatistics) {
	o.Reactivated = v
}


// GetLeftUntouched returns the LeftUntouched field value
func (o *DeltaStatistics) GetLeftUntouched() SeverityStatusStatistics {
	if o == nil {
		var ret SeverityStatusStatistics
		return ret
	}

	return o.LeftUntouched
}

// GetLeftUntouchedOk returns a tuple with the LeftUntouched field value
// and a boolean to check if the value has been set.
func (o *DeltaStatistics) GetLeftUntouchedOk() (*SeverityStatusStatistics, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LeftUntouched, true
}

// SetLeftUntouched sets field value
func (o *DeltaStatistics) SetLeftUntouched(v SeverityStatusStatistics) {
	o.LeftUntouched = v
}


func (o DeltaStatistics) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeltaStatistics) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["created"] = o.Created
	toSerialize["closed"] = o.Closed
	toSerialize["reactivated"] = o.Reactivated
	toSerialize["left untouched"] = o.LeftUntouched

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DeltaStatistics) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"created",
		"closed",
		"reactivated",
		"left untouched",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{} {
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == ""{
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil{
			return err
		}
	}
	varDeltaStatistics := _DeltaStatistics{}

	err = json.Unmarshal(data, &varDeltaStatistics)

	if err != nil {
		return err
	}

	*o = DeltaStatistics(varDeltaStatistics)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "created")
		delete(additionalProperties, "closed")
		delete(additionalProperties, "reactivated")
		delete(additionalProperties, "left untouched")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDeltaStatistics struct {
	value *DeltaStatistics
	isSet bool
}

func (v NullableDeltaStatistics) Get() *DeltaStatistics {
	return v.value
}

func (v *NullableDeltaStatistics) Set(val *DeltaStatistics) {
	v.value = val
	v.isSet = true
}

func (v NullableDeltaStatistics) IsSet() bool {
	return v.isSet
}

func (v *NullableDeltaStatistics) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeltaStatistics(val *DeltaStatistics) *NullableDeltaStatistics {
	return &NullableDeltaStatistics{value: val, isSet: true}
}

func (v NullableDeltaStatistics) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeltaStatistics) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


