/*
Defect Dojo API v2

Defect Dojo - Open Source vulnerability Management made easy. Prefetch related parameters/responses not yet in the schema.

API version: 2.38.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package defectdojo

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the SonarqubeIssueTransition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SonarqubeIssueTransition{}

// SonarqubeIssueTransition struct for SonarqubeIssueTransition
type SonarqubeIssueTransition struct {
	Id int32 `json:"id"`
	Created time.Time `json:"created"`
	FindingStatus string `json:"finding_status"`
	SonarqubeStatus string `json:"sonarqube_status"`
	Transitions string `json:"transitions"`
	SonarqubeIssue int32 `json:"sonarqube_issue"`
	AdditionalProperties map[string]interface{}
}

type _SonarqubeIssueTransition SonarqubeIssueTransition

// NewSonarqubeIssueTransition instantiates a new SonarqubeIssueTransition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSonarqubeIssueTransition(id int32, created time.Time, findingStatus string, sonarqubeStatus string, transitions string, sonarqubeIssue int32) *SonarqubeIssueTransition {
	this := SonarqubeIssueTransition{}
	this.Id = id
	this.Created = created
	this.FindingStatus = findingStatus
	this.SonarqubeStatus = sonarqubeStatus
	this.Transitions = transitions
	this.SonarqubeIssue = sonarqubeIssue
	return &this
}

// NewSonarqubeIssueTransitionWithDefaults instantiates a new SonarqubeIssueTransition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSonarqubeIssueTransitionWithDefaults() *SonarqubeIssueTransition {
	this := SonarqubeIssueTransition{}
	return &this
}

// GetId returns the Id field value
func (o *SonarqubeIssueTransition) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *SonarqubeIssueTransition) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *SonarqubeIssueTransition) SetId(v int32) {
	o.Id = v
}


// GetCreated returns the Created field value
func (o *SonarqubeIssueTransition) GetCreated() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Created
}

// GetCreatedOk returns a tuple with the Created field value
// and a boolean to check if the value has been set.
func (o *SonarqubeIssueTransition) GetCreatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Created, true
}

// SetCreated sets field value
func (o *SonarqubeIssueTransition) SetCreated(v time.Time) {
	o.Created = v
}


// GetFindingStatus returns the FindingStatus field value
func (o *SonarqubeIssueTransition) GetFindingStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FindingStatus
}

// GetFindingStatusOk returns a tuple with the FindingStatus field value
// and a boolean to check if the value has been set.
func (o *SonarqubeIssueTransition) GetFindingStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FindingStatus, true
}

// SetFindingStatus sets field value
func (o *SonarqubeIssueTransition) SetFindingStatus(v string) {
	o.FindingStatus = v
}


// GetSonarqubeStatus returns the SonarqubeStatus field value
func (o *SonarqubeIssueTransition) GetSonarqubeStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SonarqubeStatus
}

// GetSonarqubeStatusOk returns a tuple with the SonarqubeStatus field value
// and a boolean to check if the value has been set.
func (o *SonarqubeIssueTransition) GetSonarqubeStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SonarqubeStatus, true
}

// SetSonarqubeStatus sets field value
func (o *SonarqubeIssueTransition) SetSonarqubeStatus(v string) {
	o.SonarqubeStatus = v
}


// GetTransitions returns the Transitions field value
func (o *SonarqubeIssueTransition) GetTransitions() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Transitions
}

// GetTransitionsOk returns a tuple with the Transitions field value
// and a boolean to check if the value has been set.
func (o *SonarqubeIssueTransition) GetTransitionsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Transitions, true
}

// SetTransitions sets field value
func (o *SonarqubeIssueTransition) SetTransitions(v string) {
	o.Transitions = v
}


// GetSonarqubeIssue returns the SonarqubeIssue field value
func (o *SonarqubeIssueTransition) GetSonarqubeIssue() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.SonarqubeIssue
}

// GetSonarqubeIssueOk returns a tuple with the SonarqubeIssue field value
// and a boolean to check if the value has been set.
func (o *SonarqubeIssueTransition) GetSonarqubeIssueOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SonarqubeIssue, true
}

// SetSonarqubeIssue sets field value
func (o *SonarqubeIssueTransition) SetSonarqubeIssue(v int32) {
	o.SonarqubeIssue = v
}


func (o SonarqubeIssueTransition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SonarqubeIssueTransition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["created"] = o.Created
	toSerialize["finding_status"] = o.FindingStatus
	toSerialize["sonarqube_status"] = o.SonarqubeStatus
	toSerialize["transitions"] = o.Transitions
	toSerialize["sonarqube_issue"] = o.SonarqubeIssue

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SonarqubeIssueTransition) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"created",
		"finding_status",
		"sonarqube_status",
		"transitions",
		"sonarqube_issue",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{} {
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == ""{
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil{
			return err
		}
	}
	varSonarqubeIssueTransition := _SonarqubeIssueTransition{}

	err = json.Unmarshal(data, &varSonarqubeIssueTransition)

	if err != nil {
		return err
	}

	*o = SonarqubeIssueTransition(varSonarqubeIssueTransition)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "created")
		delete(additionalProperties, "finding_status")
		delete(additionalProperties, "sonarqube_status")
		delete(additionalProperties, "transitions")
		delete(additionalProperties, "sonarqube_issue")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSonarqubeIssueTransition struct {
	value *SonarqubeIssueTransition
	isSet bool
}

func (v NullableSonarqubeIssueTransition) Get() *SonarqubeIssueTransition {
	return v.value
}

func (v *NullableSonarqubeIssueTransition) Set(val *SonarqubeIssueTransition) {
	v.value = val
	v.isSet = true
}

func (v NullableSonarqubeIssueTransition) IsSet() bool {
	return v.isSet
}

func (v *NullableSonarqubeIssueTransition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSonarqubeIssueTransition(val *SonarqubeIssueTransition) *NullableSonarqubeIssueTransition {
	return &NullableSonarqubeIssueTransition{value: val, isSet: true}
}

func (v NullableSonarqubeIssueTransition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSonarqubeIssueTransition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


