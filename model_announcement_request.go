/*
Defect Dojo API v2

Defect Dojo - Open Source vulnerability Management made easy. Prefetch related parameters/responses not yet in the schema.

API version: 2.38.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package defectdojo

import (
	"encoding/json"
)

// checks if the AnnouncementRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AnnouncementRequest{}

// AnnouncementRequest struct for AnnouncementRequest
type AnnouncementRequest struct {
	// This dismissable message will be displayed on all pages for authenticated users. It can contain basic html tags, for example <a href='https://www.fred.com' style='color: #337ab7;' target='_blank'>https://example.com</a>
	Message *string `json:"message,omitempty"`
	// The style of banner to display. (info, success, warning, danger)  * `info` - Info * `success` - Success * `warning` - Warning * `danger` - Danger
	Style *string `json:"style,omitempty"`
	// Ticking this box allows users to dismiss the current announcement
	Dismissable *bool `json:"dismissable,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AnnouncementRequest AnnouncementRequest

// NewAnnouncementRequest instantiates a new AnnouncementRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAnnouncementRequest() *AnnouncementRequest {
	this := AnnouncementRequest{}
	return &this
}

// NewAnnouncementRequestWithDefaults instantiates a new AnnouncementRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAnnouncementRequestWithDefaults() *AnnouncementRequest {
	this := AnnouncementRequest{}
	return &this
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *AnnouncementRequest) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnnouncementRequest) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *AnnouncementRequest) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *AnnouncementRequest) SetMessage(v string) {
	o.Message = &v
}

// GetStyle returns the Style field value if set, zero value otherwise.
func (o *AnnouncementRequest) GetStyle() string {
	if o == nil || IsNil(o.Style) {
		var ret string
		return ret
	}
	return *o.Style
}

// GetStyleOk returns a tuple with the Style field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnnouncementRequest) GetStyleOk() (*string, bool) {
	if o == nil || IsNil(o.Style) {
		return nil, false
	}
	return o.Style, true
}

// HasStyle returns a boolean if a field has been set.
func (o *AnnouncementRequest) HasStyle() bool {
	if o != nil && !IsNil(o.Style) {
		return true
	}

	return false
}

// SetStyle gets a reference to the given string and assigns it to the Style field.
func (o *AnnouncementRequest) SetStyle(v string) {
	o.Style = &v
}

// GetDismissable returns the Dismissable field value if set, zero value otherwise.
func (o *AnnouncementRequest) GetDismissable() bool {
	if o == nil || IsNil(o.Dismissable) {
		var ret bool
		return ret
	}
	return *o.Dismissable
}

// GetDismissableOk returns a tuple with the Dismissable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnnouncementRequest) GetDismissableOk() (*bool, bool) {
	if o == nil || IsNil(o.Dismissable) {
		return nil, false
	}
	return o.Dismissable, true
}

// HasDismissable returns a boolean if a field has been set.
func (o *AnnouncementRequest) HasDismissable() bool {
	if o != nil && !IsNil(o.Dismissable) {
		return true
	}

	return false
}

// SetDismissable gets a reference to the given bool and assigns it to the Dismissable field.
func (o *AnnouncementRequest) SetDismissable(v bool) {
	o.Dismissable = &v
}

func (o AnnouncementRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AnnouncementRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.Style) {
		toSerialize["style"] = o.Style
	}
	if !IsNil(o.Dismissable) {
		toSerialize["dismissable"] = o.Dismissable
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AnnouncementRequest) UnmarshalJSON(data []byte) (err error) {
	varAnnouncementRequest := _AnnouncementRequest{}

	err = json.Unmarshal(data, &varAnnouncementRequest)

	if err != nil {
		return err
	}

	*o = AnnouncementRequest(varAnnouncementRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "message")
		delete(additionalProperties, "style")
		delete(additionalProperties, "dismissable")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAnnouncementRequest struct {
	value *AnnouncementRequest
	isSet bool
}

func (v NullableAnnouncementRequest) Get() *AnnouncementRequest {
	return v.value
}

func (v *NullableAnnouncementRequest) Set(val *AnnouncementRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAnnouncementRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAnnouncementRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAnnouncementRequest(val *AnnouncementRequest) *NullableAnnouncementRequest {
	return &NullableAnnouncementRequest{value: val, isSet: true}
}

func (v NullableAnnouncementRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAnnouncementRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


