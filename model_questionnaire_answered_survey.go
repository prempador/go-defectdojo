/*
Defect Dojo API v2

Defect Dojo - Open Source vulnerability Management made easy. Prefetch related parameters/responses not yet in the schema.

API version: 2.31.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package defectdojo

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the QuestionnaireAnsweredSurvey type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QuestionnaireAnsweredSurvey{}

// QuestionnaireAnsweredSurvey struct for QuestionnaireAnsweredSurvey
type QuestionnaireAnsweredSurvey struct {
	Id int32 `json:"id"`
	Completed *bool `json:"completed,omitempty"`
	AnsweredOn NullableString `json:"answered_on,omitempty"`
	Engagement NullableInt32 `json:"engagement,omitempty"`
	Survey int32 `json:"survey"`
	Assignee NullableInt32 `json:"assignee,omitempty"`
	Responder NullableInt32 `json:"responder,omitempty"`
}

type _QuestionnaireAnsweredSurvey QuestionnaireAnsweredSurvey

// NewQuestionnaireAnsweredSurvey instantiates a new QuestionnaireAnsweredSurvey object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQuestionnaireAnsweredSurvey(id int32, survey int32) *QuestionnaireAnsweredSurvey {
	this := QuestionnaireAnsweredSurvey{}
	this.Id = id
	this.Survey = survey
	return &this
}

// NewQuestionnaireAnsweredSurveyWithDefaults instantiates a new QuestionnaireAnsweredSurvey object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQuestionnaireAnsweredSurveyWithDefaults() *QuestionnaireAnsweredSurvey {
	this := QuestionnaireAnsweredSurvey{}
	return &this
}

// GetId returns the Id field value
func (o *QuestionnaireAnsweredSurvey) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *QuestionnaireAnsweredSurvey) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *QuestionnaireAnsweredSurvey) SetId(v int32) {
	o.Id = v
}

// GetCompleted returns the Completed field value if set, zero value otherwise.
func (o *QuestionnaireAnsweredSurvey) GetCompleted() bool {
	if o == nil || IsNil(o.Completed) {
		var ret bool
		return ret
	}
	return *o.Completed
}

// GetCompletedOk returns a tuple with the Completed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuestionnaireAnsweredSurvey) GetCompletedOk() (*bool, bool) {
	if o == nil || IsNil(o.Completed) {
		return nil, false
	}
	return o.Completed, true
}

// HasCompleted returns a boolean if a field has been set.
func (o *QuestionnaireAnsweredSurvey) HasCompleted() bool {
	if o != nil && !IsNil(o.Completed) {
		return true
	}

	return false
}

// SetCompleted gets a reference to the given bool and assigns it to the Completed field.
func (o *QuestionnaireAnsweredSurvey) SetCompleted(v bool) {
	o.Completed = &v
}

// GetAnsweredOn returns the AnsweredOn field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *QuestionnaireAnsweredSurvey) GetAnsweredOn() string {
	if o == nil || IsNil(o.AnsweredOn.Get()) {
		var ret string
		return ret
	}
	return *o.AnsweredOn.Get()
}

// GetAnsweredOnOk returns a tuple with the AnsweredOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *QuestionnaireAnsweredSurvey) GetAnsweredOnOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AnsweredOn.Get(), o.AnsweredOn.IsSet()
}

// HasAnsweredOn returns a boolean if a field has been set.
func (o *QuestionnaireAnsweredSurvey) HasAnsweredOn() bool {
	if o != nil && o.AnsweredOn.IsSet() {
		return true
	}

	return false
}

// SetAnsweredOn gets a reference to the given NullableString and assigns it to the AnsweredOn field.
func (o *QuestionnaireAnsweredSurvey) SetAnsweredOn(v string) {
	o.AnsweredOn.Set(&v)
}
// SetAnsweredOnNil sets the value for AnsweredOn to be an explicit nil
func (o *QuestionnaireAnsweredSurvey) SetAnsweredOnNil() {
	o.AnsweredOn.Set(nil)
}

// UnsetAnsweredOn ensures that no value is present for AnsweredOn, not even an explicit nil
func (o *QuestionnaireAnsweredSurvey) UnsetAnsweredOn() {
	o.AnsweredOn.Unset()
}

// GetEngagement returns the Engagement field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *QuestionnaireAnsweredSurvey) GetEngagement() int32 {
	if o == nil || IsNil(o.Engagement.Get()) {
		var ret int32
		return ret
	}
	return *o.Engagement.Get()
}

// GetEngagementOk returns a tuple with the Engagement field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *QuestionnaireAnsweredSurvey) GetEngagementOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Engagement.Get(), o.Engagement.IsSet()
}

// HasEngagement returns a boolean if a field has been set.
func (o *QuestionnaireAnsweredSurvey) HasEngagement() bool {
	if o != nil && o.Engagement.IsSet() {
		return true
	}

	return false
}

// SetEngagement gets a reference to the given NullableInt32 and assigns it to the Engagement field.
func (o *QuestionnaireAnsweredSurvey) SetEngagement(v int32) {
	o.Engagement.Set(&v)
}
// SetEngagementNil sets the value for Engagement to be an explicit nil
func (o *QuestionnaireAnsweredSurvey) SetEngagementNil() {
	o.Engagement.Set(nil)
}

// UnsetEngagement ensures that no value is present for Engagement, not even an explicit nil
func (o *QuestionnaireAnsweredSurvey) UnsetEngagement() {
	o.Engagement.Unset()
}

// GetSurvey returns the Survey field value
func (o *QuestionnaireAnsweredSurvey) GetSurvey() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Survey
}

// GetSurveyOk returns a tuple with the Survey field value
// and a boolean to check if the value has been set.
func (o *QuestionnaireAnsweredSurvey) GetSurveyOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Survey, true
}

// SetSurvey sets field value
func (o *QuestionnaireAnsweredSurvey) SetSurvey(v int32) {
	o.Survey = v
}

// GetAssignee returns the Assignee field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *QuestionnaireAnsweredSurvey) GetAssignee() int32 {
	if o == nil || IsNil(o.Assignee.Get()) {
		var ret int32
		return ret
	}
	return *o.Assignee.Get()
}

// GetAssigneeOk returns a tuple with the Assignee field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *QuestionnaireAnsweredSurvey) GetAssigneeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Assignee.Get(), o.Assignee.IsSet()
}

// HasAssignee returns a boolean if a field has been set.
func (o *QuestionnaireAnsweredSurvey) HasAssignee() bool {
	if o != nil && o.Assignee.IsSet() {
		return true
	}

	return false
}

// SetAssignee gets a reference to the given NullableInt32 and assigns it to the Assignee field.
func (o *QuestionnaireAnsweredSurvey) SetAssignee(v int32) {
	o.Assignee.Set(&v)
}
// SetAssigneeNil sets the value for Assignee to be an explicit nil
func (o *QuestionnaireAnsweredSurvey) SetAssigneeNil() {
	o.Assignee.Set(nil)
}

// UnsetAssignee ensures that no value is present for Assignee, not even an explicit nil
func (o *QuestionnaireAnsweredSurvey) UnsetAssignee() {
	o.Assignee.Unset()
}

// GetResponder returns the Responder field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *QuestionnaireAnsweredSurvey) GetResponder() int32 {
	if o == nil || IsNil(o.Responder.Get()) {
		var ret int32
		return ret
	}
	return *o.Responder.Get()
}

// GetResponderOk returns a tuple with the Responder field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *QuestionnaireAnsweredSurvey) GetResponderOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Responder.Get(), o.Responder.IsSet()
}

// HasResponder returns a boolean if a field has been set.
func (o *QuestionnaireAnsweredSurvey) HasResponder() bool {
	if o != nil && o.Responder.IsSet() {
		return true
	}

	return false
}

// SetResponder gets a reference to the given NullableInt32 and assigns it to the Responder field.
func (o *QuestionnaireAnsweredSurvey) SetResponder(v int32) {
	o.Responder.Set(&v)
}
// SetResponderNil sets the value for Responder to be an explicit nil
func (o *QuestionnaireAnsweredSurvey) SetResponderNil() {
	o.Responder.Set(nil)
}

// UnsetResponder ensures that no value is present for Responder, not even an explicit nil
func (o *QuestionnaireAnsweredSurvey) UnsetResponder() {
	o.Responder.Unset()
}

func (o QuestionnaireAnsweredSurvey) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QuestionnaireAnsweredSurvey) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.Completed) {
		toSerialize["completed"] = o.Completed
	}
	if o.AnsweredOn.IsSet() {
		toSerialize["answered_on"] = o.AnsweredOn.Get()
	}
	if o.Engagement.IsSet() {
		toSerialize["engagement"] = o.Engagement.Get()
	}
	toSerialize["survey"] = o.Survey
	if o.Assignee.IsSet() {
		toSerialize["assignee"] = o.Assignee.Get()
	}
	if o.Responder.IsSet() {
		toSerialize["responder"] = o.Responder.Get()
	}
	return toSerialize, nil
}

func (o *QuestionnaireAnsweredSurvey) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"survey",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varQuestionnaireAnsweredSurvey := _QuestionnaireAnsweredSurvey{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varQuestionnaireAnsweredSurvey)

	if err != nil {
		return err
	}

	*o = QuestionnaireAnsweredSurvey(varQuestionnaireAnsweredSurvey)

	return err
}

type NullableQuestionnaireAnsweredSurvey struct {
	value *QuestionnaireAnsweredSurvey
	isSet bool
}

func (v NullableQuestionnaireAnsweredSurvey) Get() *QuestionnaireAnsweredSurvey {
	return v.value
}

func (v *NullableQuestionnaireAnsweredSurvey) Set(val *QuestionnaireAnsweredSurvey) {
	v.value = val
	v.isSet = true
}

func (v NullableQuestionnaireAnsweredSurvey) IsSet() bool {
	return v.isSet
}

func (v *NullableQuestionnaireAnsweredSurvey) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQuestionnaireAnsweredSurvey(val *QuestionnaireAnsweredSurvey) *NullableQuestionnaireAnsweredSurvey {
	return &NullableQuestionnaireAnsweredSurvey{value: val, isSet: true}
}

func (v NullableQuestionnaireAnsweredSurvey) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQuestionnaireAnsweredSurvey) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


