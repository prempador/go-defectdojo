/*
Defect Dojo API v2

Defect Dojo - Open Source vulnerability Management made easy. Prefetch related parameters/responses not yet in the schema.

API version: 2.33.5
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package defectdojo

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SystemSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SystemSettings{}

// SystemSettings struct for SystemSettings
type SystemSettings struct {
	Id int32 `json:"id"`
	// With this setting turned on, DefectDojo deduplicates findings by comparing endpoints, cwe fields, and titles. If two findings share a URL and have the same CWE or title, DefectDojo marks the recent finding as a duplicate. When deduplication is enabled, a list of deduplicated findings is added to the engagement view.
	EnableDeduplication *bool `json:"enable_deduplication,omitempty"`
	// Requires next setting: maximum number of duplicates to retain.
	DeleteDuplicates *bool `json:"delete_duplicates,omitempty"`
	// When enabled, if a single issue reaches the maximum number of duplicates, the oldest will be deleted. Duplicate will not be deleted when left empty. A value of 0 will remove all duplicates.
	MaxDupes NullableInt32 `json:"max_dupes,omitempty"`
	EmailFrom *string `json:"email_from,omitempty"`
	EnableJira *bool `json:"enable_jira,omitempty"`
	// Please note: It is strongly recommended to use a secret below and / or IP whitelist the JIRA server using a proxy such as Nginx.
	EnableJiraWebHook *bool `json:"enable_jira_web_hook,omitempty"`
	// Allows incoming requests without a secret (discouraged legacy behaviour)
	DisableJiraWebhookSecret *bool `json:"disable_jira_webhook_secret,omitempty"`
	// Secret needed in URL for incoming JIRA Webhook
	JiraWebhookSecret NullableString `json:"jira_webhook_secret,omitempty"`
	// * `Critical` - Critical * `High` - High * `Medium` - Medium * `Low` - Low * `Info` - Info
	JiraMinimumSeverity NullableString `json:"jira_minimum_severity,omitempty"`
	// JIRA issue labels space seperated
	JiraLabels NullableString `json:"jira_labels,omitempty"`
	AddVulnerabilityIdToJiraLabel *bool `json:"add_vulnerability_id_to_jira_label,omitempty"`
	EnableGithub *bool `json:"enable_github,omitempty"`
	EnableSlackNotifications *bool `json:"enable_slack_notifications,omitempty"`
	// Optional. Needed if you want to send global notifications.
	SlackChannel *string `json:"slack_channel,omitempty"`
	// Token required for interacting with Slack. Get one at https://api.slack.com/tokens
	SlackToken *string `json:"slack_token,omitempty"`
	// Optional. Will take your bot name otherwise.
	SlackUsername *string `json:"slack_username,omitempty"`
	EnableMsteamsNotifications *bool `json:"enable_msteams_notifications,omitempty"`
	// The full URL of the incoming webhook
	MsteamsUrl *string `json:"msteams_url,omitempty"`
	EnableMailNotifications *bool `json:"enable_mail_notifications,omitempty"`
	MailNotificationsTo *string `json:"mail_notifications_to,omitempty"`
	// (EXPERIMENTAL) DefectDojo will automatically mark the finding as a false positive if an equal finding (according to its dedupe algorithm) has been previously marked as a false positive on the same product. ATTENTION: Although the deduplication algorithm is used to determine if a finding should be marked as a false positive, this feature will not work if deduplication is enabled since it doesn't make sense to use both.
	FalsePositiveHistory *bool `json:"false_positive_history,omitempty"`
	// (EXPERIMENTAL) FP History will also retroactively mark/unmark all existing equal findings in the same product as a false positives. Only works if the False Positive History feature is also enabled.
	RetroactiveFalsePositiveHistory *bool `json:"retroactive_false_positive_history,omitempty"`
	// URL prefix if DefectDojo is installed in it's own virtual subdirectory.
	UrlPrefix *string `json:"url_prefix,omitempty"`
	TeamName *string `json:"team_name,omitempty"`
	// * `Africa/Abidjan` - Africa/Abidjan * `Africa/Accra` - Africa/Accra * `Africa/Addis_Ababa` - Africa/Addis_Ababa * `Africa/Algiers` - Africa/Algiers * `Africa/Asmara` - Africa/Asmara * `Africa/Asmera` - Africa/Asmera * `Africa/Bamako` - Africa/Bamako * `Africa/Bangui` - Africa/Bangui * `Africa/Banjul` - Africa/Banjul * `Africa/Bissau` - Africa/Bissau * `Africa/Blantyre` - Africa/Blantyre * `Africa/Brazzaville` - Africa/Brazzaville * `Africa/Bujumbura` - Africa/Bujumbura * `Africa/Cairo` - Africa/Cairo * `Africa/Casablanca` - Africa/Casablanca * `Africa/Ceuta` - Africa/Ceuta * `Africa/Conakry` - Africa/Conakry * `Africa/Dakar` - Africa/Dakar * `Africa/Dar_es_Salaam` - Africa/Dar_es_Salaam * `Africa/Djibouti` - Africa/Djibouti * `Africa/Douala` - Africa/Douala * `Africa/El_Aaiun` - Africa/El_Aaiun * `Africa/Freetown` - Africa/Freetown * `Africa/Gaborone` - Africa/Gaborone * `Africa/Harare` - Africa/Harare * `Africa/Johannesburg` - Africa/Johannesburg * `Africa/Juba` - Africa/Juba * `Africa/Kampala` - Africa/Kampala * `Africa/Khartoum` - Africa/Khartoum * `Africa/Kigali` - Africa/Kigali * `Africa/Kinshasa` - Africa/Kinshasa * `Africa/Lagos` - Africa/Lagos * `Africa/Libreville` - Africa/Libreville * `Africa/Lome` - Africa/Lome * `Africa/Luanda` - Africa/Luanda * `Africa/Lubumbashi` - Africa/Lubumbashi * `Africa/Lusaka` - Africa/Lusaka * `Africa/Malabo` - Africa/Malabo * `Africa/Maputo` - Africa/Maputo * `Africa/Maseru` - Africa/Maseru * `Africa/Mbabane` - Africa/Mbabane * `Africa/Mogadishu` - Africa/Mogadishu * `Africa/Monrovia` - Africa/Monrovia * `Africa/Nairobi` - Africa/Nairobi * `Africa/Ndjamena` - Africa/Ndjamena * `Africa/Niamey` - Africa/Niamey * `Africa/Nouakchott` - Africa/Nouakchott * `Africa/Ouagadougou` - Africa/Ouagadougou * `Africa/Porto-Novo` - Africa/Porto-Novo * `Africa/Sao_Tome` - Africa/Sao_Tome * `Africa/Timbuktu` - Africa/Timbuktu * `Africa/Tripoli` - Africa/Tripoli * `Africa/Tunis` - Africa/Tunis * `Africa/Windhoek` - Africa/Windhoek * `America/Adak` - America/Adak * `America/Anchorage` - America/Anchorage * `America/Anguilla` - America/Anguilla * `America/Antigua` - America/Antigua * `America/Araguaina` - America/Araguaina * `America/Argentina/Buenos_Aires` - America/Argentina/Buenos_Aires * `America/Argentina/Catamarca` - America/Argentina/Catamarca * `America/Argentina/ComodRivadavia` - America/Argentina/ComodRivadavia * `America/Argentina/Cordoba` - America/Argentina/Cordoba * `America/Argentina/Jujuy` - America/Argentina/Jujuy * `America/Argentina/La_Rioja` - America/Argentina/La_Rioja * `America/Argentina/Mendoza` - America/Argentina/Mendoza * `America/Argentina/Rio_Gallegos` - America/Argentina/Rio_Gallegos * `America/Argentina/Salta` - America/Argentina/Salta * `America/Argentina/San_Juan` - America/Argentina/San_Juan * `America/Argentina/San_Luis` - America/Argentina/San_Luis * `America/Argentina/Tucuman` - America/Argentina/Tucuman * `America/Argentina/Ushuaia` - America/Argentina/Ushuaia * `America/Aruba` - America/Aruba * `America/Asuncion` - America/Asuncion * `America/Atikokan` - America/Atikokan * `America/Atka` - America/Atka * `America/Bahia` - America/Bahia * `America/Bahia_Banderas` - America/Bahia_Banderas * `America/Barbados` - America/Barbados * `America/Belem` - America/Belem * `America/Belize` - America/Belize * `America/Blanc-Sablon` - America/Blanc-Sablon * `America/Boa_Vista` - America/Boa_Vista * `America/Bogota` - America/Bogota * `America/Boise` - America/Boise * `America/Buenos_Aires` - America/Buenos_Aires * `America/Cambridge_Bay` - America/Cambridge_Bay * `America/Campo_Grande` - America/Campo_Grande * `America/Cancun` - America/Cancun * `America/Caracas` - America/Caracas * `America/Catamarca` - America/Catamarca * `America/Cayenne` - America/Cayenne * `America/Cayman` - America/Cayman * `America/Chicago` - America/Chicago * `America/Chihuahua` - America/Chihuahua * `America/Ciudad_Juarez` - America/Ciudad_Juarez * `America/Coral_Harbour` - America/Coral_Harbour * `America/Cordoba` - America/Cordoba * `America/Costa_Rica` - America/Costa_Rica * `America/Creston` - America/Creston * `America/Cuiaba` - America/Cuiaba * `America/Curacao` - America/Curacao * `America/Danmarkshavn` - America/Danmarkshavn * `America/Dawson` - America/Dawson * `America/Dawson_Creek` - America/Dawson_Creek * `America/Denver` - America/Denver * `America/Detroit` - America/Detroit * `America/Dominica` - America/Dominica * `America/Edmonton` - America/Edmonton * `America/Eirunepe` - America/Eirunepe * `America/El_Salvador` - America/El_Salvador * `America/Ensenada` - America/Ensenada * `America/Fort_Nelson` - America/Fort_Nelson * `America/Fort_Wayne` - America/Fort_Wayne * `America/Fortaleza` - America/Fortaleza * `America/Glace_Bay` - America/Glace_Bay * `America/Godthab` - America/Godthab * `America/Goose_Bay` - America/Goose_Bay * `America/Grand_Turk` - America/Grand_Turk * `America/Grenada` - America/Grenada * `America/Guadeloupe` - America/Guadeloupe * `America/Guatemala` - America/Guatemala * `America/Guayaquil` - America/Guayaquil * `America/Guyana` - America/Guyana * `America/Halifax` - America/Halifax * `America/Havana` - America/Havana * `America/Hermosillo` - America/Hermosillo * `America/Indiana/Indianapolis` - America/Indiana/Indianapolis * `America/Indiana/Knox` - America/Indiana/Knox * `America/Indiana/Marengo` - America/Indiana/Marengo * `America/Indiana/Petersburg` - America/Indiana/Petersburg * `America/Indiana/Tell_City` - America/Indiana/Tell_City * `America/Indiana/Vevay` - America/Indiana/Vevay * `America/Indiana/Vincennes` - America/Indiana/Vincennes * `America/Indiana/Winamac` - America/Indiana/Winamac * `America/Indianapolis` - America/Indianapolis * `America/Inuvik` - America/Inuvik * `America/Iqaluit` - America/Iqaluit * `America/Jamaica` - America/Jamaica * `America/Jujuy` - America/Jujuy * `America/Juneau` - America/Juneau * `America/Kentucky/Louisville` - America/Kentucky/Louisville * `America/Kentucky/Monticello` - America/Kentucky/Monticello * `America/Knox_IN` - America/Knox_IN * `America/Kralendijk` - America/Kralendijk * `America/La_Paz` - America/La_Paz * `America/Lima` - America/Lima * `America/Los_Angeles` - America/Los_Angeles * `America/Louisville` - America/Louisville * `America/Lower_Princes` - America/Lower_Princes * `America/Maceio` - America/Maceio * `America/Managua` - America/Managua * `America/Manaus` - America/Manaus * `America/Marigot` - America/Marigot * `America/Martinique` - America/Martinique * `America/Matamoros` - America/Matamoros * `America/Mazatlan` - America/Mazatlan * `America/Mendoza` - America/Mendoza * `America/Menominee` - America/Menominee * `America/Merida` - America/Merida * `America/Metlakatla` - America/Metlakatla * `America/Mexico_City` - America/Mexico_City * `America/Miquelon` - America/Miquelon * `America/Moncton` - America/Moncton * `America/Monterrey` - America/Monterrey * `America/Montevideo` - America/Montevideo * `America/Montreal` - America/Montreal * `America/Montserrat` - America/Montserrat * `America/Nassau` - America/Nassau * `America/New_York` - America/New_York * `America/Nipigon` - America/Nipigon * `America/Nome` - America/Nome * `America/Noronha` - America/Noronha * `America/North_Dakota/Beulah` - America/North_Dakota/Beulah * `America/North_Dakota/Center` - America/North_Dakota/Center * `America/North_Dakota/New_Salem` - America/North_Dakota/New_Salem * `America/Nuuk` - America/Nuuk * `America/Ojinaga` - America/Ojinaga * `America/Panama` - America/Panama * `America/Pangnirtung` - America/Pangnirtung * `America/Paramaribo` - America/Paramaribo * `America/Phoenix` - America/Phoenix * `America/Port-au-Prince` - America/Port-au-Prince * `America/Port_of_Spain` - America/Port_of_Spain * `America/Porto_Acre` - America/Porto_Acre * `America/Porto_Velho` - America/Porto_Velho * `America/Puerto_Rico` - America/Puerto_Rico * `America/Punta_Arenas` - America/Punta_Arenas * `America/Rainy_River` - America/Rainy_River * `America/Rankin_Inlet` - America/Rankin_Inlet * `America/Recife` - America/Recife * `America/Regina` - America/Regina * `America/Resolute` - America/Resolute * `America/Rio_Branco` - America/Rio_Branco * `America/Rosario` - America/Rosario * `America/Santa_Isabel` - America/Santa_Isabel * `America/Santarem` - America/Santarem * `America/Santiago` - America/Santiago * `America/Santo_Domingo` - America/Santo_Domingo * `America/Sao_Paulo` - America/Sao_Paulo * `America/Scoresbysund` - America/Scoresbysund * `America/Shiprock` - America/Shiprock * `America/Sitka` - America/Sitka * `America/St_Barthelemy` - America/St_Barthelemy * `America/St_Johns` - America/St_Johns * `America/St_Kitts` - America/St_Kitts * `America/St_Lucia` - America/St_Lucia * `America/St_Thomas` - America/St_Thomas * `America/St_Vincent` - America/St_Vincent * `America/Swift_Current` - America/Swift_Current * `America/Tegucigalpa` - America/Tegucigalpa * `America/Thule` - America/Thule * `America/Thunder_Bay` - America/Thunder_Bay * `America/Tijuana` - America/Tijuana * `America/Toronto` - America/Toronto * `America/Tortola` - America/Tortola * `America/Vancouver` - America/Vancouver * `America/Virgin` - America/Virgin * `America/Whitehorse` - America/Whitehorse * `America/Winnipeg` - America/Winnipeg * `America/Yakutat` - America/Yakutat * `America/Yellowknife` - America/Yellowknife * `Antarctica/Casey` - Antarctica/Casey * `Antarctica/Davis` - Antarctica/Davis * `Antarctica/DumontDUrville` - Antarctica/DumontDUrville * `Antarctica/Macquarie` - Antarctica/Macquarie * `Antarctica/Mawson` - Antarctica/Mawson * `Antarctica/McMurdo` - Antarctica/McMurdo * `Antarctica/Palmer` - Antarctica/Palmer * `Antarctica/Rothera` - Antarctica/Rothera * `Antarctica/South_Pole` - Antarctica/South_Pole * `Antarctica/Syowa` - Antarctica/Syowa * `Antarctica/Troll` - Antarctica/Troll * `Antarctica/Vostok` - Antarctica/Vostok * `Arctic/Longyearbyen` - Arctic/Longyearbyen * `Asia/Aden` - Asia/Aden * `Asia/Almaty` - Asia/Almaty * `Asia/Amman` - Asia/Amman * `Asia/Anadyr` - Asia/Anadyr * `Asia/Aqtau` - Asia/Aqtau * `Asia/Aqtobe` - Asia/Aqtobe * `Asia/Ashgabat` - Asia/Ashgabat * `Asia/Ashkhabad` - Asia/Ashkhabad * `Asia/Atyrau` - Asia/Atyrau * `Asia/Baghdad` - Asia/Baghdad * `Asia/Bahrain` - Asia/Bahrain * `Asia/Baku` - Asia/Baku * `Asia/Bangkok` - Asia/Bangkok * `Asia/Barnaul` - Asia/Barnaul * `Asia/Beirut` - Asia/Beirut * `Asia/Bishkek` - Asia/Bishkek * `Asia/Brunei` - Asia/Brunei * `Asia/Calcutta` - Asia/Calcutta * `Asia/Chita` - Asia/Chita * `Asia/Choibalsan` - Asia/Choibalsan * `Asia/Chongqing` - Asia/Chongqing * `Asia/Chungking` - Asia/Chungking * `Asia/Colombo` - Asia/Colombo * `Asia/Dacca` - Asia/Dacca * `Asia/Damascus` - Asia/Damascus * `Asia/Dhaka` - Asia/Dhaka * `Asia/Dili` - Asia/Dili * `Asia/Dubai` - Asia/Dubai * `Asia/Dushanbe` - Asia/Dushanbe * `Asia/Famagusta` - Asia/Famagusta * `Asia/Gaza` - Asia/Gaza * `Asia/Harbin` - Asia/Harbin * `Asia/Hebron` - Asia/Hebron * `Asia/Ho_Chi_Minh` - Asia/Ho_Chi_Minh * `Asia/Hong_Kong` - Asia/Hong_Kong * `Asia/Hovd` - Asia/Hovd * `Asia/Irkutsk` - Asia/Irkutsk * `Asia/Istanbul` - Asia/Istanbul * `Asia/Jakarta` - Asia/Jakarta * `Asia/Jayapura` - Asia/Jayapura * `Asia/Jerusalem` - Asia/Jerusalem * `Asia/Kabul` - Asia/Kabul * `Asia/Kamchatka` - Asia/Kamchatka * `Asia/Karachi` - Asia/Karachi * `Asia/Kashgar` - Asia/Kashgar * `Asia/Kathmandu` - Asia/Kathmandu * `Asia/Katmandu` - Asia/Katmandu * `Asia/Khandyga` - Asia/Khandyga * `Asia/Kolkata` - Asia/Kolkata * `Asia/Krasnoyarsk` - Asia/Krasnoyarsk * `Asia/Kuala_Lumpur` - Asia/Kuala_Lumpur * `Asia/Kuching` - Asia/Kuching * `Asia/Kuwait` - Asia/Kuwait * `Asia/Macao` - Asia/Macao * `Asia/Macau` - Asia/Macau * `Asia/Magadan` - Asia/Magadan * `Asia/Makassar` - Asia/Makassar * `Asia/Manila` - Asia/Manila * `Asia/Muscat` - Asia/Muscat * `Asia/Nicosia` - Asia/Nicosia * `Asia/Novokuznetsk` - Asia/Novokuznetsk * `Asia/Novosibirsk` - Asia/Novosibirsk * `Asia/Omsk` - Asia/Omsk * `Asia/Oral` - Asia/Oral * `Asia/Phnom_Penh` - Asia/Phnom_Penh * `Asia/Pontianak` - Asia/Pontianak * `Asia/Pyongyang` - Asia/Pyongyang * `Asia/Qatar` - Asia/Qatar * `Asia/Qostanay` - Asia/Qostanay * `Asia/Qyzylorda` - Asia/Qyzylorda * `Asia/Rangoon` - Asia/Rangoon * `Asia/Riyadh` - Asia/Riyadh * `Asia/Saigon` - Asia/Saigon * `Asia/Sakhalin` - Asia/Sakhalin * `Asia/Samarkand` - Asia/Samarkand * `Asia/Seoul` - Asia/Seoul * `Asia/Shanghai` - Asia/Shanghai * `Asia/Singapore` - Asia/Singapore * `Asia/Srednekolymsk` - Asia/Srednekolymsk * `Asia/Taipei` - Asia/Taipei * `Asia/Tashkent` - Asia/Tashkent * `Asia/Tbilisi` - Asia/Tbilisi * `Asia/Tehran` - Asia/Tehran * `Asia/Tel_Aviv` - Asia/Tel_Aviv * `Asia/Thimbu` - Asia/Thimbu * `Asia/Thimphu` - Asia/Thimphu * `Asia/Tokyo` - Asia/Tokyo * `Asia/Tomsk` - Asia/Tomsk * `Asia/Ujung_Pandang` - Asia/Ujung_Pandang * `Asia/Ulaanbaatar` - Asia/Ulaanbaatar * `Asia/Ulan_Bator` - Asia/Ulan_Bator * `Asia/Urumqi` - Asia/Urumqi * `Asia/Ust-Nera` - Asia/Ust-Nera * `Asia/Vientiane` - Asia/Vientiane * `Asia/Vladivostok` - Asia/Vladivostok * `Asia/Yakutsk` - Asia/Yakutsk * `Asia/Yangon` - Asia/Yangon * `Asia/Yekaterinburg` - Asia/Yekaterinburg * `Asia/Yerevan` - Asia/Yerevan * `Atlantic/Azores` - Atlantic/Azores * `Atlantic/Bermuda` - Atlantic/Bermuda * `Atlantic/Canary` - Atlantic/Canary * `Atlantic/Cape_Verde` - Atlantic/Cape_Verde * `Atlantic/Faeroe` - Atlantic/Faeroe * `Atlantic/Faroe` - Atlantic/Faroe * `Atlantic/Jan_Mayen` - Atlantic/Jan_Mayen * `Atlantic/Madeira` - Atlantic/Madeira * `Atlantic/Reykjavik` - Atlantic/Reykjavik * `Atlantic/South_Georgia` - Atlantic/South_Georgia * `Atlantic/St_Helena` - Atlantic/St_Helena * `Atlantic/Stanley` - Atlantic/Stanley * `Australia/ACT` - Australia/ACT * `Australia/Adelaide` - Australia/Adelaide * `Australia/Brisbane` - Australia/Brisbane * `Australia/Broken_Hill` - Australia/Broken_Hill * `Australia/Canberra` - Australia/Canberra * `Australia/Currie` - Australia/Currie * `Australia/Darwin` - Australia/Darwin * `Australia/Eucla` - Australia/Eucla * `Australia/Hobart` - Australia/Hobart * `Australia/LHI` - Australia/LHI * `Australia/Lindeman` - Australia/Lindeman * `Australia/Lord_Howe` - Australia/Lord_Howe * `Australia/Melbourne` - Australia/Melbourne * `Australia/NSW` - Australia/NSW * `Australia/North` - Australia/North * `Australia/Perth` - Australia/Perth * `Australia/Queensland` - Australia/Queensland * `Australia/South` - Australia/South * `Australia/Sydney` - Australia/Sydney * `Australia/Tasmania` - Australia/Tasmania * `Australia/Victoria` - Australia/Victoria * `Australia/West` - Australia/West * `Australia/Yancowinna` - Australia/Yancowinna * `Brazil/Acre` - Brazil/Acre * `Brazil/DeNoronha` - Brazil/DeNoronha * `Brazil/East` - Brazil/East * `Brazil/West` - Brazil/West * `CET` - CET * `CST6CDT` - CST6CDT * `Canada/Atlantic` - Canada/Atlantic * `Canada/Central` - Canada/Central * `Canada/Eastern` - Canada/Eastern * `Canada/Mountain` - Canada/Mountain * `Canada/Newfoundland` - Canada/Newfoundland * `Canada/Pacific` - Canada/Pacific * `Canada/Saskatchewan` - Canada/Saskatchewan * `Canada/Yukon` - Canada/Yukon * `Chile/Continental` - Chile/Continental * `Chile/EasterIsland` - Chile/EasterIsland * `Cuba` - Cuba * `EET` - EET * `EST` - EST * `EST5EDT` - EST5EDT * `Egypt` - Egypt * `Eire` - Eire * `Etc/GMT` - Etc/GMT * `Etc/GMT+0` - Etc/GMT+0 * `Etc/GMT+1` - Etc/GMT+1 * `Etc/GMT+10` - Etc/GMT+10 * `Etc/GMT+11` - Etc/GMT+11 * `Etc/GMT+12` - Etc/GMT+12 * `Etc/GMT+2` - Etc/GMT+2 * `Etc/GMT+3` - Etc/GMT+3 * `Etc/GMT+4` - Etc/GMT+4 * `Etc/GMT+5` - Etc/GMT+5 * `Etc/GMT+6` - Etc/GMT+6 * `Etc/GMT+7` - Etc/GMT+7 * `Etc/GMT+8` - Etc/GMT+8 * `Etc/GMT+9` - Etc/GMT+9 * `Etc/GMT-0` - Etc/GMT-0 * `Etc/GMT-1` - Etc/GMT-1 * `Etc/GMT-10` - Etc/GMT-10 * `Etc/GMT-11` - Etc/GMT-11 * `Etc/GMT-12` - Etc/GMT-12 * `Etc/GMT-13` - Etc/GMT-13 * `Etc/GMT-14` - Etc/GMT-14 * `Etc/GMT-2` - Etc/GMT-2 * `Etc/GMT-3` - Etc/GMT-3 * `Etc/GMT-4` - Etc/GMT-4 * `Etc/GMT-5` - Etc/GMT-5 * `Etc/GMT-6` - Etc/GMT-6 * `Etc/GMT-7` - Etc/GMT-7 * `Etc/GMT-8` - Etc/GMT-8 * `Etc/GMT-9` - Etc/GMT-9 * `Etc/GMT0` - Etc/GMT0 * `Etc/Greenwich` - Etc/Greenwich * `Etc/UCT` - Etc/UCT * `Etc/UTC` - Etc/UTC * `Etc/Universal` - Etc/Universal * `Etc/Zulu` - Etc/Zulu * `Europe/Amsterdam` - Europe/Amsterdam * `Europe/Andorra` - Europe/Andorra * `Europe/Astrakhan` - Europe/Astrakhan * `Europe/Athens` - Europe/Athens * `Europe/Belfast` - Europe/Belfast * `Europe/Belgrade` - Europe/Belgrade * `Europe/Berlin` - Europe/Berlin * `Europe/Bratislava` - Europe/Bratislava * `Europe/Brussels` - Europe/Brussels * `Europe/Bucharest` - Europe/Bucharest * `Europe/Budapest` - Europe/Budapest * `Europe/Busingen` - Europe/Busingen * `Europe/Chisinau` - Europe/Chisinau * `Europe/Copenhagen` - Europe/Copenhagen * `Europe/Dublin` - Europe/Dublin * `Europe/Gibraltar` - Europe/Gibraltar * `Europe/Guernsey` - Europe/Guernsey * `Europe/Helsinki` - Europe/Helsinki * `Europe/Isle_of_Man` - Europe/Isle_of_Man * `Europe/Istanbul` - Europe/Istanbul * `Europe/Jersey` - Europe/Jersey * `Europe/Kaliningrad` - Europe/Kaliningrad * `Europe/Kiev` - Europe/Kiev * `Europe/Kirov` - Europe/Kirov * `Europe/Kyiv` - Europe/Kyiv * `Europe/Lisbon` - Europe/Lisbon * `Europe/Ljubljana` - Europe/Ljubljana * `Europe/London` - Europe/London * `Europe/Luxembourg` - Europe/Luxembourg * `Europe/Madrid` - Europe/Madrid * `Europe/Malta` - Europe/Malta * `Europe/Mariehamn` - Europe/Mariehamn * `Europe/Minsk` - Europe/Minsk * `Europe/Monaco` - Europe/Monaco * `Europe/Moscow` - Europe/Moscow * `Europe/Nicosia` - Europe/Nicosia * `Europe/Oslo` - Europe/Oslo * `Europe/Paris` - Europe/Paris * `Europe/Podgorica` - Europe/Podgorica * `Europe/Prague` - Europe/Prague * `Europe/Riga` - Europe/Riga * `Europe/Rome` - Europe/Rome * `Europe/Samara` - Europe/Samara * `Europe/San_Marino` - Europe/San_Marino * `Europe/Sarajevo` - Europe/Sarajevo * `Europe/Saratov` - Europe/Saratov * `Europe/Simferopol` - Europe/Simferopol * `Europe/Skopje` - Europe/Skopje * `Europe/Sofia` - Europe/Sofia * `Europe/Stockholm` - Europe/Stockholm * `Europe/Tallinn` - Europe/Tallinn * `Europe/Tirane` - Europe/Tirane * `Europe/Tiraspol` - Europe/Tiraspol * `Europe/Ulyanovsk` - Europe/Ulyanovsk * `Europe/Uzhgorod` - Europe/Uzhgorod * `Europe/Vaduz` - Europe/Vaduz * `Europe/Vatican` - Europe/Vatican * `Europe/Vienna` - Europe/Vienna * `Europe/Vilnius` - Europe/Vilnius * `Europe/Volgograd` - Europe/Volgograd * `Europe/Warsaw` - Europe/Warsaw * `Europe/Zagreb` - Europe/Zagreb * `Europe/Zaporozhye` - Europe/Zaporozhye * `Europe/Zurich` - Europe/Zurich * `GB` - GB * `GB-Eire` - GB-Eire * `GMT` - GMT * `GMT+0` - GMT+0 * `GMT-0` - GMT-0 * `GMT0` - GMT0 * `Greenwich` - Greenwich * `HST` - HST * `Hongkong` - Hongkong * `Iceland` - Iceland * `Indian/Antananarivo` - Indian/Antananarivo * `Indian/Chagos` - Indian/Chagos * `Indian/Christmas` - Indian/Christmas * `Indian/Cocos` - Indian/Cocos * `Indian/Comoro` - Indian/Comoro * `Indian/Kerguelen` - Indian/Kerguelen * `Indian/Mahe` - Indian/Mahe * `Indian/Maldives` - Indian/Maldives * `Indian/Mauritius` - Indian/Mauritius * `Indian/Mayotte` - Indian/Mayotte * `Indian/Reunion` - Indian/Reunion * `Iran` - Iran * `Israel` - Israel * `Jamaica` - Jamaica * `Japan` - Japan * `Kwajalein` - Kwajalein * `Libya` - Libya * `MET` - MET * `MST` - MST * `MST7MDT` - MST7MDT * `Mexico/BajaNorte` - Mexico/BajaNorte * `Mexico/BajaSur` - Mexico/BajaSur * `Mexico/General` - Mexico/General * `NZ` - NZ * `NZ-CHAT` - NZ-CHAT * `Navajo` - Navajo * `PRC` - PRC * `PST8PDT` - PST8PDT * `Pacific/Apia` - Pacific/Apia * `Pacific/Auckland` - Pacific/Auckland * `Pacific/Bougainville` - Pacific/Bougainville * `Pacific/Chatham` - Pacific/Chatham * `Pacific/Chuuk` - Pacific/Chuuk * `Pacific/Easter` - Pacific/Easter * `Pacific/Efate` - Pacific/Efate * `Pacific/Enderbury` - Pacific/Enderbury * `Pacific/Fakaofo` - Pacific/Fakaofo * `Pacific/Fiji` - Pacific/Fiji * `Pacific/Funafuti` - Pacific/Funafuti * `Pacific/Galapagos` - Pacific/Galapagos * `Pacific/Gambier` - Pacific/Gambier * `Pacific/Guadalcanal` - Pacific/Guadalcanal * `Pacific/Guam` - Pacific/Guam * `Pacific/Honolulu` - Pacific/Honolulu * `Pacific/Johnston` - Pacific/Johnston * `Pacific/Kanton` - Pacific/Kanton * `Pacific/Kiritimati` - Pacific/Kiritimati * `Pacific/Kosrae` - Pacific/Kosrae * `Pacific/Kwajalein` - Pacific/Kwajalein * `Pacific/Majuro` - Pacific/Majuro * `Pacific/Marquesas` - Pacific/Marquesas * `Pacific/Midway` - Pacific/Midway * `Pacific/Nauru` - Pacific/Nauru * `Pacific/Niue` - Pacific/Niue * `Pacific/Norfolk` - Pacific/Norfolk * `Pacific/Noumea` - Pacific/Noumea * `Pacific/Pago_Pago` - Pacific/Pago_Pago * `Pacific/Palau` - Pacific/Palau * `Pacific/Pitcairn` - Pacific/Pitcairn * `Pacific/Pohnpei` - Pacific/Pohnpei * `Pacific/Ponape` - Pacific/Ponape * `Pacific/Port_Moresby` - Pacific/Port_Moresby * `Pacific/Rarotonga` - Pacific/Rarotonga * `Pacific/Saipan` - Pacific/Saipan * `Pacific/Samoa` - Pacific/Samoa * `Pacific/Tahiti` - Pacific/Tahiti * `Pacific/Tarawa` - Pacific/Tarawa * `Pacific/Tongatapu` - Pacific/Tongatapu * `Pacific/Truk` - Pacific/Truk * `Pacific/Wake` - Pacific/Wake * `Pacific/Wallis` - Pacific/Wallis * `Pacific/Yap` - Pacific/Yap * `Poland` - Poland * `Portugal` - Portugal * `ROC` - ROC * `ROK` - ROK * `Singapore` - Singapore * `Turkey` - Turkey * `UCT` - UCT * `US/Alaska` - US/Alaska * `US/Aleutian` - US/Aleutian * `US/Arizona` - US/Arizona * `US/Central` - US/Central * `US/East-Indiana` - US/East-Indiana * `US/Eastern` - US/Eastern * `US/Hawaii` - US/Hawaii * `US/Indiana-Starke` - US/Indiana-Starke * `US/Michigan` - US/Michigan * `US/Mountain` - US/Mountain * `US/Pacific` - US/Pacific * `US/Samoa` - US/Samoa * `UTC` - UTC * `Universal` - Universal * `W-SU` - W-SU * `WET` - WET * `Zulu` - Zulu
	TimeZone *string `json:"time_zone,omitempty"`
	// Displays a grade letter next to a product to show the overall health.
	EnableProductGrade *bool `json:"enable_product_grade,omitempty"`
	ProductGrade *string `json:"product_grade,omitempty"`
	// Percentage score for an 'A' >=
	ProductGradeA *int32 `json:"product_grade_a,omitempty"`
	// Percentage score for a 'B' >=
	ProductGradeB *int32 `json:"product_grade_b,omitempty"`
	// Percentage score for a 'C' >=
	ProductGradeC *int32 `json:"product_grade_c,omitempty"`
	// Percentage score for a 'D' >=
	ProductGradeD *int32 `json:"product_grade_d,omitempty"`
	// Percentage score for an 'F' <=
	ProductGradeF *int32 `json:"product_grade_f,omitempty"`
	// Enables product tag inheritance globally for all products. Any tags added on a product will automatically be added to all Engagements, Tests, and Findings
	EnableProductTagInheritance *bool `json:"enable_product_tag_inheritance,omitempty"`
	// Enables Benchmarks such as the OWASP ASVS (Application Security Verification Standard)
	EnableBenchmark *bool `json:"enable_benchmark,omitempty"`
	// Enables global remediation advice and matching on CWE and Title. The text will be replaced for mitigation, impact and references on a finding. Useful for providing consistent impact and remediation advice regardless of the scanner.
	EnableTemplateMatch *bool `json:"enable_template_match,omitempty"`
	// Closes an engagement after 3 days (default) past due date including last update.
	EngagementAutoClose *bool `json:"engagement_auto_close,omitempty"`
	// Closes an engagement after the specified number of days past due date including last update.
	EngagementAutoCloseDays *int32 `json:"engagement_auto_close_days,omitempty"`
	// Enables Finding SLA's for time to remediate.
	EnableFindingSla *bool `json:"enable_finding_sla,omitempty"`
	// Enables Notify when time to remediate according to Finding SLA's is breached for active Findings.
	EnableNotifySlaActive *bool `json:"enable_notify_sla_active,omitempty"`
	// Enables Notify when time to remediate according to Finding SLA's is breached for active, verified Findings.
	EnableNotifySlaActiveVerified *bool `json:"enable_notify_sla_active_verified,omitempty"`
	// Enables Notify when time to remediate according to Finding SLA's is breached for Findings that are linked to JIRA issues. Notification is disabled for Findings not linked to JIRA issues
	EnableNotifySlaJiraOnly *bool `json:"enable_notify_sla_jira_only,omitempty"`
	// Enable an exponential backoff strategy for SLA breach notifications, e.g. 1, 2, 4, 8, etc. Otherwise it alerts every day
	EnableNotifySlaExponentialBackoff *bool `json:"enable_notify_sla_exponential_backoff,omitempty"`
	// Enable anyone with a link to the survey to answer a survey
	AllowAnonymousSurveyRepsonse *bool `json:"allow_anonymous_survey_repsonse,omitempty"`
	Credentials *string `json:"credentials,omitempty"`
	// Include this custom disclaimer on all notifications and generated reports
	Disclaimer *string `json:"disclaimer,omitempty"`
	// Default expiry period for risk acceptance form.
	RiskAcceptanceFormDefaultDays NullableInt32 `json:"risk_acceptance_form_default_days,omitempty"`
	// Notify X days before risk acceptance expires. Leave empty to disable.
	RiskAcceptanceNotifyBeforeExpiration NullableInt32 `json:"risk_acceptance_notify_before_expiration,omitempty"`
	// With this setting turned off, credentials will be disabled in the user interface.
	EnableCredentials *bool `json:"enable_credentials,omitempty"`
	// With this setting turned off, questionnaires will be disabled in the user interface.
	EnableQuestionnaires *bool `json:"enable_questionnaires,omitempty"`
	// With this setting turned off, checklists will be disabled in the user interface.
	EnableChecklists *bool `json:"enable_checklists,omitempty"`
	// With this setting turned off, endpoint metadata import will be disabled in the user interface.
	EnableEndpointMetadataImport *bool `json:"enable_endpoint_metadata_import,omitempty"`
	// When turned on users can edit their profiles
	EnableUserProfileEditable *bool `json:"enable_user_profile_editable,omitempty"`
	// With this setting turned off, the product tracking files will be disabled in the user interface.
	EnableProductTrackingFiles *bool `json:"enable_product_tracking_files,omitempty"`
	// With this setting turned off, the Finding Groups will be disabled.
	EnableFindingGroups *bool `json:"enable_finding_groups,omitempty"`
	// With this setting turned off, the Calendar will be disabled in the user interface.
	EnableCalendar *bool `json:"enable_calendar,omitempty"`
	// New users will only be assigned to the default group, when their email address matches this regex pattern. This is optional condition.
	DefaultGroupEmailPattern *string `json:"default_group_email_pattern,omitempty"`
	// Requires user to set passwords greater than minimum length.
	MinimumPasswordLength *int32 `json:"minimum_password_length,omitempty"`
	// Requires user to set passwords less than maximum length.
	MaximumPasswordLength *int32 `json:"maximum_password_length,omitempty"`
	// Requires user passwords to contain at least one digit (0-9).
	NumberCharacterRequired *bool `json:"number_character_required,omitempty"`
	// Requires user passwords to contain at least one special character (()[]{}|\\`~!@#$%^&*_-+=;:'\",<>./?).
	SpecialCharacterRequired *bool `json:"special_character_required,omitempty"`
	// Requires user passwords to contain at least one lowercase letter (a-z).
	LowercaseCharacterRequired *bool `json:"lowercase_character_required,omitempty"`
	// Requires user passwords to contain at least one uppercase letter (A-Z).
	UppercaseCharacterRequired *bool `json:"uppercase_character_required,omitempty"`
	// Requires user passwords to not be part of list of common passwords.
	NonCommonPasswordRequired *bool `json:"non_common_password_required,omitempty"`
	// When turned on, the API will expose error details in the response.
	ApiExposeErrorDetails *bool `json:"api_expose_error_details,omitempty"`
	// New users will be assigned to this group.
	DefaultGroup NullableInt32 `json:"default_group,omitempty"`
	// New users will be assigned to their default group with this role.
	DefaultGroupRole NullableInt32 `json:"default_group_role,omitempty"`
}

type _SystemSettings SystemSettings

// NewSystemSettings instantiates a new SystemSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSystemSettings(id int32) *SystemSettings {
	this := SystemSettings{}
	this.Id = id
	return &this
}

// NewSystemSettingsWithDefaults instantiates a new SystemSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSystemSettingsWithDefaults() *SystemSettings {
	this := SystemSettings{}
	return &this
}

// GetId returns the Id field value
func (o *SystemSettings) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *SystemSettings) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *SystemSettings) SetId(v int32) {
	o.Id = v
}

// GetEnableDeduplication returns the EnableDeduplication field value if set, zero value otherwise.
func (o *SystemSettings) GetEnableDeduplication() bool {
	if o == nil || IsNil(o.EnableDeduplication) {
		var ret bool
		return ret
	}
	return *o.EnableDeduplication
}

// GetEnableDeduplicationOk returns a tuple with the EnableDeduplication field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemSettings) GetEnableDeduplicationOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableDeduplication) {
		return nil, false
	}
	return o.EnableDeduplication, true
}

// HasEnableDeduplication returns a boolean if a field has been set.
func (o *SystemSettings) HasEnableDeduplication() bool {
	if o != nil && !IsNil(o.EnableDeduplication) {
		return true
	}

	return false
}

// SetEnableDeduplication gets a reference to the given bool and assigns it to the EnableDeduplication field.
func (o *SystemSettings) SetEnableDeduplication(v bool) {
	o.EnableDeduplication = &v
}

// GetDeleteDuplicates returns the DeleteDuplicates field value if set, zero value otherwise.
func (o *SystemSettings) GetDeleteDuplicates() bool {
	if o == nil || IsNil(o.DeleteDuplicates) {
		var ret bool
		return ret
	}
	return *o.DeleteDuplicates
}

// GetDeleteDuplicatesOk returns a tuple with the DeleteDuplicates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemSettings) GetDeleteDuplicatesOk() (*bool, bool) {
	if o == nil || IsNil(o.DeleteDuplicates) {
		return nil, false
	}
	return o.DeleteDuplicates, true
}

// HasDeleteDuplicates returns a boolean if a field has been set.
func (o *SystemSettings) HasDeleteDuplicates() bool {
	if o != nil && !IsNil(o.DeleteDuplicates) {
		return true
	}

	return false
}

// SetDeleteDuplicates gets a reference to the given bool and assigns it to the DeleteDuplicates field.
func (o *SystemSettings) SetDeleteDuplicates(v bool) {
	o.DeleteDuplicates = &v
}

// GetMaxDupes returns the MaxDupes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SystemSettings) GetMaxDupes() int32 {
	if o == nil || IsNil(o.MaxDupes.Get()) {
		var ret int32
		return ret
	}
	return *o.MaxDupes.Get()
}

// GetMaxDupesOk returns a tuple with the MaxDupes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SystemSettings) GetMaxDupesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MaxDupes.Get(), o.MaxDupes.IsSet()
}

// HasMaxDupes returns a boolean if a field has been set.
func (o *SystemSettings) HasMaxDupes() bool {
	if o != nil && o.MaxDupes.IsSet() {
		return true
	}

	return false
}

// SetMaxDupes gets a reference to the given NullableInt32 and assigns it to the MaxDupes field.
func (o *SystemSettings) SetMaxDupes(v int32) {
	o.MaxDupes.Set(&v)
}
// SetMaxDupesNil sets the value for MaxDupes to be an explicit nil
func (o *SystemSettings) SetMaxDupesNil() {
	o.MaxDupes.Set(nil)
}

// UnsetMaxDupes ensures that no value is present for MaxDupes, not even an explicit nil
func (o *SystemSettings) UnsetMaxDupes() {
	o.MaxDupes.Unset()
}

// GetEmailFrom returns the EmailFrom field value if set, zero value otherwise.
func (o *SystemSettings) GetEmailFrom() string {
	if o == nil || IsNil(o.EmailFrom) {
		var ret string
		return ret
	}
	return *o.EmailFrom
}

// GetEmailFromOk returns a tuple with the EmailFrom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemSettings) GetEmailFromOk() (*string, bool) {
	if o == nil || IsNil(o.EmailFrom) {
		return nil, false
	}
	return o.EmailFrom, true
}

// HasEmailFrom returns a boolean if a field has been set.
func (o *SystemSettings) HasEmailFrom() bool {
	if o != nil && !IsNil(o.EmailFrom) {
		return true
	}

	return false
}

// SetEmailFrom gets a reference to the given string and assigns it to the EmailFrom field.
func (o *SystemSettings) SetEmailFrom(v string) {
	o.EmailFrom = &v
}

// GetEnableJira returns the EnableJira field value if set, zero value otherwise.
func (o *SystemSettings) GetEnableJira() bool {
	if o == nil || IsNil(o.EnableJira) {
		var ret bool
		return ret
	}
	return *o.EnableJira
}

// GetEnableJiraOk returns a tuple with the EnableJira field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemSettings) GetEnableJiraOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableJira) {
		return nil, false
	}
	return o.EnableJira, true
}

// HasEnableJira returns a boolean if a field has been set.
func (o *SystemSettings) HasEnableJira() bool {
	if o != nil && !IsNil(o.EnableJira) {
		return true
	}

	return false
}

// SetEnableJira gets a reference to the given bool and assigns it to the EnableJira field.
func (o *SystemSettings) SetEnableJira(v bool) {
	o.EnableJira = &v
}

// GetEnableJiraWebHook returns the EnableJiraWebHook field value if set, zero value otherwise.
func (o *SystemSettings) GetEnableJiraWebHook() bool {
	if o == nil || IsNil(o.EnableJiraWebHook) {
		var ret bool
		return ret
	}
	return *o.EnableJiraWebHook
}

// GetEnableJiraWebHookOk returns a tuple with the EnableJiraWebHook field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemSettings) GetEnableJiraWebHookOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableJiraWebHook) {
		return nil, false
	}
	return o.EnableJiraWebHook, true
}

// HasEnableJiraWebHook returns a boolean if a field has been set.
func (o *SystemSettings) HasEnableJiraWebHook() bool {
	if o != nil && !IsNil(o.EnableJiraWebHook) {
		return true
	}

	return false
}

// SetEnableJiraWebHook gets a reference to the given bool and assigns it to the EnableJiraWebHook field.
func (o *SystemSettings) SetEnableJiraWebHook(v bool) {
	o.EnableJiraWebHook = &v
}

// GetDisableJiraWebhookSecret returns the DisableJiraWebhookSecret field value if set, zero value otherwise.
func (o *SystemSettings) GetDisableJiraWebhookSecret() bool {
	if o == nil || IsNil(o.DisableJiraWebhookSecret) {
		var ret bool
		return ret
	}
	return *o.DisableJiraWebhookSecret
}

// GetDisableJiraWebhookSecretOk returns a tuple with the DisableJiraWebhookSecret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemSettings) GetDisableJiraWebhookSecretOk() (*bool, bool) {
	if o == nil || IsNil(o.DisableJiraWebhookSecret) {
		return nil, false
	}
	return o.DisableJiraWebhookSecret, true
}

// HasDisableJiraWebhookSecret returns a boolean if a field has been set.
func (o *SystemSettings) HasDisableJiraWebhookSecret() bool {
	if o != nil && !IsNil(o.DisableJiraWebhookSecret) {
		return true
	}

	return false
}

// SetDisableJiraWebhookSecret gets a reference to the given bool and assigns it to the DisableJiraWebhookSecret field.
func (o *SystemSettings) SetDisableJiraWebhookSecret(v bool) {
	o.DisableJiraWebhookSecret = &v
}

// GetJiraWebhookSecret returns the JiraWebhookSecret field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SystemSettings) GetJiraWebhookSecret() string {
	if o == nil || IsNil(o.JiraWebhookSecret.Get()) {
		var ret string
		return ret
	}
	return *o.JiraWebhookSecret.Get()
}

// GetJiraWebhookSecretOk returns a tuple with the JiraWebhookSecret field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SystemSettings) GetJiraWebhookSecretOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.JiraWebhookSecret.Get(), o.JiraWebhookSecret.IsSet()
}

// HasJiraWebhookSecret returns a boolean if a field has been set.
func (o *SystemSettings) HasJiraWebhookSecret() bool {
	if o != nil && o.JiraWebhookSecret.IsSet() {
		return true
	}

	return false
}

// SetJiraWebhookSecret gets a reference to the given NullableString and assigns it to the JiraWebhookSecret field.
func (o *SystemSettings) SetJiraWebhookSecret(v string) {
	o.JiraWebhookSecret.Set(&v)
}
// SetJiraWebhookSecretNil sets the value for JiraWebhookSecret to be an explicit nil
func (o *SystemSettings) SetJiraWebhookSecretNil() {
	o.JiraWebhookSecret.Set(nil)
}

// UnsetJiraWebhookSecret ensures that no value is present for JiraWebhookSecret, not even an explicit nil
func (o *SystemSettings) UnsetJiraWebhookSecret() {
	o.JiraWebhookSecret.Unset()
}

// GetJiraMinimumSeverity returns the JiraMinimumSeverity field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SystemSettings) GetJiraMinimumSeverity() string {
	if o == nil || IsNil(o.JiraMinimumSeverity.Get()) {
		var ret string
		return ret
	}
	return *o.JiraMinimumSeverity.Get()
}

// GetJiraMinimumSeverityOk returns a tuple with the JiraMinimumSeverity field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SystemSettings) GetJiraMinimumSeverityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.JiraMinimumSeverity.Get(), o.JiraMinimumSeverity.IsSet()
}

// HasJiraMinimumSeverity returns a boolean if a field has been set.
func (o *SystemSettings) HasJiraMinimumSeverity() bool {
	if o != nil && o.JiraMinimumSeverity.IsSet() {
		return true
	}

	return false
}

// SetJiraMinimumSeverity gets a reference to the given NullableString and assigns it to the JiraMinimumSeverity field.
func (o *SystemSettings) SetJiraMinimumSeverity(v string) {
	o.JiraMinimumSeverity.Set(&v)
}
// SetJiraMinimumSeverityNil sets the value for JiraMinimumSeverity to be an explicit nil
func (o *SystemSettings) SetJiraMinimumSeverityNil() {
	o.JiraMinimumSeverity.Set(nil)
}

// UnsetJiraMinimumSeverity ensures that no value is present for JiraMinimumSeverity, not even an explicit nil
func (o *SystemSettings) UnsetJiraMinimumSeverity() {
	o.JiraMinimumSeverity.Unset()
}

// GetJiraLabels returns the JiraLabels field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SystemSettings) GetJiraLabels() string {
	if o == nil || IsNil(o.JiraLabels.Get()) {
		var ret string
		return ret
	}
	return *o.JiraLabels.Get()
}

// GetJiraLabelsOk returns a tuple with the JiraLabels field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SystemSettings) GetJiraLabelsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.JiraLabels.Get(), o.JiraLabels.IsSet()
}

// HasJiraLabels returns a boolean if a field has been set.
func (o *SystemSettings) HasJiraLabels() bool {
	if o != nil && o.JiraLabels.IsSet() {
		return true
	}

	return false
}

// SetJiraLabels gets a reference to the given NullableString and assigns it to the JiraLabels field.
func (o *SystemSettings) SetJiraLabels(v string) {
	o.JiraLabels.Set(&v)
}
// SetJiraLabelsNil sets the value for JiraLabels to be an explicit nil
func (o *SystemSettings) SetJiraLabelsNil() {
	o.JiraLabels.Set(nil)
}

// UnsetJiraLabels ensures that no value is present for JiraLabels, not even an explicit nil
func (o *SystemSettings) UnsetJiraLabels() {
	o.JiraLabels.Unset()
}

// GetAddVulnerabilityIdToJiraLabel returns the AddVulnerabilityIdToJiraLabel field value if set, zero value otherwise.
func (o *SystemSettings) GetAddVulnerabilityIdToJiraLabel() bool {
	if o == nil || IsNil(o.AddVulnerabilityIdToJiraLabel) {
		var ret bool
		return ret
	}
	return *o.AddVulnerabilityIdToJiraLabel
}

// GetAddVulnerabilityIdToJiraLabelOk returns a tuple with the AddVulnerabilityIdToJiraLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemSettings) GetAddVulnerabilityIdToJiraLabelOk() (*bool, bool) {
	if o == nil || IsNil(o.AddVulnerabilityIdToJiraLabel) {
		return nil, false
	}
	return o.AddVulnerabilityIdToJiraLabel, true
}

// HasAddVulnerabilityIdToJiraLabel returns a boolean if a field has been set.
func (o *SystemSettings) HasAddVulnerabilityIdToJiraLabel() bool {
	if o != nil && !IsNil(o.AddVulnerabilityIdToJiraLabel) {
		return true
	}

	return false
}

// SetAddVulnerabilityIdToJiraLabel gets a reference to the given bool and assigns it to the AddVulnerabilityIdToJiraLabel field.
func (o *SystemSettings) SetAddVulnerabilityIdToJiraLabel(v bool) {
	o.AddVulnerabilityIdToJiraLabel = &v
}

// GetEnableGithub returns the EnableGithub field value if set, zero value otherwise.
func (o *SystemSettings) GetEnableGithub() bool {
	if o == nil || IsNil(o.EnableGithub) {
		var ret bool
		return ret
	}
	return *o.EnableGithub
}

// GetEnableGithubOk returns a tuple with the EnableGithub field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemSettings) GetEnableGithubOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableGithub) {
		return nil, false
	}
	return o.EnableGithub, true
}

// HasEnableGithub returns a boolean if a field has been set.
func (o *SystemSettings) HasEnableGithub() bool {
	if o != nil && !IsNil(o.EnableGithub) {
		return true
	}

	return false
}

// SetEnableGithub gets a reference to the given bool and assigns it to the EnableGithub field.
func (o *SystemSettings) SetEnableGithub(v bool) {
	o.EnableGithub = &v
}

// GetEnableSlackNotifications returns the EnableSlackNotifications field value if set, zero value otherwise.
func (o *SystemSettings) GetEnableSlackNotifications() bool {
	if o == nil || IsNil(o.EnableSlackNotifications) {
		var ret bool
		return ret
	}
	return *o.EnableSlackNotifications
}

// GetEnableSlackNotificationsOk returns a tuple with the EnableSlackNotifications field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemSettings) GetEnableSlackNotificationsOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableSlackNotifications) {
		return nil, false
	}
	return o.EnableSlackNotifications, true
}

// HasEnableSlackNotifications returns a boolean if a field has been set.
func (o *SystemSettings) HasEnableSlackNotifications() bool {
	if o != nil && !IsNil(o.EnableSlackNotifications) {
		return true
	}

	return false
}

// SetEnableSlackNotifications gets a reference to the given bool and assigns it to the EnableSlackNotifications field.
func (o *SystemSettings) SetEnableSlackNotifications(v bool) {
	o.EnableSlackNotifications = &v
}

// GetSlackChannel returns the SlackChannel field value if set, zero value otherwise.
func (o *SystemSettings) GetSlackChannel() string {
	if o == nil || IsNil(o.SlackChannel) {
		var ret string
		return ret
	}
	return *o.SlackChannel
}

// GetSlackChannelOk returns a tuple with the SlackChannel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemSettings) GetSlackChannelOk() (*string, bool) {
	if o == nil || IsNil(o.SlackChannel) {
		return nil, false
	}
	return o.SlackChannel, true
}

// HasSlackChannel returns a boolean if a field has been set.
func (o *SystemSettings) HasSlackChannel() bool {
	if o != nil && !IsNil(o.SlackChannel) {
		return true
	}

	return false
}

// SetSlackChannel gets a reference to the given string and assigns it to the SlackChannel field.
func (o *SystemSettings) SetSlackChannel(v string) {
	o.SlackChannel = &v
}

// GetSlackToken returns the SlackToken field value if set, zero value otherwise.
func (o *SystemSettings) GetSlackToken() string {
	if o == nil || IsNil(o.SlackToken) {
		var ret string
		return ret
	}
	return *o.SlackToken
}

// GetSlackTokenOk returns a tuple with the SlackToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemSettings) GetSlackTokenOk() (*string, bool) {
	if o == nil || IsNil(o.SlackToken) {
		return nil, false
	}
	return o.SlackToken, true
}

// HasSlackToken returns a boolean if a field has been set.
func (o *SystemSettings) HasSlackToken() bool {
	if o != nil && !IsNil(o.SlackToken) {
		return true
	}

	return false
}

// SetSlackToken gets a reference to the given string and assigns it to the SlackToken field.
func (o *SystemSettings) SetSlackToken(v string) {
	o.SlackToken = &v
}

// GetSlackUsername returns the SlackUsername field value if set, zero value otherwise.
func (o *SystemSettings) GetSlackUsername() string {
	if o == nil || IsNil(o.SlackUsername) {
		var ret string
		return ret
	}
	return *o.SlackUsername
}

// GetSlackUsernameOk returns a tuple with the SlackUsername field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemSettings) GetSlackUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.SlackUsername) {
		return nil, false
	}
	return o.SlackUsername, true
}

// HasSlackUsername returns a boolean if a field has been set.
func (o *SystemSettings) HasSlackUsername() bool {
	if o != nil && !IsNil(o.SlackUsername) {
		return true
	}

	return false
}

// SetSlackUsername gets a reference to the given string and assigns it to the SlackUsername field.
func (o *SystemSettings) SetSlackUsername(v string) {
	o.SlackUsername = &v
}

// GetEnableMsteamsNotifications returns the EnableMsteamsNotifications field value if set, zero value otherwise.
func (o *SystemSettings) GetEnableMsteamsNotifications() bool {
	if o == nil || IsNil(o.EnableMsteamsNotifications) {
		var ret bool
		return ret
	}
	return *o.EnableMsteamsNotifications
}

// GetEnableMsteamsNotificationsOk returns a tuple with the EnableMsteamsNotifications field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemSettings) GetEnableMsteamsNotificationsOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableMsteamsNotifications) {
		return nil, false
	}
	return o.EnableMsteamsNotifications, true
}

// HasEnableMsteamsNotifications returns a boolean if a field has been set.
func (o *SystemSettings) HasEnableMsteamsNotifications() bool {
	if o != nil && !IsNil(o.EnableMsteamsNotifications) {
		return true
	}

	return false
}

// SetEnableMsteamsNotifications gets a reference to the given bool and assigns it to the EnableMsteamsNotifications field.
func (o *SystemSettings) SetEnableMsteamsNotifications(v bool) {
	o.EnableMsteamsNotifications = &v
}

// GetMsteamsUrl returns the MsteamsUrl field value if set, zero value otherwise.
func (o *SystemSettings) GetMsteamsUrl() string {
	if o == nil || IsNil(o.MsteamsUrl) {
		var ret string
		return ret
	}
	return *o.MsteamsUrl
}

// GetMsteamsUrlOk returns a tuple with the MsteamsUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemSettings) GetMsteamsUrlOk() (*string, bool) {
	if o == nil || IsNil(o.MsteamsUrl) {
		return nil, false
	}
	return o.MsteamsUrl, true
}

// HasMsteamsUrl returns a boolean if a field has been set.
func (o *SystemSettings) HasMsteamsUrl() bool {
	if o != nil && !IsNil(o.MsteamsUrl) {
		return true
	}

	return false
}

// SetMsteamsUrl gets a reference to the given string and assigns it to the MsteamsUrl field.
func (o *SystemSettings) SetMsteamsUrl(v string) {
	o.MsteamsUrl = &v
}

// GetEnableMailNotifications returns the EnableMailNotifications field value if set, zero value otherwise.
func (o *SystemSettings) GetEnableMailNotifications() bool {
	if o == nil || IsNil(o.EnableMailNotifications) {
		var ret bool
		return ret
	}
	return *o.EnableMailNotifications
}

// GetEnableMailNotificationsOk returns a tuple with the EnableMailNotifications field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemSettings) GetEnableMailNotificationsOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableMailNotifications) {
		return nil, false
	}
	return o.EnableMailNotifications, true
}

// HasEnableMailNotifications returns a boolean if a field has been set.
func (o *SystemSettings) HasEnableMailNotifications() bool {
	if o != nil && !IsNil(o.EnableMailNotifications) {
		return true
	}

	return false
}

// SetEnableMailNotifications gets a reference to the given bool and assigns it to the EnableMailNotifications field.
func (o *SystemSettings) SetEnableMailNotifications(v bool) {
	o.EnableMailNotifications = &v
}

// GetMailNotificationsTo returns the MailNotificationsTo field value if set, zero value otherwise.
func (o *SystemSettings) GetMailNotificationsTo() string {
	if o == nil || IsNil(o.MailNotificationsTo) {
		var ret string
		return ret
	}
	return *o.MailNotificationsTo
}

// GetMailNotificationsToOk returns a tuple with the MailNotificationsTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemSettings) GetMailNotificationsToOk() (*string, bool) {
	if o == nil || IsNil(o.MailNotificationsTo) {
		return nil, false
	}
	return o.MailNotificationsTo, true
}

// HasMailNotificationsTo returns a boolean if a field has been set.
func (o *SystemSettings) HasMailNotificationsTo() bool {
	if o != nil && !IsNil(o.MailNotificationsTo) {
		return true
	}

	return false
}

// SetMailNotificationsTo gets a reference to the given string and assigns it to the MailNotificationsTo field.
func (o *SystemSettings) SetMailNotificationsTo(v string) {
	o.MailNotificationsTo = &v
}

// GetFalsePositiveHistory returns the FalsePositiveHistory field value if set, zero value otherwise.
func (o *SystemSettings) GetFalsePositiveHistory() bool {
	if o == nil || IsNil(o.FalsePositiveHistory) {
		var ret bool
		return ret
	}
	return *o.FalsePositiveHistory
}

// GetFalsePositiveHistoryOk returns a tuple with the FalsePositiveHistory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemSettings) GetFalsePositiveHistoryOk() (*bool, bool) {
	if o == nil || IsNil(o.FalsePositiveHistory) {
		return nil, false
	}
	return o.FalsePositiveHistory, true
}

// HasFalsePositiveHistory returns a boolean if a field has been set.
func (o *SystemSettings) HasFalsePositiveHistory() bool {
	if o != nil && !IsNil(o.FalsePositiveHistory) {
		return true
	}

	return false
}

// SetFalsePositiveHistory gets a reference to the given bool and assigns it to the FalsePositiveHistory field.
func (o *SystemSettings) SetFalsePositiveHistory(v bool) {
	o.FalsePositiveHistory = &v
}

// GetRetroactiveFalsePositiveHistory returns the RetroactiveFalsePositiveHistory field value if set, zero value otherwise.
func (o *SystemSettings) GetRetroactiveFalsePositiveHistory() bool {
	if o == nil || IsNil(o.RetroactiveFalsePositiveHistory) {
		var ret bool
		return ret
	}
	return *o.RetroactiveFalsePositiveHistory
}

// GetRetroactiveFalsePositiveHistoryOk returns a tuple with the RetroactiveFalsePositiveHistory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemSettings) GetRetroactiveFalsePositiveHistoryOk() (*bool, bool) {
	if o == nil || IsNil(o.RetroactiveFalsePositiveHistory) {
		return nil, false
	}
	return o.RetroactiveFalsePositiveHistory, true
}

// HasRetroactiveFalsePositiveHistory returns a boolean if a field has been set.
func (o *SystemSettings) HasRetroactiveFalsePositiveHistory() bool {
	if o != nil && !IsNil(o.RetroactiveFalsePositiveHistory) {
		return true
	}

	return false
}

// SetRetroactiveFalsePositiveHistory gets a reference to the given bool and assigns it to the RetroactiveFalsePositiveHistory field.
func (o *SystemSettings) SetRetroactiveFalsePositiveHistory(v bool) {
	o.RetroactiveFalsePositiveHistory = &v
}

// GetUrlPrefix returns the UrlPrefix field value if set, zero value otherwise.
func (o *SystemSettings) GetUrlPrefix() string {
	if o == nil || IsNil(o.UrlPrefix) {
		var ret string
		return ret
	}
	return *o.UrlPrefix
}

// GetUrlPrefixOk returns a tuple with the UrlPrefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemSettings) GetUrlPrefixOk() (*string, bool) {
	if o == nil || IsNil(o.UrlPrefix) {
		return nil, false
	}
	return o.UrlPrefix, true
}

// HasUrlPrefix returns a boolean if a field has been set.
func (o *SystemSettings) HasUrlPrefix() bool {
	if o != nil && !IsNil(o.UrlPrefix) {
		return true
	}

	return false
}

// SetUrlPrefix gets a reference to the given string and assigns it to the UrlPrefix field.
func (o *SystemSettings) SetUrlPrefix(v string) {
	o.UrlPrefix = &v
}

// GetTeamName returns the TeamName field value if set, zero value otherwise.
func (o *SystemSettings) GetTeamName() string {
	if o == nil || IsNil(o.TeamName) {
		var ret string
		return ret
	}
	return *o.TeamName
}

// GetTeamNameOk returns a tuple with the TeamName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemSettings) GetTeamNameOk() (*string, bool) {
	if o == nil || IsNil(o.TeamName) {
		return nil, false
	}
	return o.TeamName, true
}

// HasTeamName returns a boolean if a field has been set.
func (o *SystemSettings) HasTeamName() bool {
	if o != nil && !IsNil(o.TeamName) {
		return true
	}

	return false
}

// SetTeamName gets a reference to the given string and assigns it to the TeamName field.
func (o *SystemSettings) SetTeamName(v string) {
	o.TeamName = &v
}

// GetTimeZone returns the TimeZone field value if set, zero value otherwise.
func (o *SystemSettings) GetTimeZone() string {
	if o == nil || IsNil(o.TimeZone) {
		var ret string
		return ret
	}
	return *o.TimeZone
}

// GetTimeZoneOk returns a tuple with the TimeZone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemSettings) GetTimeZoneOk() (*string, bool) {
	if o == nil || IsNil(o.TimeZone) {
		return nil, false
	}
	return o.TimeZone, true
}

// HasTimeZone returns a boolean if a field has been set.
func (o *SystemSettings) HasTimeZone() bool {
	if o != nil && !IsNil(o.TimeZone) {
		return true
	}

	return false
}

// SetTimeZone gets a reference to the given string and assigns it to the TimeZone field.
func (o *SystemSettings) SetTimeZone(v string) {
	o.TimeZone = &v
}

// GetEnableProductGrade returns the EnableProductGrade field value if set, zero value otherwise.
func (o *SystemSettings) GetEnableProductGrade() bool {
	if o == nil || IsNil(o.EnableProductGrade) {
		var ret bool
		return ret
	}
	return *o.EnableProductGrade
}

// GetEnableProductGradeOk returns a tuple with the EnableProductGrade field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemSettings) GetEnableProductGradeOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableProductGrade) {
		return nil, false
	}
	return o.EnableProductGrade, true
}

// HasEnableProductGrade returns a boolean if a field has been set.
func (o *SystemSettings) HasEnableProductGrade() bool {
	if o != nil && !IsNil(o.EnableProductGrade) {
		return true
	}

	return false
}

// SetEnableProductGrade gets a reference to the given bool and assigns it to the EnableProductGrade field.
func (o *SystemSettings) SetEnableProductGrade(v bool) {
	o.EnableProductGrade = &v
}

// GetProductGrade returns the ProductGrade field value if set, zero value otherwise.
func (o *SystemSettings) GetProductGrade() string {
	if o == nil || IsNil(o.ProductGrade) {
		var ret string
		return ret
	}
	return *o.ProductGrade
}

// GetProductGradeOk returns a tuple with the ProductGrade field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemSettings) GetProductGradeOk() (*string, bool) {
	if o == nil || IsNil(o.ProductGrade) {
		return nil, false
	}
	return o.ProductGrade, true
}

// HasProductGrade returns a boolean if a field has been set.
func (o *SystemSettings) HasProductGrade() bool {
	if o != nil && !IsNil(o.ProductGrade) {
		return true
	}

	return false
}

// SetProductGrade gets a reference to the given string and assigns it to the ProductGrade field.
func (o *SystemSettings) SetProductGrade(v string) {
	o.ProductGrade = &v
}

// GetProductGradeA returns the ProductGradeA field value if set, zero value otherwise.
func (o *SystemSettings) GetProductGradeA() int32 {
	if o == nil || IsNil(o.ProductGradeA) {
		var ret int32
		return ret
	}
	return *o.ProductGradeA
}

// GetProductGradeAOk returns a tuple with the ProductGradeA field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemSettings) GetProductGradeAOk() (*int32, bool) {
	if o == nil || IsNil(o.ProductGradeA) {
		return nil, false
	}
	return o.ProductGradeA, true
}

// HasProductGradeA returns a boolean if a field has been set.
func (o *SystemSettings) HasProductGradeA() bool {
	if o != nil && !IsNil(o.ProductGradeA) {
		return true
	}

	return false
}

// SetProductGradeA gets a reference to the given int32 and assigns it to the ProductGradeA field.
func (o *SystemSettings) SetProductGradeA(v int32) {
	o.ProductGradeA = &v
}

// GetProductGradeB returns the ProductGradeB field value if set, zero value otherwise.
func (o *SystemSettings) GetProductGradeB() int32 {
	if o == nil || IsNil(o.ProductGradeB) {
		var ret int32
		return ret
	}
	return *o.ProductGradeB
}

// GetProductGradeBOk returns a tuple with the ProductGradeB field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemSettings) GetProductGradeBOk() (*int32, bool) {
	if o == nil || IsNil(o.ProductGradeB) {
		return nil, false
	}
	return o.ProductGradeB, true
}

// HasProductGradeB returns a boolean if a field has been set.
func (o *SystemSettings) HasProductGradeB() bool {
	if o != nil && !IsNil(o.ProductGradeB) {
		return true
	}

	return false
}

// SetProductGradeB gets a reference to the given int32 and assigns it to the ProductGradeB field.
func (o *SystemSettings) SetProductGradeB(v int32) {
	o.ProductGradeB = &v
}

// GetProductGradeC returns the ProductGradeC field value if set, zero value otherwise.
func (o *SystemSettings) GetProductGradeC() int32 {
	if o == nil || IsNil(o.ProductGradeC) {
		var ret int32
		return ret
	}
	return *o.ProductGradeC
}

// GetProductGradeCOk returns a tuple with the ProductGradeC field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemSettings) GetProductGradeCOk() (*int32, bool) {
	if o == nil || IsNil(o.ProductGradeC) {
		return nil, false
	}
	return o.ProductGradeC, true
}

// HasProductGradeC returns a boolean if a field has been set.
func (o *SystemSettings) HasProductGradeC() bool {
	if o != nil && !IsNil(o.ProductGradeC) {
		return true
	}

	return false
}

// SetProductGradeC gets a reference to the given int32 and assigns it to the ProductGradeC field.
func (o *SystemSettings) SetProductGradeC(v int32) {
	o.ProductGradeC = &v
}

// GetProductGradeD returns the ProductGradeD field value if set, zero value otherwise.
func (o *SystemSettings) GetProductGradeD() int32 {
	if o == nil || IsNil(o.ProductGradeD) {
		var ret int32
		return ret
	}
	return *o.ProductGradeD
}

// GetProductGradeDOk returns a tuple with the ProductGradeD field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemSettings) GetProductGradeDOk() (*int32, bool) {
	if o == nil || IsNil(o.ProductGradeD) {
		return nil, false
	}
	return o.ProductGradeD, true
}

// HasProductGradeD returns a boolean if a field has been set.
func (o *SystemSettings) HasProductGradeD() bool {
	if o != nil && !IsNil(o.ProductGradeD) {
		return true
	}

	return false
}

// SetProductGradeD gets a reference to the given int32 and assigns it to the ProductGradeD field.
func (o *SystemSettings) SetProductGradeD(v int32) {
	o.ProductGradeD = &v
}

// GetProductGradeF returns the ProductGradeF field value if set, zero value otherwise.
func (o *SystemSettings) GetProductGradeF() int32 {
	if o == nil || IsNil(o.ProductGradeF) {
		var ret int32
		return ret
	}
	return *o.ProductGradeF
}

// GetProductGradeFOk returns a tuple with the ProductGradeF field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemSettings) GetProductGradeFOk() (*int32, bool) {
	if o == nil || IsNil(o.ProductGradeF) {
		return nil, false
	}
	return o.ProductGradeF, true
}

// HasProductGradeF returns a boolean if a field has been set.
func (o *SystemSettings) HasProductGradeF() bool {
	if o != nil && !IsNil(o.ProductGradeF) {
		return true
	}

	return false
}

// SetProductGradeF gets a reference to the given int32 and assigns it to the ProductGradeF field.
func (o *SystemSettings) SetProductGradeF(v int32) {
	o.ProductGradeF = &v
}

// GetEnableProductTagInheritance returns the EnableProductTagInheritance field value if set, zero value otherwise.
func (o *SystemSettings) GetEnableProductTagInheritance() bool {
	if o == nil || IsNil(o.EnableProductTagInheritance) {
		var ret bool
		return ret
	}
	return *o.EnableProductTagInheritance
}

// GetEnableProductTagInheritanceOk returns a tuple with the EnableProductTagInheritance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemSettings) GetEnableProductTagInheritanceOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableProductTagInheritance) {
		return nil, false
	}
	return o.EnableProductTagInheritance, true
}

// HasEnableProductTagInheritance returns a boolean if a field has been set.
func (o *SystemSettings) HasEnableProductTagInheritance() bool {
	if o != nil && !IsNil(o.EnableProductTagInheritance) {
		return true
	}

	return false
}

// SetEnableProductTagInheritance gets a reference to the given bool and assigns it to the EnableProductTagInheritance field.
func (o *SystemSettings) SetEnableProductTagInheritance(v bool) {
	o.EnableProductTagInheritance = &v
}

// GetEnableBenchmark returns the EnableBenchmark field value if set, zero value otherwise.
func (o *SystemSettings) GetEnableBenchmark() bool {
	if o == nil || IsNil(o.EnableBenchmark) {
		var ret bool
		return ret
	}
	return *o.EnableBenchmark
}

// GetEnableBenchmarkOk returns a tuple with the EnableBenchmark field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemSettings) GetEnableBenchmarkOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableBenchmark) {
		return nil, false
	}
	return o.EnableBenchmark, true
}

// HasEnableBenchmark returns a boolean if a field has been set.
func (o *SystemSettings) HasEnableBenchmark() bool {
	if o != nil && !IsNil(o.EnableBenchmark) {
		return true
	}

	return false
}

// SetEnableBenchmark gets a reference to the given bool and assigns it to the EnableBenchmark field.
func (o *SystemSettings) SetEnableBenchmark(v bool) {
	o.EnableBenchmark = &v
}

// GetEnableTemplateMatch returns the EnableTemplateMatch field value if set, zero value otherwise.
func (o *SystemSettings) GetEnableTemplateMatch() bool {
	if o == nil || IsNil(o.EnableTemplateMatch) {
		var ret bool
		return ret
	}
	return *o.EnableTemplateMatch
}

// GetEnableTemplateMatchOk returns a tuple with the EnableTemplateMatch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemSettings) GetEnableTemplateMatchOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableTemplateMatch) {
		return nil, false
	}
	return o.EnableTemplateMatch, true
}

// HasEnableTemplateMatch returns a boolean if a field has been set.
func (o *SystemSettings) HasEnableTemplateMatch() bool {
	if o != nil && !IsNil(o.EnableTemplateMatch) {
		return true
	}

	return false
}

// SetEnableTemplateMatch gets a reference to the given bool and assigns it to the EnableTemplateMatch field.
func (o *SystemSettings) SetEnableTemplateMatch(v bool) {
	o.EnableTemplateMatch = &v
}

// GetEngagementAutoClose returns the EngagementAutoClose field value if set, zero value otherwise.
func (o *SystemSettings) GetEngagementAutoClose() bool {
	if o == nil || IsNil(o.EngagementAutoClose) {
		var ret bool
		return ret
	}
	return *o.EngagementAutoClose
}

// GetEngagementAutoCloseOk returns a tuple with the EngagementAutoClose field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemSettings) GetEngagementAutoCloseOk() (*bool, bool) {
	if o == nil || IsNil(o.EngagementAutoClose) {
		return nil, false
	}
	return o.EngagementAutoClose, true
}

// HasEngagementAutoClose returns a boolean if a field has been set.
func (o *SystemSettings) HasEngagementAutoClose() bool {
	if o != nil && !IsNil(o.EngagementAutoClose) {
		return true
	}

	return false
}

// SetEngagementAutoClose gets a reference to the given bool and assigns it to the EngagementAutoClose field.
func (o *SystemSettings) SetEngagementAutoClose(v bool) {
	o.EngagementAutoClose = &v
}

// GetEngagementAutoCloseDays returns the EngagementAutoCloseDays field value if set, zero value otherwise.
func (o *SystemSettings) GetEngagementAutoCloseDays() int32 {
	if o == nil || IsNil(o.EngagementAutoCloseDays) {
		var ret int32
		return ret
	}
	return *o.EngagementAutoCloseDays
}

// GetEngagementAutoCloseDaysOk returns a tuple with the EngagementAutoCloseDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemSettings) GetEngagementAutoCloseDaysOk() (*int32, bool) {
	if o == nil || IsNil(o.EngagementAutoCloseDays) {
		return nil, false
	}
	return o.EngagementAutoCloseDays, true
}

// HasEngagementAutoCloseDays returns a boolean if a field has been set.
func (o *SystemSettings) HasEngagementAutoCloseDays() bool {
	if o != nil && !IsNil(o.EngagementAutoCloseDays) {
		return true
	}

	return false
}

// SetEngagementAutoCloseDays gets a reference to the given int32 and assigns it to the EngagementAutoCloseDays field.
func (o *SystemSettings) SetEngagementAutoCloseDays(v int32) {
	o.EngagementAutoCloseDays = &v
}

// GetEnableFindingSla returns the EnableFindingSla field value if set, zero value otherwise.
func (o *SystemSettings) GetEnableFindingSla() bool {
	if o == nil || IsNil(o.EnableFindingSla) {
		var ret bool
		return ret
	}
	return *o.EnableFindingSla
}

// GetEnableFindingSlaOk returns a tuple with the EnableFindingSla field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemSettings) GetEnableFindingSlaOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableFindingSla) {
		return nil, false
	}
	return o.EnableFindingSla, true
}

// HasEnableFindingSla returns a boolean if a field has been set.
func (o *SystemSettings) HasEnableFindingSla() bool {
	if o != nil && !IsNil(o.EnableFindingSla) {
		return true
	}

	return false
}

// SetEnableFindingSla gets a reference to the given bool and assigns it to the EnableFindingSla field.
func (o *SystemSettings) SetEnableFindingSla(v bool) {
	o.EnableFindingSla = &v
}

// GetEnableNotifySlaActive returns the EnableNotifySlaActive field value if set, zero value otherwise.
func (o *SystemSettings) GetEnableNotifySlaActive() bool {
	if o == nil || IsNil(o.EnableNotifySlaActive) {
		var ret bool
		return ret
	}
	return *o.EnableNotifySlaActive
}

// GetEnableNotifySlaActiveOk returns a tuple with the EnableNotifySlaActive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemSettings) GetEnableNotifySlaActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableNotifySlaActive) {
		return nil, false
	}
	return o.EnableNotifySlaActive, true
}

// HasEnableNotifySlaActive returns a boolean if a field has been set.
func (o *SystemSettings) HasEnableNotifySlaActive() bool {
	if o != nil && !IsNil(o.EnableNotifySlaActive) {
		return true
	}

	return false
}

// SetEnableNotifySlaActive gets a reference to the given bool and assigns it to the EnableNotifySlaActive field.
func (o *SystemSettings) SetEnableNotifySlaActive(v bool) {
	o.EnableNotifySlaActive = &v
}

// GetEnableNotifySlaActiveVerified returns the EnableNotifySlaActiveVerified field value if set, zero value otherwise.
func (o *SystemSettings) GetEnableNotifySlaActiveVerified() bool {
	if o == nil || IsNil(o.EnableNotifySlaActiveVerified) {
		var ret bool
		return ret
	}
	return *o.EnableNotifySlaActiveVerified
}

// GetEnableNotifySlaActiveVerifiedOk returns a tuple with the EnableNotifySlaActiveVerified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemSettings) GetEnableNotifySlaActiveVerifiedOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableNotifySlaActiveVerified) {
		return nil, false
	}
	return o.EnableNotifySlaActiveVerified, true
}

// HasEnableNotifySlaActiveVerified returns a boolean if a field has been set.
func (o *SystemSettings) HasEnableNotifySlaActiveVerified() bool {
	if o != nil && !IsNil(o.EnableNotifySlaActiveVerified) {
		return true
	}

	return false
}

// SetEnableNotifySlaActiveVerified gets a reference to the given bool and assigns it to the EnableNotifySlaActiveVerified field.
func (o *SystemSettings) SetEnableNotifySlaActiveVerified(v bool) {
	o.EnableNotifySlaActiveVerified = &v
}

// GetEnableNotifySlaJiraOnly returns the EnableNotifySlaJiraOnly field value if set, zero value otherwise.
func (o *SystemSettings) GetEnableNotifySlaJiraOnly() bool {
	if o == nil || IsNil(o.EnableNotifySlaJiraOnly) {
		var ret bool
		return ret
	}
	return *o.EnableNotifySlaJiraOnly
}

// GetEnableNotifySlaJiraOnlyOk returns a tuple with the EnableNotifySlaJiraOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemSettings) GetEnableNotifySlaJiraOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableNotifySlaJiraOnly) {
		return nil, false
	}
	return o.EnableNotifySlaJiraOnly, true
}

// HasEnableNotifySlaJiraOnly returns a boolean if a field has been set.
func (o *SystemSettings) HasEnableNotifySlaJiraOnly() bool {
	if o != nil && !IsNil(o.EnableNotifySlaJiraOnly) {
		return true
	}

	return false
}

// SetEnableNotifySlaJiraOnly gets a reference to the given bool and assigns it to the EnableNotifySlaJiraOnly field.
func (o *SystemSettings) SetEnableNotifySlaJiraOnly(v bool) {
	o.EnableNotifySlaJiraOnly = &v
}

// GetEnableNotifySlaExponentialBackoff returns the EnableNotifySlaExponentialBackoff field value if set, zero value otherwise.
func (o *SystemSettings) GetEnableNotifySlaExponentialBackoff() bool {
	if o == nil || IsNil(o.EnableNotifySlaExponentialBackoff) {
		var ret bool
		return ret
	}
	return *o.EnableNotifySlaExponentialBackoff
}

// GetEnableNotifySlaExponentialBackoffOk returns a tuple with the EnableNotifySlaExponentialBackoff field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemSettings) GetEnableNotifySlaExponentialBackoffOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableNotifySlaExponentialBackoff) {
		return nil, false
	}
	return o.EnableNotifySlaExponentialBackoff, true
}

// HasEnableNotifySlaExponentialBackoff returns a boolean if a field has been set.
func (o *SystemSettings) HasEnableNotifySlaExponentialBackoff() bool {
	if o != nil && !IsNil(o.EnableNotifySlaExponentialBackoff) {
		return true
	}

	return false
}

// SetEnableNotifySlaExponentialBackoff gets a reference to the given bool and assigns it to the EnableNotifySlaExponentialBackoff field.
func (o *SystemSettings) SetEnableNotifySlaExponentialBackoff(v bool) {
	o.EnableNotifySlaExponentialBackoff = &v
}

// GetAllowAnonymousSurveyRepsonse returns the AllowAnonymousSurveyRepsonse field value if set, zero value otherwise.
func (o *SystemSettings) GetAllowAnonymousSurveyRepsonse() bool {
	if o == nil || IsNil(o.AllowAnonymousSurveyRepsonse) {
		var ret bool
		return ret
	}
	return *o.AllowAnonymousSurveyRepsonse
}

// GetAllowAnonymousSurveyRepsonseOk returns a tuple with the AllowAnonymousSurveyRepsonse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemSettings) GetAllowAnonymousSurveyRepsonseOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowAnonymousSurveyRepsonse) {
		return nil, false
	}
	return o.AllowAnonymousSurveyRepsonse, true
}

// HasAllowAnonymousSurveyRepsonse returns a boolean if a field has been set.
func (o *SystemSettings) HasAllowAnonymousSurveyRepsonse() bool {
	if o != nil && !IsNil(o.AllowAnonymousSurveyRepsonse) {
		return true
	}

	return false
}

// SetAllowAnonymousSurveyRepsonse gets a reference to the given bool and assigns it to the AllowAnonymousSurveyRepsonse field.
func (o *SystemSettings) SetAllowAnonymousSurveyRepsonse(v bool) {
	o.AllowAnonymousSurveyRepsonse = &v
}

// GetCredentials returns the Credentials field value if set, zero value otherwise.
func (o *SystemSettings) GetCredentials() string {
	if o == nil || IsNil(o.Credentials) {
		var ret string
		return ret
	}
	return *o.Credentials
}

// GetCredentialsOk returns a tuple with the Credentials field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemSettings) GetCredentialsOk() (*string, bool) {
	if o == nil || IsNil(o.Credentials) {
		return nil, false
	}
	return o.Credentials, true
}

// HasCredentials returns a boolean if a field has been set.
func (o *SystemSettings) HasCredentials() bool {
	if o != nil && !IsNil(o.Credentials) {
		return true
	}

	return false
}

// SetCredentials gets a reference to the given string and assigns it to the Credentials field.
func (o *SystemSettings) SetCredentials(v string) {
	o.Credentials = &v
}

// GetDisclaimer returns the Disclaimer field value if set, zero value otherwise.
func (o *SystemSettings) GetDisclaimer() string {
	if o == nil || IsNil(o.Disclaimer) {
		var ret string
		return ret
	}
	return *o.Disclaimer
}

// GetDisclaimerOk returns a tuple with the Disclaimer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemSettings) GetDisclaimerOk() (*string, bool) {
	if o == nil || IsNil(o.Disclaimer) {
		return nil, false
	}
	return o.Disclaimer, true
}

// HasDisclaimer returns a boolean if a field has been set.
func (o *SystemSettings) HasDisclaimer() bool {
	if o != nil && !IsNil(o.Disclaimer) {
		return true
	}

	return false
}

// SetDisclaimer gets a reference to the given string and assigns it to the Disclaimer field.
func (o *SystemSettings) SetDisclaimer(v string) {
	o.Disclaimer = &v
}

// GetRiskAcceptanceFormDefaultDays returns the RiskAcceptanceFormDefaultDays field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SystemSettings) GetRiskAcceptanceFormDefaultDays() int32 {
	if o == nil || IsNil(o.RiskAcceptanceFormDefaultDays.Get()) {
		var ret int32
		return ret
	}
	return *o.RiskAcceptanceFormDefaultDays.Get()
}

// GetRiskAcceptanceFormDefaultDaysOk returns a tuple with the RiskAcceptanceFormDefaultDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SystemSettings) GetRiskAcceptanceFormDefaultDaysOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.RiskAcceptanceFormDefaultDays.Get(), o.RiskAcceptanceFormDefaultDays.IsSet()
}

// HasRiskAcceptanceFormDefaultDays returns a boolean if a field has been set.
func (o *SystemSettings) HasRiskAcceptanceFormDefaultDays() bool {
	if o != nil && o.RiskAcceptanceFormDefaultDays.IsSet() {
		return true
	}

	return false
}

// SetRiskAcceptanceFormDefaultDays gets a reference to the given NullableInt32 and assigns it to the RiskAcceptanceFormDefaultDays field.
func (o *SystemSettings) SetRiskAcceptanceFormDefaultDays(v int32) {
	o.RiskAcceptanceFormDefaultDays.Set(&v)
}
// SetRiskAcceptanceFormDefaultDaysNil sets the value for RiskAcceptanceFormDefaultDays to be an explicit nil
func (o *SystemSettings) SetRiskAcceptanceFormDefaultDaysNil() {
	o.RiskAcceptanceFormDefaultDays.Set(nil)
}

// UnsetRiskAcceptanceFormDefaultDays ensures that no value is present for RiskAcceptanceFormDefaultDays, not even an explicit nil
func (o *SystemSettings) UnsetRiskAcceptanceFormDefaultDays() {
	o.RiskAcceptanceFormDefaultDays.Unset()
}

// GetRiskAcceptanceNotifyBeforeExpiration returns the RiskAcceptanceNotifyBeforeExpiration field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SystemSettings) GetRiskAcceptanceNotifyBeforeExpiration() int32 {
	if o == nil || IsNil(o.RiskAcceptanceNotifyBeforeExpiration.Get()) {
		var ret int32
		return ret
	}
	return *o.RiskAcceptanceNotifyBeforeExpiration.Get()
}

// GetRiskAcceptanceNotifyBeforeExpirationOk returns a tuple with the RiskAcceptanceNotifyBeforeExpiration field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SystemSettings) GetRiskAcceptanceNotifyBeforeExpirationOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.RiskAcceptanceNotifyBeforeExpiration.Get(), o.RiskAcceptanceNotifyBeforeExpiration.IsSet()
}

// HasRiskAcceptanceNotifyBeforeExpiration returns a boolean if a field has been set.
func (o *SystemSettings) HasRiskAcceptanceNotifyBeforeExpiration() bool {
	if o != nil && o.RiskAcceptanceNotifyBeforeExpiration.IsSet() {
		return true
	}

	return false
}

// SetRiskAcceptanceNotifyBeforeExpiration gets a reference to the given NullableInt32 and assigns it to the RiskAcceptanceNotifyBeforeExpiration field.
func (o *SystemSettings) SetRiskAcceptanceNotifyBeforeExpiration(v int32) {
	o.RiskAcceptanceNotifyBeforeExpiration.Set(&v)
}
// SetRiskAcceptanceNotifyBeforeExpirationNil sets the value for RiskAcceptanceNotifyBeforeExpiration to be an explicit nil
func (o *SystemSettings) SetRiskAcceptanceNotifyBeforeExpirationNil() {
	o.RiskAcceptanceNotifyBeforeExpiration.Set(nil)
}

// UnsetRiskAcceptanceNotifyBeforeExpiration ensures that no value is present for RiskAcceptanceNotifyBeforeExpiration, not even an explicit nil
func (o *SystemSettings) UnsetRiskAcceptanceNotifyBeforeExpiration() {
	o.RiskAcceptanceNotifyBeforeExpiration.Unset()
}

// GetEnableCredentials returns the EnableCredentials field value if set, zero value otherwise.
func (o *SystemSettings) GetEnableCredentials() bool {
	if o == nil || IsNil(o.EnableCredentials) {
		var ret bool
		return ret
	}
	return *o.EnableCredentials
}

// GetEnableCredentialsOk returns a tuple with the EnableCredentials field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemSettings) GetEnableCredentialsOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableCredentials) {
		return nil, false
	}
	return o.EnableCredentials, true
}

// HasEnableCredentials returns a boolean if a field has been set.
func (o *SystemSettings) HasEnableCredentials() bool {
	if o != nil && !IsNil(o.EnableCredentials) {
		return true
	}

	return false
}

// SetEnableCredentials gets a reference to the given bool and assigns it to the EnableCredentials field.
func (o *SystemSettings) SetEnableCredentials(v bool) {
	o.EnableCredentials = &v
}

// GetEnableQuestionnaires returns the EnableQuestionnaires field value if set, zero value otherwise.
func (o *SystemSettings) GetEnableQuestionnaires() bool {
	if o == nil || IsNil(o.EnableQuestionnaires) {
		var ret bool
		return ret
	}
	return *o.EnableQuestionnaires
}

// GetEnableQuestionnairesOk returns a tuple with the EnableQuestionnaires field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemSettings) GetEnableQuestionnairesOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableQuestionnaires) {
		return nil, false
	}
	return o.EnableQuestionnaires, true
}

// HasEnableQuestionnaires returns a boolean if a field has been set.
func (o *SystemSettings) HasEnableQuestionnaires() bool {
	if o != nil && !IsNil(o.EnableQuestionnaires) {
		return true
	}

	return false
}

// SetEnableQuestionnaires gets a reference to the given bool and assigns it to the EnableQuestionnaires field.
func (o *SystemSettings) SetEnableQuestionnaires(v bool) {
	o.EnableQuestionnaires = &v
}

// GetEnableChecklists returns the EnableChecklists field value if set, zero value otherwise.
func (o *SystemSettings) GetEnableChecklists() bool {
	if o == nil || IsNil(o.EnableChecklists) {
		var ret bool
		return ret
	}
	return *o.EnableChecklists
}

// GetEnableChecklistsOk returns a tuple with the EnableChecklists field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemSettings) GetEnableChecklistsOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableChecklists) {
		return nil, false
	}
	return o.EnableChecklists, true
}

// HasEnableChecklists returns a boolean if a field has been set.
func (o *SystemSettings) HasEnableChecklists() bool {
	if o != nil && !IsNil(o.EnableChecklists) {
		return true
	}

	return false
}

// SetEnableChecklists gets a reference to the given bool and assigns it to the EnableChecklists field.
func (o *SystemSettings) SetEnableChecklists(v bool) {
	o.EnableChecklists = &v
}

// GetEnableEndpointMetadataImport returns the EnableEndpointMetadataImport field value if set, zero value otherwise.
func (o *SystemSettings) GetEnableEndpointMetadataImport() bool {
	if o == nil || IsNil(o.EnableEndpointMetadataImport) {
		var ret bool
		return ret
	}
	return *o.EnableEndpointMetadataImport
}

// GetEnableEndpointMetadataImportOk returns a tuple with the EnableEndpointMetadataImport field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemSettings) GetEnableEndpointMetadataImportOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableEndpointMetadataImport) {
		return nil, false
	}
	return o.EnableEndpointMetadataImport, true
}

// HasEnableEndpointMetadataImport returns a boolean if a field has been set.
func (o *SystemSettings) HasEnableEndpointMetadataImport() bool {
	if o != nil && !IsNil(o.EnableEndpointMetadataImport) {
		return true
	}

	return false
}

// SetEnableEndpointMetadataImport gets a reference to the given bool and assigns it to the EnableEndpointMetadataImport field.
func (o *SystemSettings) SetEnableEndpointMetadataImport(v bool) {
	o.EnableEndpointMetadataImport = &v
}

// GetEnableUserProfileEditable returns the EnableUserProfileEditable field value if set, zero value otherwise.
func (o *SystemSettings) GetEnableUserProfileEditable() bool {
	if o == nil || IsNil(o.EnableUserProfileEditable) {
		var ret bool
		return ret
	}
	return *o.EnableUserProfileEditable
}

// GetEnableUserProfileEditableOk returns a tuple with the EnableUserProfileEditable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemSettings) GetEnableUserProfileEditableOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableUserProfileEditable) {
		return nil, false
	}
	return o.EnableUserProfileEditable, true
}

// HasEnableUserProfileEditable returns a boolean if a field has been set.
func (o *SystemSettings) HasEnableUserProfileEditable() bool {
	if o != nil && !IsNil(o.EnableUserProfileEditable) {
		return true
	}

	return false
}

// SetEnableUserProfileEditable gets a reference to the given bool and assigns it to the EnableUserProfileEditable field.
func (o *SystemSettings) SetEnableUserProfileEditable(v bool) {
	o.EnableUserProfileEditable = &v
}

// GetEnableProductTrackingFiles returns the EnableProductTrackingFiles field value if set, zero value otherwise.
func (o *SystemSettings) GetEnableProductTrackingFiles() bool {
	if o == nil || IsNil(o.EnableProductTrackingFiles) {
		var ret bool
		return ret
	}
	return *o.EnableProductTrackingFiles
}

// GetEnableProductTrackingFilesOk returns a tuple with the EnableProductTrackingFiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemSettings) GetEnableProductTrackingFilesOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableProductTrackingFiles) {
		return nil, false
	}
	return o.EnableProductTrackingFiles, true
}

// HasEnableProductTrackingFiles returns a boolean if a field has been set.
func (o *SystemSettings) HasEnableProductTrackingFiles() bool {
	if o != nil && !IsNil(o.EnableProductTrackingFiles) {
		return true
	}

	return false
}

// SetEnableProductTrackingFiles gets a reference to the given bool and assigns it to the EnableProductTrackingFiles field.
func (o *SystemSettings) SetEnableProductTrackingFiles(v bool) {
	o.EnableProductTrackingFiles = &v
}

// GetEnableFindingGroups returns the EnableFindingGroups field value if set, zero value otherwise.
func (o *SystemSettings) GetEnableFindingGroups() bool {
	if o == nil || IsNil(o.EnableFindingGroups) {
		var ret bool
		return ret
	}
	return *o.EnableFindingGroups
}

// GetEnableFindingGroupsOk returns a tuple with the EnableFindingGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemSettings) GetEnableFindingGroupsOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableFindingGroups) {
		return nil, false
	}
	return o.EnableFindingGroups, true
}

// HasEnableFindingGroups returns a boolean if a field has been set.
func (o *SystemSettings) HasEnableFindingGroups() bool {
	if o != nil && !IsNil(o.EnableFindingGroups) {
		return true
	}

	return false
}

// SetEnableFindingGroups gets a reference to the given bool and assigns it to the EnableFindingGroups field.
func (o *SystemSettings) SetEnableFindingGroups(v bool) {
	o.EnableFindingGroups = &v
}

// GetEnableCalendar returns the EnableCalendar field value if set, zero value otherwise.
func (o *SystemSettings) GetEnableCalendar() bool {
	if o == nil || IsNil(o.EnableCalendar) {
		var ret bool
		return ret
	}
	return *o.EnableCalendar
}

// GetEnableCalendarOk returns a tuple with the EnableCalendar field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemSettings) GetEnableCalendarOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableCalendar) {
		return nil, false
	}
	return o.EnableCalendar, true
}

// HasEnableCalendar returns a boolean if a field has been set.
func (o *SystemSettings) HasEnableCalendar() bool {
	if o != nil && !IsNil(o.EnableCalendar) {
		return true
	}

	return false
}

// SetEnableCalendar gets a reference to the given bool and assigns it to the EnableCalendar field.
func (o *SystemSettings) SetEnableCalendar(v bool) {
	o.EnableCalendar = &v
}

// GetDefaultGroupEmailPattern returns the DefaultGroupEmailPattern field value if set, zero value otherwise.
func (o *SystemSettings) GetDefaultGroupEmailPattern() string {
	if o == nil || IsNil(o.DefaultGroupEmailPattern) {
		var ret string
		return ret
	}
	return *o.DefaultGroupEmailPattern
}

// GetDefaultGroupEmailPatternOk returns a tuple with the DefaultGroupEmailPattern field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemSettings) GetDefaultGroupEmailPatternOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultGroupEmailPattern) {
		return nil, false
	}
	return o.DefaultGroupEmailPattern, true
}

// HasDefaultGroupEmailPattern returns a boolean if a field has been set.
func (o *SystemSettings) HasDefaultGroupEmailPattern() bool {
	if o != nil && !IsNil(o.DefaultGroupEmailPattern) {
		return true
	}

	return false
}

// SetDefaultGroupEmailPattern gets a reference to the given string and assigns it to the DefaultGroupEmailPattern field.
func (o *SystemSettings) SetDefaultGroupEmailPattern(v string) {
	o.DefaultGroupEmailPattern = &v
}

// GetMinimumPasswordLength returns the MinimumPasswordLength field value if set, zero value otherwise.
func (o *SystemSettings) GetMinimumPasswordLength() int32 {
	if o == nil || IsNil(o.MinimumPasswordLength) {
		var ret int32
		return ret
	}
	return *o.MinimumPasswordLength
}

// GetMinimumPasswordLengthOk returns a tuple with the MinimumPasswordLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemSettings) GetMinimumPasswordLengthOk() (*int32, bool) {
	if o == nil || IsNil(o.MinimumPasswordLength) {
		return nil, false
	}
	return o.MinimumPasswordLength, true
}

// HasMinimumPasswordLength returns a boolean if a field has been set.
func (o *SystemSettings) HasMinimumPasswordLength() bool {
	if o != nil && !IsNil(o.MinimumPasswordLength) {
		return true
	}

	return false
}

// SetMinimumPasswordLength gets a reference to the given int32 and assigns it to the MinimumPasswordLength field.
func (o *SystemSettings) SetMinimumPasswordLength(v int32) {
	o.MinimumPasswordLength = &v
}

// GetMaximumPasswordLength returns the MaximumPasswordLength field value if set, zero value otherwise.
func (o *SystemSettings) GetMaximumPasswordLength() int32 {
	if o == nil || IsNil(o.MaximumPasswordLength) {
		var ret int32
		return ret
	}
	return *o.MaximumPasswordLength
}

// GetMaximumPasswordLengthOk returns a tuple with the MaximumPasswordLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemSettings) GetMaximumPasswordLengthOk() (*int32, bool) {
	if o == nil || IsNil(o.MaximumPasswordLength) {
		return nil, false
	}
	return o.MaximumPasswordLength, true
}

// HasMaximumPasswordLength returns a boolean if a field has been set.
func (o *SystemSettings) HasMaximumPasswordLength() bool {
	if o != nil && !IsNil(o.MaximumPasswordLength) {
		return true
	}

	return false
}

// SetMaximumPasswordLength gets a reference to the given int32 and assigns it to the MaximumPasswordLength field.
func (o *SystemSettings) SetMaximumPasswordLength(v int32) {
	o.MaximumPasswordLength = &v
}

// GetNumberCharacterRequired returns the NumberCharacterRequired field value if set, zero value otherwise.
func (o *SystemSettings) GetNumberCharacterRequired() bool {
	if o == nil || IsNil(o.NumberCharacterRequired) {
		var ret bool
		return ret
	}
	return *o.NumberCharacterRequired
}

// GetNumberCharacterRequiredOk returns a tuple with the NumberCharacterRequired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemSettings) GetNumberCharacterRequiredOk() (*bool, bool) {
	if o == nil || IsNil(o.NumberCharacterRequired) {
		return nil, false
	}
	return o.NumberCharacterRequired, true
}

// HasNumberCharacterRequired returns a boolean if a field has been set.
func (o *SystemSettings) HasNumberCharacterRequired() bool {
	if o != nil && !IsNil(o.NumberCharacterRequired) {
		return true
	}

	return false
}

// SetNumberCharacterRequired gets a reference to the given bool and assigns it to the NumberCharacterRequired field.
func (o *SystemSettings) SetNumberCharacterRequired(v bool) {
	o.NumberCharacterRequired = &v
}

// GetSpecialCharacterRequired returns the SpecialCharacterRequired field value if set, zero value otherwise.
func (o *SystemSettings) GetSpecialCharacterRequired() bool {
	if o == nil || IsNil(o.SpecialCharacterRequired) {
		var ret bool
		return ret
	}
	return *o.SpecialCharacterRequired
}

// GetSpecialCharacterRequiredOk returns a tuple with the SpecialCharacterRequired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemSettings) GetSpecialCharacterRequiredOk() (*bool, bool) {
	if o == nil || IsNil(o.SpecialCharacterRequired) {
		return nil, false
	}
	return o.SpecialCharacterRequired, true
}

// HasSpecialCharacterRequired returns a boolean if a field has been set.
func (o *SystemSettings) HasSpecialCharacterRequired() bool {
	if o != nil && !IsNil(o.SpecialCharacterRequired) {
		return true
	}

	return false
}

// SetSpecialCharacterRequired gets a reference to the given bool and assigns it to the SpecialCharacterRequired field.
func (o *SystemSettings) SetSpecialCharacterRequired(v bool) {
	o.SpecialCharacterRequired = &v
}

// GetLowercaseCharacterRequired returns the LowercaseCharacterRequired field value if set, zero value otherwise.
func (o *SystemSettings) GetLowercaseCharacterRequired() bool {
	if o == nil || IsNil(o.LowercaseCharacterRequired) {
		var ret bool
		return ret
	}
	return *o.LowercaseCharacterRequired
}

// GetLowercaseCharacterRequiredOk returns a tuple with the LowercaseCharacterRequired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemSettings) GetLowercaseCharacterRequiredOk() (*bool, bool) {
	if o == nil || IsNil(o.LowercaseCharacterRequired) {
		return nil, false
	}
	return o.LowercaseCharacterRequired, true
}

// HasLowercaseCharacterRequired returns a boolean if a field has been set.
func (o *SystemSettings) HasLowercaseCharacterRequired() bool {
	if o != nil && !IsNil(o.LowercaseCharacterRequired) {
		return true
	}

	return false
}

// SetLowercaseCharacterRequired gets a reference to the given bool and assigns it to the LowercaseCharacterRequired field.
func (o *SystemSettings) SetLowercaseCharacterRequired(v bool) {
	o.LowercaseCharacterRequired = &v
}

// GetUppercaseCharacterRequired returns the UppercaseCharacterRequired field value if set, zero value otherwise.
func (o *SystemSettings) GetUppercaseCharacterRequired() bool {
	if o == nil || IsNil(o.UppercaseCharacterRequired) {
		var ret bool
		return ret
	}
	return *o.UppercaseCharacterRequired
}

// GetUppercaseCharacterRequiredOk returns a tuple with the UppercaseCharacterRequired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemSettings) GetUppercaseCharacterRequiredOk() (*bool, bool) {
	if o == nil || IsNil(o.UppercaseCharacterRequired) {
		return nil, false
	}
	return o.UppercaseCharacterRequired, true
}

// HasUppercaseCharacterRequired returns a boolean if a field has been set.
func (o *SystemSettings) HasUppercaseCharacterRequired() bool {
	if o != nil && !IsNil(o.UppercaseCharacterRequired) {
		return true
	}

	return false
}

// SetUppercaseCharacterRequired gets a reference to the given bool and assigns it to the UppercaseCharacterRequired field.
func (o *SystemSettings) SetUppercaseCharacterRequired(v bool) {
	o.UppercaseCharacterRequired = &v
}

// GetNonCommonPasswordRequired returns the NonCommonPasswordRequired field value if set, zero value otherwise.
func (o *SystemSettings) GetNonCommonPasswordRequired() bool {
	if o == nil || IsNil(o.NonCommonPasswordRequired) {
		var ret bool
		return ret
	}
	return *o.NonCommonPasswordRequired
}

// GetNonCommonPasswordRequiredOk returns a tuple with the NonCommonPasswordRequired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemSettings) GetNonCommonPasswordRequiredOk() (*bool, bool) {
	if o == nil || IsNil(o.NonCommonPasswordRequired) {
		return nil, false
	}
	return o.NonCommonPasswordRequired, true
}

// HasNonCommonPasswordRequired returns a boolean if a field has been set.
func (o *SystemSettings) HasNonCommonPasswordRequired() bool {
	if o != nil && !IsNil(o.NonCommonPasswordRequired) {
		return true
	}

	return false
}

// SetNonCommonPasswordRequired gets a reference to the given bool and assigns it to the NonCommonPasswordRequired field.
func (o *SystemSettings) SetNonCommonPasswordRequired(v bool) {
	o.NonCommonPasswordRequired = &v
}

// GetApiExposeErrorDetails returns the ApiExposeErrorDetails field value if set, zero value otherwise.
func (o *SystemSettings) GetApiExposeErrorDetails() bool {
	if o == nil || IsNil(o.ApiExposeErrorDetails) {
		var ret bool
		return ret
	}
	return *o.ApiExposeErrorDetails
}

// GetApiExposeErrorDetailsOk returns a tuple with the ApiExposeErrorDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemSettings) GetApiExposeErrorDetailsOk() (*bool, bool) {
	if o == nil || IsNil(o.ApiExposeErrorDetails) {
		return nil, false
	}
	return o.ApiExposeErrorDetails, true
}

// HasApiExposeErrorDetails returns a boolean if a field has been set.
func (o *SystemSettings) HasApiExposeErrorDetails() bool {
	if o != nil && !IsNil(o.ApiExposeErrorDetails) {
		return true
	}

	return false
}

// SetApiExposeErrorDetails gets a reference to the given bool and assigns it to the ApiExposeErrorDetails field.
func (o *SystemSettings) SetApiExposeErrorDetails(v bool) {
	o.ApiExposeErrorDetails = &v
}

// GetDefaultGroup returns the DefaultGroup field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SystemSettings) GetDefaultGroup() int32 {
	if o == nil || IsNil(o.DefaultGroup.Get()) {
		var ret int32
		return ret
	}
	return *o.DefaultGroup.Get()
}

// GetDefaultGroupOk returns a tuple with the DefaultGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SystemSettings) GetDefaultGroupOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.DefaultGroup.Get(), o.DefaultGroup.IsSet()
}

// HasDefaultGroup returns a boolean if a field has been set.
func (o *SystemSettings) HasDefaultGroup() bool {
	if o != nil && o.DefaultGroup.IsSet() {
		return true
	}

	return false
}

// SetDefaultGroup gets a reference to the given NullableInt32 and assigns it to the DefaultGroup field.
func (o *SystemSettings) SetDefaultGroup(v int32) {
	o.DefaultGroup.Set(&v)
}
// SetDefaultGroupNil sets the value for DefaultGroup to be an explicit nil
func (o *SystemSettings) SetDefaultGroupNil() {
	o.DefaultGroup.Set(nil)
}

// UnsetDefaultGroup ensures that no value is present for DefaultGroup, not even an explicit nil
func (o *SystemSettings) UnsetDefaultGroup() {
	o.DefaultGroup.Unset()
}

// GetDefaultGroupRole returns the DefaultGroupRole field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SystemSettings) GetDefaultGroupRole() int32 {
	if o == nil || IsNil(o.DefaultGroupRole.Get()) {
		var ret int32
		return ret
	}
	return *o.DefaultGroupRole.Get()
}

// GetDefaultGroupRoleOk returns a tuple with the DefaultGroupRole field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SystemSettings) GetDefaultGroupRoleOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.DefaultGroupRole.Get(), o.DefaultGroupRole.IsSet()
}

// HasDefaultGroupRole returns a boolean if a field has been set.
func (o *SystemSettings) HasDefaultGroupRole() bool {
	if o != nil && o.DefaultGroupRole.IsSet() {
		return true
	}

	return false
}

// SetDefaultGroupRole gets a reference to the given NullableInt32 and assigns it to the DefaultGroupRole field.
func (o *SystemSettings) SetDefaultGroupRole(v int32) {
	o.DefaultGroupRole.Set(&v)
}
// SetDefaultGroupRoleNil sets the value for DefaultGroupRole to be an explicit nil
func (o *SystemSettings) SetDefaultGroupRoleNil() {
	o.DefaultGroupRole.Set(nil)
}

// UnsetDefaultGroupRole ensures that no value is present for DefaultGroupRole, not even an explicit nil
func (o *SystemSettings) UnsetDefaultGroupRole() {
	o.DefaultGroupRole.Unset()
}

func (o SystemSettings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SystemSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.EnableDeduplication) {
		toSerialize["enable_deduplication"] = o.EnableDeduplication
	}
	if !IsNil(o.DeleteDuplicates) {
		toSerialize["delete_duplicates"] = o.DeleteDuplicates
	}
	if o.MaxDupes.IsSet() {
		toSerialize["max_dupes"] = o.MaxDupes.Get()
	}
	if !IsNil(o.EmailFrom) {
		toSerialize["email_from"] = o.EmailFrom
	}
	if !IsNil(o.EnableJira) {
		toSerialize["enable_jira"] = o.EnableJira
	}
	if !IsNil(o.EnableJiraWebHook) {
		toSerialize["enable_jira_web_hook"] = o.EnableJiraWebHook
	}
	if !IsNil(o.DisableJiraWebhookSecret) {
		toSerialize["disable_jira_webhook_secret"] = o.DisableJiraWebhookSecret
	}
	if o.JiraWebhookSecret.IsSet() {
		toSerialize["jira_webhook_secret"] = o.JiraWebhookSecret.Get()
	}
	if o.JiraMinimumSeverity.IsSet() {
		toSerialize["jira_minimum_severity"] = o.JiraMinimumSeverity.Get()
	}
	if o.JiraLabels.IsSet() {
		toSerialize["jira_labels"] = o.JiraLabels.Get()
	}
	if !IsNil(o.AddVulnerabilityIdToJiraLabel) {
		toSerialize["add_vulnerability_id_to_jira_label"] = o.AddVulnerabilityIdToJiraLabel
	}
	if !IsNil(o.EnableGithub) {
		toSerialize["enable_github"] = o.EnableGithub
	}
	if !IsNil(o.EnableSlackNotifications) {
		toSerialize["enable_slack_notifications"] = o.EnableSlackNotifications
	}
	if !IsNil(o.SlackChannel) {
		toSerialize["slack_channel"] = o.SlackChannel
	}
	if !IsNil(o.SlackToken) {
		toSerialize["slack_token"] = o.SlackToken
	}
	if !IsNil(o.SlackUsername) {
		toSerialize["slack_username"] = o.SlackUsername
	}
	if !IsNil(o.EnableMsteamsNotifications) {
		toSerialize["enable_msteams_notifications"] = o.EnableMsteamsNotifications
	}
	if !IsNil(o.MsteamsUrl) {
		toSerialize["msteams_url"] = o.MsteamsUrl
	}
	if !IsNil(o.EnableMailNotifications) {
		toSerialize["enable_mail_notifications"] = o.EnableMailNotifications
	}
	if !IsNil(o.MailNotificationsTo) {
		toSerialize["mail_notifications_to"] = o.MailNotificationsTo
	}
	if !IsNil(o.FalsePositiveHistory) {
		toSerialize["false_positive_history"] = o.FalsePositiveHistory
	}
	if !IsNil(o.RetroactiveFalsePositiveHistory) {
		toSerialize["retroactive_false_positive_history"] = o.RetroactiveFalsePositiveHistory
	}
	if !IsNil(o.UrlPrefix) {
		toSerialize["url_prefix"] = o.UrlPrefix
	}
	if !IsNil(o.TeamName) {
		toSerialize["team_name"] = o.TeamName
	}
	if !IsNil(o.TimeZone) {
		toSerialize["time_zone"] = o.TimeZone
	}
	if !IsNil(o.EnableProductGrade) {
		toSerialize["enable_product_grade"] = o.EnableProductGrade
	}
	if !IsNil(o.ProductGrade) {
		toSerialize["product_grade"] = o.ProductGrade
	}
	if !IsNil(o.ProductGradeA) {
		toSerialize["product_grade_a"] = o.ProductGradeA
	}
	if !IsNil(o.ProductGradeB) {
		toSerialize["product_grade_b"] = o.ProductGradeB
	}
	if !IsNil(o.ProductGradeC) {
		toSerialize["product_grade_c"] = o.ProductGradeC
	}
	if !IsNil(o.ProductGradeD) {
		toSerialize["product_grade_d"] = o.ProductGradeD
	}
	if !IsNil(o.ProductGradeF) {
		toSerialize["product_grade_f"] = o.ProductGradeF
	}
	if !IsNil(o.EnableProductTagInheritance) {
		toSerialize["enable_product_tag_inheritance"] = o.EnableProductTagInheritance
	}
	if !IsNil(o.EnableBenchmark) {
		toSerialize["enable_benchmark"] = o.EnableBenchmark
	}
	if !IsNil(o.EnableTemplateMatch) {
		toSerialize["enable_template_match"] = o.EnableTemplateMatch
	}
	if !IsNil(o.EngagementAutoClose) {
		toSerialize["engagement_auto_close"] = o.EngagementAutoClose
	}
	if !IsNil(o.EngagementAutoCloseDays) {
		toSerialize["engagement_auto_close_days"] = o.EngagementAutoCloseDays
	}
	if !IsNil(o.EnableFindingSla) {
		toSerialize["enable_finding_sla"] = o.EnableFindingSla
	}
	if !IsNil(o.EnableNotifySlaActive) {
		toSerialize["enable_notify_sla_active"] = o.EnableNotifySlaActive
	}
	if !IsNil(o.EnableNotifySlaActiveVerified) {
		toSerialize["enable_notify_sla_active_verified"] = o.EnableNotifySlaActiveVerified
	}
	if !IsNil(o.EnableNotifySlaJiraOnly) {
		toSerialize["enable_notify_sla_jira_only"] = o.EnableNotifySlaJiraOnly
	}
	if !IsNil(o.EnableNotifySlaExponentialBackoff) {
		toSerialize["enable_notify_sla_exponential_backoff"] = o.EnableNotifySlaExponentialBackoff
	}
	if !IsNil(o.AllowAnonymousSurveyRepsonse) {
		toSerialize["allow_anonymous_survey_repsonse"] = o.AllowAnonymousSurveyRepsonse
	}
	if !IsNil(o.Credentials) {
		toSerialize["credentials"] = o.Credentials
	}
	if !IsNil(o.Disclaimer) {
		toSerialize["disclaimer"] = o.Disclaimer
	}
	if o.RiskAcceptanceFormDefaultDays.IsSet() {
		toSerialize["risk_acceptance_form_default_days"] = o.RiskAcceptanceFormDefaultDays.Get()
	}
	if o.RiskAcceptanceNotifyBeforeExpiration.IsSet() {
		toSerialize["risk_acceptance_notify_before_expiration"] = o.RiskAcceptanceNotifyBeforeExpiration.Get()
	}
	if !IsNil(o.EnableCredentials) {
		toSerialize["enable_credentials"] = o.EnableCredentials
	}
	if !IsNil(o.EnableQuestionnaires) {
		toSerialize["enable_questionnaires"] = o.EnableQuestionnaires
	}
	if !IsNil(o.EnableChecklists) {
		toSerialize["enable_checklists"] = o.EnableChecklists
	}
	if !IsNil(o.EnableEndpointMetadataImport) {
		toSerialize["enable_endpoint_metadata_import"] = o.EnableEndpointMetadataImport
	}
	if !IsNil(o.EnableUserProfileEditable) {
		toSerialize["enable_user_profile_editable"] = o.EnableUserProfileEditable
	}
	if !IsNil(o.EnableProductTrackingFiles) {
		toSerialize["enable_product_tracking_files"] = o.EnableProductTrackingFiles
	}
	if !IsNil(o.EnableFindingGroups) {
		toSerialize["enable_finding_groups"] = o.EnableFindingGroups
	}
	if !IsNil(o.EnableCalendar) {
		toSerialize["enable_calendar"] = o.EnableCalendar
	}
	if !IsNil(o.DefaultGroupEmailPattern) {
		toSerialize["default_group_email_pattern"] = o.DefaultGroupEmailPattern
	}
	if !IsNil(o.MinimumPasswordLength) {
		toSerialize["minimum_password_length"] = o.MinimumPasswordLength
	}
	if !IsNil(o.MaximumPasswordLength) {
		toSerialize["maximum_password_length"] = o.MaximumPasswordLength
	}
	if !IsNil(o.NumberCharacterRequired) {
		toSerialize["number_character_required"] = o.NumberCharacterRequired
	}
	if !IsNil(o.SpecialCharacterRequired) {
		toSerialize["special_character_required"] = o.SpecialCharacterRequired
	}
	if !IsNil(o.LowercaseCharacterRequired) {
		toSerialize["lowercase_character_required"] = o.LowercaseCharacterRequired
	}
	if !IsNil(o.UppercaseCharacterRequired) {
		toSerialize["uppercase_character_required"] = o.UppercaseCharacterRequired
	}
	if !IsNil(o.NonCommonPasswordRequired) {
		toSerialize["non_common_password_required"] = o.NonCommonPasswordRequired
	}
	if !IsNil(o.ApiExposeErrorDetails) {
		toSerialize["api_expose_error_details"] = o.ApiExposeErrorDetails
	}
	if o.DefaultGroup.IsSet() {
		toSerialize["default_group"] = o.DefaultGroup.Get()
	}
	if o.DefaultGroupRole.IsSet() {
		toSerialize["default_group_role"] = o.DefaultGroupRole.Get()
	}
	return toSerialize, nil
}

func (o *SystemSettings) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSystemSettings := _SystemSettings{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSystemSettings)

	if err != nil {
		return err
	}

	*o = SystemSettings(varSystemSettings)

	return err
}

type NullableSystemSettings struct {
	value *SystemSettings
	isSet bool
}

func (v NullableSystemSettings) Get() *SystemSettings {
	return v.value
}

func (v *NullableSystemSettings) Set(val *SystemSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableSystemSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableSystemSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSystemSettings(val *SystemSettings) *NullableSystemSettings {
	return &NullableSystemSettings{value: val, isSet: true}
}

func (v NullableSystemSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSystemSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


