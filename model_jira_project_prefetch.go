/*
Defect Dojo API v2

Defect Dojo - Open Source vulnerability Management made easy. Prefetch related parameters/responses not yet in the schema.

API version: 2.38.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package defectdojo

import (
	"encoding/json"
)

// checks if the JIRAProjectPrefetch type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JIRAProjectPrefetch{}

// JIRAProjectPrefetch struct for JIRAProjectPrefetch
type JIRAProjectPrefetch struct {
	Engagement *map[string]FindingEngagement `json:"engagement,omitempty"`
	JiraInstance *map[string]JIRAInstance `json:"jira_instance,omitempty"`
	Product *map[string]Product `json:"product,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _JIRAProjectPrefetch JIRAProjectPrefetch

// NewJIRAProjectPrefetch instantiates a new JIRAProjectPrefetch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJIRAProjectPrefetch() *JIRAProjectPrefetch {
	this := JIRAProjectPrefetch{}
	return &this
}

// NewJIRAProjectPrefetchWithDefaults instantiates a new JIRAProjectPrefetch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJIRAProjectPrefetchWithDefaults() *JIRAProjectPrefetch {
	this := JIRAProjectPrefetch{}
	return &this
}

// GetEngagement returns the Engagement field value if set, zero value otherwise.
func (o *JIRAProjectPrefetch) GetEngagement() map[string]FindingEngagement {
	if o == nil || IsNil(o.Engagement) {
		var ret map[string]FindingEngagement
		return ret
	}
	return *o.Engagement
}

// GetEngagementOk returns a tuple with the Engagement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JIRAProjectPrefetch) GetEngagementOk() (*map[string]FindingEngagement, bool) {
	if o == nil || IsNil(o.Engagement) {
		return nil, false
	}
	return o.Engagement, true
}

// HasEngagement returns a boolean if a field has been set.
func (o *JIRAProjectPrefetch) HasEngagement() bool {
	if o != nil && !IsNil(o.Engagement) {
		return true
	}

	return false
}

// SetEngagement gets a reference to the given map[string]FindingEngagement and assigns it to the Engagement field.
func (o *JIRAProjectPrefetch) SetEngagement(v map[string]FindingEngagement) {
	o.Engagement = &v
}

// GetJiraInstance returns the JiraInstance field value if set, zero value otherwise.
func (o *JIRAProjectPrefetch) GetJiraInstance() map[string]JIRAInstance {
	if o == nil || IsNil(o.JiraInstance) {
		var ret map[string]JIRAInstance
		return ret
	}
	return *o.JiraInstance
}

// GetJiraInstanceOk returns a tuple with the JiraInstance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JIRAProjectPrefetch) GetJiraInstanceOk() (*map[string]JIRAInstance, bool) {
	if o == nil || IsNil(o.JiraInstance) {
		return nil, false
	}
	return o.JiraInstance, true
}

// HasJiraInstance returns a boolean if a field has been set.
func (o *JIRAProjectPrefetch) HasJiraInstance() bool {
	if o != nil && !IsNil(o.JiraInstance) {
		return true
	}

	return false
}

// SetJiraInstance gets a reference to the given map[string]JIRAInstance and assigns it to the JiraInstance field.
func (o *JIRAProjectPrefetch) SetJiraInstance(v map[string]JIRAInstance) {
	o.JiraInstance = &v
}

// GetProduct returns the Product field value if set, zero value otherwise.
func (o *JIRAProjectPrefetch) GetProduct() map[string]Product {
	if o == nil || IsNil(o.Product) {
		var ret map[string]Product
		return ret
	}
	return *o.Product
}

// GetProductOk returns a tuple with the Product field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JIRAProjectPrefetch) GetProductOk() (*map[string]Product, bool) {
	if o == nil || IsNil(o.Product) {
		return nil, false
	}
	return o.Product, true
}

// HasProduct returns a boolean if a field has been set.
func (o *JIRAProjectPrefetch) HasProduct() bool {
	if o != nil && !IsNil(o.Product) {
		return true
	}

	return false
}

// SetProduct gets a reference to the given map[string]Product and assigns it to the Product field.
func (o *JIRAProjectPrefetch) SetProduct(v map[string]Product) {
	o.Product = &v
}

func (o JIRAProjectPrefetch) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JIRAProjectPrefetch) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Engagement) {
		toSerialize["engagement"] = o.Engagement
	}
	if !IsNil(o.JiraInstance) {
		toSerialize["jira_instance"] = o.JiraInstance
	}
	if !IsNil(o.Product) {
		toSerialize["product"] = o.Product
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *JIRAProjectPrefetch) UnmarshalJSON(data []byte) (err error) {
	varJIRAProjectPrefetch := _JIRAProjectPrefetch{}

	err = json.Unmarshal(data, &varJIRAProjectPrefetch)

	if err != nil {
		return err
	}

	*o = JIRAProjectPrefetch(varJIRAProjectPrefetch)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "engagement")
		delete(additionalProperties, "jira_instance")
		delete(additionalProperties, "product")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableJIRAProjectPrefetch struct {
	value *JIRAProjectPrefetch
	isSet bool
}

func (v NullableJIRAProjectPrefetch) Get() *JIRAProjectPrefetch {
	return v.value
}

func (v *NullableJIRAProjectPrefetch) Set(val *JIRAProjectPrefetch) {
	v.value = val
	v.isSet = true
}

func (v NullableJIRAProjectPrefetch) IsSet() bool {
	return v.isSet
}

func (v *NullableJIRAProjectPrefetch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJIRAProjectPrefetch(val *JIRAProjectPrefetch) *NullableJIRAProjectPrefetch {
	return &NullableJIRAProjectPrefetch{value: val, isSet: true}
}

func (v NullableJIRAProjectPrefetch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJIRAProjectPrefetch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


