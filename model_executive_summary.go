/*
Defect Dojo API v2

Defect Dojo - Open Source vulnerability Management made easy. Prefetch related parameters/responses not yet in the schema.

API version: 2.33.5
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package defectdojo

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the ExecutiveSummary type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExecutiveSummary{}

// ExecutiveSummary struct for ExecutiveSummary
type ExecutiveSummary struct {
	EngagementName string `json:"engagement_name"`
	EngagementTargetStart string `json:"engagement_target_start"`
	EngagementTargetEnd string `json:"engagement_target_end"`
	TestTypeName string `json:"test_type_name"`
	TestTargetStart time.Time `json:"test_target_start"`
	TestTargetEnd time.Time `json:"test_target_end"`
	TestEnvironmentName string `json:"test_environment_name"`
	TestStrategyRef string `json:"test_strategy_ref"`
	TotalFindings int32 `json:"total_findings"`
}

type _ExecutiveSummary ExecutiveSummary

// NewExecutiveSummary instantiates a new ExecutiveSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExecutiveSummary(engagementName string, engagementTargetStart string, engagementTargetEnd string, testTypeName string, testTargetStart time.Time, testTargetEnd time.Time, testEnvironmentName string, testStrategyRef string, totalFindings int32) *ExecutiveSummary {
	this := ExecutiveSummary{}
	this.EngagementName = engagementName
	this.EngagementTargetStart = engagementTargetStart
	this.EngagementTargetEnd = engagementTargetEnd
	this.TestTypeName = testTypeName
	this.TestTargetStart = testTargetStart
	this.TestTargetEnd = testTargetEnd
	this.TestEnvironmentName = testEnvironmentName
	this.TestStrategyRef = testStrategyRef
	this.TotalFindings = totalFindings
	return &this
}

// NewExecutiveSummaryWithDefaults instantiates a new ExecutiveSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExecutiveSummaryWithDefaults() *ExecutiveSummary {
	this := ExecutiveSummary{}
	return &this
}

// GetEngagementName returns the EngagementName field value
func (o *ExecutiveSummary) GetEngagementName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EngagementName
}

// GetEngagementNameOk returns a tuple with the EngagementName field value
// and a boolean to check if the value has been set.
func (o *ExecutiveSummary) GetEngagementNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EngagementName, true
}

// SetEngagementName sets field value
func (o *ExecutiveSummary) SetEngagementName(v string) {
	o.EngagementName = v
}

// GetEngagementTargetStart returns the EngagementTargetStart field value
func (o *ExecutiveSummary) GetEngagementTargetStart() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EngagementTargetStart
}

// GetEngagementTargetStartOk returns a tuple with the EngagementTargetStart field value
// and a boolean to check if the value has been set.
func (o *ExecutiveSummary) GetEngagementTargetStartOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EngagementTargetStart, true
}

// SetEngagementTargetStart sets field value
func (o *ExecutiveSummary) SetEngagementTargetStart(v string) {
	o.EngagementTargetStart = v
}

// GetEngagementTargetEnd returns the EngagementTargetEnd field value
func (o *ExecutiveSummary) GetEngagementTargetEnd() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EngagementTargetEnd
}

// GetEngagementTargetEndOk returns a tuple with the EngagementTargetEnd field value
// and a boolean to check if the value has been set.
func (o *ExecutiveSummary) GetEngagementTargetEndOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EngagementTargetEnd, true
}

// SetEngagementTargetEnd sets field value
func (o *ExecutiveSummary) SetEngagementTargetEnd(v string) {
	o.EngagementTargetEnd = v
}

// GetTestTypeName returns the TestTypeName field value
func (o *ExecutiveSummary) GetTestTypeName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TestTypeName
}

// GetTestTypeNameOk returns a tuple with the TestTypeName field value
// and a boolean to check if the value has been set.
func (o *ExecutiveSummary) GetTestTypeNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TestTypeName, true
}

// SetTestTypeName sets field value
func (o *ExecutiveSummary) SetTestTypeName(v string) {
	o.TestTypeName = v
}

// GetTestTargetStart returns the TestTargetStart field value
func (o *ExecutiveSummary) GetTestTargetStart() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.TestTargetStart
}

// GetTestTargetStartOk returns a tuple with the TestTargetStart field value
// and a boolean to check if the value has been set.
func (o *ExecutiveSummary) GetTestTargetStartOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TestTargetStart, true
}

// SetTestTargetStart sets field value
func (o *ExecutiveSummary) SetTestTargetStart(v time.Time) {
	o.TestTargetStart = v
}

// GetTestTargetEnd returns the TestTargetEnd field value
func (o *ExecutiveSummary) GetTestTargetEnd() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.TestTargetEnd
}

// GetTestTargetEndOk returns a tuple with the TestTargetEnd field value
// and a boolean to check if the value has been set.
func (o *ExecutiveSummary) GetTestTargetEndOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TestTargetEnd, true
}

// SetTestTargetEnd sets field value
func (o *ExecutiveSummary) SetTestTargetEnd(v time.Time) {
	o.TestTargetEnd = v
}

// GetTestEnvironmentName returns the TestEnvironmentName field value
func (o *ExecutiveSummary) GetTestEnvironmentName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TestEnvironmentName
}

// GetTestEnvironmentNameOk returns a tuple with the TestEnvironmentName field value
// and a boolean to check if the value has been set.
func (o *ExecutiveSummary) GetTestEnvironmentNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TestEnvironmentName, true
}

// SetTestEnvironmentName sets field value
func (o *ExecutiveSummary) SetTestEnvironmentName(v string) {
	o.TestEnvironmentName = v
}

// GetTestStrategyRef returns the TestStrategyRef field value
func (o *ExecutiveSummary) GetTestStrategyRef() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TestStrategyRef
}

// GetTestStrategyRefOk returns a tuple with the TestStrategyRef field value
// and a boolean to check if the value has been set.
func (o *ExecutiveSummary) GetTestStrategyRefOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TestStrategyRef, true
}

// SetTestStrategyRef sets field value
func (o *ExecutiveSummary) SetTestStrategyRef(v string) {
	o.TestStrategyRef = v
}

// GetTotalFindings returns the TotalFindings field value
func (o *ExecutiveSummary) GetTotalFindings() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TotalFindings
}

// GetTotalFindingsOk returns a tuple with the TotalFindings field value
// and a boolean to check if the value has been set.
func (o *ExecutiveSummary) GetTotalFindingsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalFindings, true
}

// SetTotalFindings sets field value
func (o *ExecutiveSummary) SetTotalFindings(v int32) {
	o.TotalFindings = v
}

func (o ExecutiveSummary) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExecutiveSummary) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["engagement_name"] = o.EngagementName
	toSerialize["engagement_target_start"] = o.EngagementTargetStart
	toSerialize["engagement_target_end"] = o.EngagementTargetEnd
	toSerialize["test_type_name"] = o.TestTypeName
	toSerialize["test_target_start"] = o.TestTargetStart
	toSerialize["test_target_end"] = o.TestTargetEnd
	toSerialize["test_environment_name"] = o.TestEnvironmentName
	toSerialize["test_strategy_ref"] = o.TestStrategyRef
	toSerialize["total_findings"] = o.TotalFindings
	return toSerialize, nil
}

func (o *ExecutiveSummary) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"engagement_name",
		"engagement_target_start",
		"engagement_target_end",
		"test_type_name",
		"test_target_start",
		"test_target_end",
		"test_environment_name",
		"test_strategy_ref",
		"total_findings",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varExecutiveSummary := _ExecutiveSummary{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varExecutiveSummary)

	if err != nil {
		return err
	}

	*o = ExecutiveSummary(varExecutiveSummary)

	return err
}

type NullableExecutiveSummary struct {
	value *ExecutiveSummary
	isSet bool
}

func (v NullableExecutiveSummary) Get() *ExecutiveSummary {
	return v.value
}

func (v *NullableExecutiveSummary) Set(val *ExecutiveSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableExecutiveSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableExecutiveSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExecutiveSummary(val *ExecutiveSummary) *NullableExecutiveSummary {
	return &NullableExecutiveSummary{value: val, isSet: true}
}

func (v NullableExecutiveSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExecutiveSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


