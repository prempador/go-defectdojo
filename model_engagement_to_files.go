/*
Defect Dojo API v2

Defect Dojo - Open Source vulnerability Management made easy. Prefetch related parameters/responses not yet in the schema.

API version: 2.38.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package defectdojo

import (
	"encoding/json"
	"fmt"
)

// checks if the EngagementToFiles type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EngagementToFiles{}

// EngagementToFiles struct for EngagementToFiles
type EngagementToFiles struct {
	EngagementId NullableInt32 `json:"engagement_id"`
	Files []File `json:"files"`
	AdditionalProperties map[string]interface{}
}

type _EngagementToFiles EngagementToFiles

// NewEngagementToFiles instantiates a new EngagementToFiles object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEngagementToFiles(engagementId NullableInt32, files []File) *EngagementToFiles {
	this := EngagementToFiles{}
	this.EngagementId = engagementId
	this.Files = files
	return &this
}

// NewEngagementToFilesWithDefaults instantiates a new EngagementToFiles object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEngagementToFilesWithDefaults() *EngagementToFiles {
	this := EngagementToFiles{}
	return &this
}

// GetEngagementId returns the EngagementId field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *EngagementToFiles) GetEngagementId() int32 {
	if o == nil || o.EngagementId.Get() == nil {
		var ret int32
		return ret
	}

	return *o.EngagementId.Get()
}

// GetEngagementIdOk returns a tuple with the EngagementId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EngagementToFiles) GetEngagementIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.EngagementId.Get(), o.EngagementId.IsSet()
}

// SetEngagementId sets field value
func (o *EngagementToFiles) SetEngagementId(v int32) {
	o.EngagementId.Set(&v)
}


// GetFiles returns the Files field value
func (o *EngagementToFiles) GetFiles() []File {
	if o == nil {
		var ret []File
		return ret
	}

	return o.Files
}

// GetFilesOk returns a tuple with the Files field value
// and a boolean to check if the value has been set.
func (o *EngagementToFiles) GetFilesOk() ([]File, bool) {
	if o == nil {
		return nil, false
	}
	return o.Files, true
}

// SetFiles sets field value
func (o *EngagementToFiles) SetFiles(v []File) {
	o.Files = v
}


func (o EngagementToFiles) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EngagementToFiles) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["engagement_id"] = o.EngagementId.Get()
	toSerialize["files"] = o.Files

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EngagementToFiles) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"engagement_id",
		"files",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{} {
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == ""{
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil{
			return err
		}
	}
	varEngagementToFiles := _EngagementToFiles{}

	err = json.Unmarshal(data, &varEngagementToFiles)

	if err != nil {
		return err
	}

	*o = EngagementToFiles(varEngagementToFiles)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "engagement_id")
		delete(additionalProperties, "files")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEngagementToFiles struct {
	value *EngagementToFiles
	isSet bool
}

func (v NullableEngagementToFiles) Get() *EngagementToFiles {
	return v.value
}

func (v *NullableEngagementToFiles) Set(val *EngagementToFiles) {
	v.value = val
	v.isSet = true
}

func (v NullableEngagementToFiles) IsSet() bool {
	return v.isSet
}

func (v *NullableEngagementToFiles) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEngagementToFiles(val *EngagementToFiles) *NullableEngagementToFiles {
	return &NullableEngagementToFiles{value: val, isSet: true}
}

func (v NullableEngagementToFiles) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEngagementToFiles) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


