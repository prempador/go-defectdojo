/*
Defect Dojo API v2

Defect Dojo - Open Source vulnerability Management made easy. Prefetch related parameters/responses not yet in the schema.

API version: 2.31.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package defectdojo

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the Finding type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Finding{}

// Finding struct for Finding
type Finding struct {
	Id int32 `json:"id"`
	Tags []string `json:"tags,omitempty"`
	RequestResponse BurpRawRequestResponse `json:"request_response"`
	AcceptedRisks []RiskAcceptance `json:"accepted_risks"`
	PushToJira *bool `json:"push_to_jira,omitempty"`
	Age int32 `json:"age"`
	SlaDaysRemaining int32 `json:"sla_days_remaining"`
	FindingMeta []FindingMeta `json:"finding_meta"`
	RelatedFields FindingRelatedFields `json:"related_fields"`
	JiraCreation time.Time `json:"jira_creation"`
	JiraChange time.Time `json:"jira_change"`
	DisplayStatus string `json:"display_status"`
	FindingGroups []FindingGroup `json:"finding_groups"`
	VulnerabilityIds []VulnerabilityId `json:"vulnerability_ids,omitempty"`
	Reporter *int32 `json:"reporter,omitempty"`
	// A short description of the flaw.
	Title string `json:"title"`
	// The date the flaw was discovered.
	Date *string `json:"date,omitempty"`
	// (readonly)The date used as start date for SLA calculation. Set by expiring risk acceptances. Empty by default, causing a fallback to 'date'.
	SlaStartDate NullableString `json:"sla_start_date,omitempty"`
	// (readonly)The date SLA expires for this finding. Empty by default, causing a fallback to 'date'.
	SlaExpirationDate NullableString `json:"sla_expiration_date,omitempty"`
	// The CWE number associated with this flaw.
	Cwe NullableInt32 `json:"cwe,omitempty"`
	// Common Vulnerability Scoring System version 3 (CVSSv3) score associated with this flaw.
	Cvssv3 NullableString `json:"cvssv3,omitempty"`
	// Numerical CVSSv3 score for the vulnerability. If the vector is given, the score is updated while saving the finding
	Cvssv3Score NullableFloat64 `json:"cvssv3_score,omitempty"`
	// External reference that provides more information about this flaw.
	Url NullableString `json:"url"`
	// The severity level of this flaw (Critical, High, Medium, Low, Informational).
	Severity string `json:"severity"`
	// Longer more descriptive information about the flaw.
	Description string `json:"description"`
	// Text describing how to best fix the flaw.
	Mitigation NullableString `json:"mitigation,omitempty"`
	// Text describing the impact this flaw has on systems, products, enterprise, etc.
	Impact NullableString `json:"impact,omitempty"`
	// Text describing the steps that must be followed in order to reproduce the flaw / bug.
	StepsToReproduce NullableString `json:"steps_to_reproduce,omitempty"`
	// Text describing why a certain severity was associated with this flaw.
	SeverityJustification NullableString `json:"severity_justification,omitempty"`
	// The external documentation available for this flaw.
	References NullableString `json:"references,omitempty"`
	// Denotes if this flaw is active or not.
	Active *bool `json:"active,omitempty"`
	// Denotes if this flaw has been manually verified by the tester.
	Verified *bool `json:"verified,omitempty"`
	// Denotes if this flaw has been deemed a false positive by the tester.
	FalseP *bool `json:"false_p,omitempty"`
	// Denotes if this flaw is a duplicate of other flaws reported.
	Duplicate *bool `json:"duplicate,omitempty"`
	// Denotes if this flaw falls outside the scope of the test and/or engagement.
	OutOfScope *bool `json:"out_of_scope,omitempty"`
	// Denotes if this finding has been marked as an accepted risk.
	RiskAccepted *bool `json:"risk_accepted,omitempty"`
	// Denotes is this flaw is currently being reviewed.
	UnderReview *bool `json:"under_review,omitempty"`
	// Timestamp of latest status update (change in status related fields).
	LastStatusUpdate NullableTime `json:"last_status_update"`
	// Denotes if this finding is under defect review.
	UnderDefectReview *bool `json:"under_defect_review,omitempty"`
	// Denotes if this flaw has been fixed.
	IsMitigated *bool `json:"is_mitigated,omitempty"`
	ThreadId int32 `json:"thread_id"`
	// Denotes if this flaw has been fixed by storing the date it was fixed.
	Mitigated NullableTime `json:"mitigated"`
	// The numerical representation of the severity (S0, S1, S2, S3, S4).
	NumericalSeverity string `json:"numerical_severity"`
	// Provides the date the flaw was last 'touched' by a tester.
	LastReviewed NullableTime `json:"last_reviewed"`
	// Parameter used to trigger the issue (DAST).
	Param NullableString `json:"param"`
	// Payload used to attack the service / application and trigger the bug / problem.
	Payload NullableString `json:"payload"`
	// A hash over a configurable set of fields that is used for findings deduplication.
	HashCode NullableString `json:"hash_code"`
	// Source line number of the attack vector.
	Line NullableInt32 `json:"line,omitempty"`
	// Identified file(s) containing the flaw.
	FilePath NullableString `json:"file_path,omitempty"`
	// Name of the affected component (library name, part of a system, ...).
	ComponentName NullableString `json:"component_name,omitempty"`
	// Version of the affected component.
	ComponentVersion NullableString `json:"component_version,omitempty"`
	// Flaw has been detected from a Static Application Security Testing tool (SAST).
	StaticFinding *bool `json:"static_finding,omitempty"`
	// Flaw has been detected from a Dynamic Application Security Testing tool (DAST).
	DynamicFinding *bool `json:"dynamic_finding,omitempty"`
	// The date the finding was created inside DefectDojo.
	Created NullableTime `json:"created"`
	// Confidence level of vulnerability which is supplied by the scanner.
	ScannerConfidence NullableInt32 `json:"scanner_confidence"`
	// Vulnerability technical id from the source tool. Allows to track unique vulnerabilities.
	UniqueIdFromTool NullableString `json:"unique_id_from_tool,omitempty"`
	// Non-unique technical id from the source tool associated with the vulnerability type.
	VulnIdFromTool NullableString `json:"vuln_id_from_tool,omitempty"`
	// Source object (variable, function...) of the attack vector.
	SastSourceObject NullableString `json:"sast_source_object,omitempty"`
	// Sink object (variable, function...) of the attack vector.
	SastSinkObject NullableString `json:"sast_sink_object,omitempty"`
	// Source line number of the attack vector.
	SastSourceLine NullableInt32 `json:"sast_source_line,omitempty"`
	// Source file path of the attack vector.
	SastSourceFilePath NullableString `json:"sast_source_file_path,omitempty"`
	// Number of occurences in the source tool when several vulnerabilites were found and aggregated by the scanner.
	NbOccurences NullableInt32 `json:"nb_occurences,omitempty"`
	// Date when this vulnerability was made publicly available.
	PublishDate NullableString `json:"publish_date,omitempty"`
	// A service is a self-contained piece of functionality within a Product. This is an optional field which is used in deduplication of findings when set.
	Service NullableString `json:"service,omitempty"`
	// The date the flaw is expected to be remediated.
	PlannedRemediationDate NullableString `json:"planned_remediation_date,omitempty"`
	// The target version when the vulnerability should be fixed / remediated
	PlannedRemediationVersion NullableString `json:"planned_remediation_version,omitempty"`
	// Effort for fixing / remediating the vulnerability (Low, Medium, High)
	EffortForFixing NullableString `json:"effort_for_fixing,omitempty"`
	// The test that is associated with this flaw.
	Test int32 `json:"test"`
	// Link to the original finding if this finding is a duplicate.
	DuplicateFinding NullableInt32 `json:"duplicate_finding"`
	// Documents who requested a review for this finding.
	ReviewRequestedBy NullableInt32 `json:"review_requested_by,omitempty"`
	// Documents who requested a defect review for this flaw.
	DefectReviewRequestedBy NullableInt32 `json:"defect_review_requested_by,omitempty"`
	// Documents who has marked this flaw as fixed.
	MitigatedBy NullableInt32 `json:"mitigated_by"`
	// Provides the person who last reviewed the flaw.
	LastReviewedBy NullableInt32 `json:"last_reviewed_by"`
	// The SonarQube issue associated with this finding.
	SonarqubeIssue NullableInt32 `json:"sonarqube_issue,omitempty"`
	// The hosts within the product that are susceptible to this flaw. + The status of the endpoint associated with this flaw (Vulnerable, Mitigated, ...).
	Endpoints []int32 `json:"endpoints"`
	// Documents who reviewed the flaw.
	Reviewers []int32 `json:"reviewers,omitempty"`
	Notes []Note `json:"notes"`
	// Files(s) related to the flaw.
	Files []int32 `json:"files"`
	// The name of the scanner that identified the flaw.
	FoundBy []int32 `json:"found_by"`
	Prefetch *FindingPrefetch `json:"prefetch,omitempty"`
}

type _Finding Finding

// NewFinding instantiates a new Finding object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFinding(id int32, requestResponse BurpRawRequestResponse, acceptedRisks []RiskAcceptance, age int32, slaDaysRemaining int32, findingMeta []FindingMeta, relatedFields FindingRelatedFields, jiraCreation time.Time, jiraChange time.Time, displayStatus string, findingGroups []FindingGroup, title string, url NullableString, severity string, description string, lastStatusUpdate NullableTime, threadId int32, mitigated NullableTime, numericalSeverity string, lastReviewed NullableTime, param NullableString, payload NullableString, hashCode NullableString, created NullableTime, scannerConfidence NullableInt32, test int32, duplicateFinding NullableInt32, mitigatedBy NullableInt32, lastReviewedBy NullableInt32, endpoints []int32, notes []Note, files []int32, foundBy []int32) *Finding {
	this := Finding{}
	this.Id = id
	this.RequestResponse = requestResponse
	this.AcceptedRisks = acceptedRisks
	var pushToJira bool = false
	this.PushToJira = &pushToJira
	this.Age = age
	this.SlaDaysRemaining = slaDaysRemaining
	this.FindingMeta = findingMeta
	this.RelatedFields = relatedFields
	this.JiraCreation = jiraCreation
	this.JiraChange = jiraChange
	this.DisplayStatus = displayStatus
	this.FindingGroups = findingGroups
	this.Title = title
	this.Url = url
	this.Severity = severity
	this.Description = description
	this.LastStatusUpdate = lastStatusUpdate
	this.ThreadId = threadId
	this.Mitigated = mitigated
	this.NumericalSeverity = numericalSeverity
	this.LastReviewed = lastReviewed
	this.Param = param
	this.Payload = payload
	this.HashCode = hashCode
	this.Created = created
	this.ScannerConfidence = scannerConfidence
	this.Test = test
	this.DuplicateFinding = duplicateFinding
	this.MitigatedBy = mitigatedBy
	this.LastReviewedBy = lastReviewedBy
	this.Endpoints = endpoints
	this.Notes = notes
	this.Files = files
	this.FoundBy = foundBy
	return &this
}

// NewFindingWithDefaults instantiates a new Finding object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFindingWithDefaults() *Finding {
	this := Finding{}
	var pushToJira bool = false
	this.PushToJira = &pushToJira
	return &this
}

// GetId returns the Id field value
func (o *Finding) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Finding) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Finding) SetId(v int32) {
	o.Id = v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *Finding) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Finding) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *Finding) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *Finding) SetTags(v []string) {
	o.Tags = v
}

// GetRequestResponse returns the RequestResponse field value
func (o *Finding) GetRequestResponse() BurpRawRequestResponse {
	if o == nil {
		var ret BurpRawRequestResponse
		return ret
	}

	return o.RequestResponse
}

// GetRequestResponseOk returns a tuple with the RequestResponse field value
// and a boolean to check if the value has been set.
func (o *Finding) GetRequestResponseOk() (*BurpRawRequestResponse, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RequestResponse, true
}

// SetRequestResponse sets field value
func (o *Finding) SetRequestResponse(v BurpRawRequestResponse) {
	o.RequestResponse = v
}

// GetAcceptedRisks returns the AcceptedRisks field value
func (o *Finding) GetAcceptedRisks() []RiskAcceptance {
	if o == nil {
		var ret []RiskAcceptance
		return ret
	}

	return o.AcceptedRisks
}

// GetAcceptedRisksOk returns a tuple with the AcceptedRisks field value
// and a boolean to check if the value has been set.
func (o *Finding) GetAcceptedRisksOk() ([]RiskAcceptance, bool) {
	if o == nil {
		return nil, false
	}
	return o.AcceptedRisks, true
}

// SetAcceptedRisks sets field value
func (o *Finding) SetAcceptedRisks(v []RiskAcceptance) {
	o.AcceptedRisks = v
}

// GetPushToJira returns the PushToJira field value if set, zero value otherwise.
func (o *Finding) GetPushToJira() bool {
	if o == nil || IsNil(o.PushToJira) {
		var ret bool
		return ret
	}
	return *o.PushToJira
}

// GetPushToJiraOk returns a tuple with the PushToJira field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Finding) GetPushToJiraOk() (*bool, bool) {
	if o == nil || IsNil(o.PushToJira) {
		return nil, false
	}
	return o.PushToJira, true
}

// HasPushToJira returns a boolean if a field has been set.
func (o *Finding) HasPushToJira() bool {
	if o != nil && !IsNil(o.PushToJira) {
		return true
	}

	return false
}

// SetPushToJira gets a reference to the given bool and assigns it to the PushToJira field.
func (o *Finding) SetPushToJira(v bool) {
	o.PushToJira = &v
}

// GetAge returns the Age field value
func (o *Finding) GetAge() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Age
}

// GetAgeOk returns a tuple with the Age field value
// and a boolean to check if the value has been set.
func (o *Finding) GetAgeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Age, true
}

// SetAge sets field value
func (o *Finding) SetAge(v int32) {
	o.Age = v
}

// GetSlaDaysRemaining returns the SlaDaysRemaining field value
func (o *Finding) GetSlaDaysRemaining() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.SlaDaysRemaining
}

// GetSlaDaysRemainingOk returns a tuple with the SlaDaysRemaining field value
// and a boolean to check if the value has been set.
func (o *Finding) GetSlaDaysRemainingOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SlaDaysRemaining, true
}

// SetSlaDaysRemaining sets field value
func (o *Finding) SetSlaDaysRemaining(v int32) {
	o.SlaDaysRemaining = v
}

// GetFindingMeta returns the FindingMeta field value
func (o *Finding) GetFindingMeta() []FindingMeta {
	if o == nil {
		var ret []FindingMeta
		return ret
	}

	return o.FindingMeta
}

// GetFindingMetaOk returns a tuple with the FindingMeta field value
// and a boolean to check if the value has been set.
func (o *Finding) GetFindingMetaOk() ([]FindingMeta, bool) {
	if o == nil {
		return nil, false
	}
	return o.FindingMeta, true
}

// SetFindingMeta sets field value
func (o *Finding) SetFindingMeta(v []FindingMeta) {
	o.FindingMeta = v
}

// GetRelatedFields returns the RelatedFields field value
func (o *Finding) GetRelatedFields() FindingRelatedFields {
	if o == nil {
		var ret FindingRelatedFields
		return ret
	}

	return o.RelatedFields
}

// GetRelatedFieldsOk returns a tuple with the RelatedFields field value
// and a boolean to check if the value has been set.
func (o *Finding) GetRelatedFieldsOk() (*FindingRelatedFields, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RelatedFields, true
}

// SetRelatedFields sets field value
func (o *Finding) SetRelatedFields(v FindingRelatedFields) {
	o.RelatedFields = v
}

// GetJiraCreation returns the JiraCreation field value
func (o *Finding) GetJiraCreation() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.JiraCreation
}

// GetJiraCreationOk returns a tuple with the JiraCreation field value
// and a boolean to check if the value has been set.
func (o *Finding) GetJiraCreationOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.JiraCreation, true
}

// SetJiraCreation sets field value
func (o *Finding) SetJiraCreation(v time.Time) {
	o.JiraCreation = v
}

// GetJiraChange returns the JiraChange field value
func (o *Finding) GetJiraChange() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.JiraChange
}

// GetJiraChangeOk returns a tuple with the JiraChange field value
// and a boolean to check if the value has been set.
func (o *Finding) GetJiraChangeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.JiraChange, true
}

// SetJiraChange sets field value
func (o *Finding) SetJiraChange(v time.Time) {
	o.JiraChange = v
}

// GetDisplayStatus returns the DisplayStatus field value
func (o *Finding) GetDisplayStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DisplayStatus
}

// GetDisplayStatusOk returns a tuple with the DisplayStatus field value
// and a boolean to check if the value has been set.
func (o *Finding) GetDisplayStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DisplayStatus, true
}

// SetDisplayStatus sets field value
func (o *Finding) SetDisplayStatus(v string) {
	o.DisplayStatus = v
}

// GetFindingGroups returns the FindingGroups field value
func (o *Finding) GetFindingGroups() []FindingGroup {
	if o == nil {
		var ret []FindingGroup
		return ret
	}

	return o.FindingGroups
}

// GetFindingGroupsOk returns a tuple with the FindingGroups field value
// and a boolean to check if the value has been set.
func (o *Finding) GetFindingGroupsOk() ([]FindingGroup, bool) {
	if o == nil {
		return nil, false
	}
	return o.FindingGroups, true
}

// SetFindingGroups sets field value
func (o *Finding) SetFindingGroups(v []FindingGroup) {
	o.FindingGroups = v
}

// GetVulnerabilityIds returns the VulnerabilityIds field value if set, zero value otherwise.
func (o *Finding) GetVulnerabilityIds() []VulnerabilityId {
	if o == nil || IsNil(o.VulnerabilityIds) {
		var ret []VulnerabilityId
		return ret
	}
	return o.VulnerabilityIds
}

// GetVulnerabilityIdsOk returns a tuple with the VulnerabilityIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Finding) GetVulnerabilityIdsOk() ([]VulnerabilityId, bool) {
	if o == nil || IsNil(o.VulnerabilityIds) {
		return nil, false
	}
	return o.VulnerabilityIds, true
}

// HasVulnerabilityIds returns a boolean if a field has been set.
func (o *Finding) HasVulnerabilityIds() bool {
	if o != nil && !IsNil(o.VulnerabilityIds) {
		return true
	}

	return false
}

// SetVulnerabilityIds gets a reference to the given []VulnerabilityId and assigns it to the VulnerabilityIds field.
func (o *Finding) SetVulnerabilityIds(v []VulnerabilityId) {
	o.VulnerabilityIds = v
}

// GetReporter returns the Reporter field value if set, zero value otherwise.
func (o *Finding) GetReporter() int32 {
	if o == nil || IsNil(o.Reporter) {
		var ret int32
		return ret
	}
	return *o.Reporter
}

// GetReporterOk returns a tuple with the Reporter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Finding) GetReporterOk() (*int32, bool) {
	if o == nil || IsNil(o.Reporter) {
		return nil, false
	}
	return o.Reporter, true
}

// HasReporter returns a boolean if a field has been set.
func (o *Finding) HasReporter() bool {
	if o != nil && !IsNil(o.Reporter) {
		return true
	}

	return false
}

// SetReporter gets a reference to the given int32 and assigns it to the Reporter field.
func (o *Finding) SetReporter(v int32) {
	o.Reporter = &v
}

// GetTitle returns the Title field value
func (o *Finding) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *Finding) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *Finding) SetTitle(v string) {
	o.Title = v
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *Finding) GetDate() string {
	if o == nil || IsNil(o.Date) {
		var ret string
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Finding) GetDateOk() (*string, bool) {
	if o == nil || IsNil(o.Date) {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *Finding) HasDate() bool {
	if o != nil && !IsNil(o.Date) {
		return true
	}

	return false
}

// SetDate gets a reference to the given string and assigns it to the Date field.
func (o *Finding) SetDate(v string) {
	o.Date = &v
}

// GetSlaStartDate returns the SlaStartDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Finding) GetSlaStartDate() string {
	if o == nil || IsNil(o.SlaStartDate.Get()) {
		var ret string
		return ret
	}
	return *o.SlaStartDate.Get()
}

// GetSlaStartDateOk returns a tuple with the SlaStartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Finding) GetSlaStartDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SlaStartDate.Get(), o.SlaStartDate.IsSet()
}

// HasSlaStartDate returns a boolean if a field has been set.
func (o *Finding) HasSlaStartDate() bool {
	if o != nil && o.SlaStartDate.IsSet() {
		return true
	}

	return false
}

// SetSlaStartDate gets a reference to the given NullableString and assigns it to the SlaStartDate field.
func (o *Finding) SetSlaStartDate(v string) {
	o.SlaStartDate.Set(&v)
}
// SetSlaStartDateNil sets the value for SlaStartDate to be an explicit nil
func (o *Finding) SetSlaStartDateNil() {
	o.SlaStartDate.Set(nil)
}

// UnsetSlaStartDate ensures that no value is present for SlaStartDate, not even an explicit nil
func (o *Finding) UnsetSlaStartDate() {
	o.SlaStartDate.Unset()
}

// GetSlaExpirationDate returns the SlaExpirationDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Finding) GetSlaExpirationDate() string {
	if o == nil || IsNil(o.SlaExpirationDate.Get()) {
		var ret string
		return ret
	}
	return *o.SlaExpirationDate.Get()
}

// GetSlaExpirationDateOk returns a tuple with the SlaExpirationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Finding) GetSlaExpirationDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SlaExpirationDate.Get(), o.SlaExpirationDate.IsSet()
}

// HasSlaExpirationDate returns a boolean if a field has been set.
func (o *Finding) HasSlaExpirationDate() bool {
	if o != nil && o.SlaExpirationDate.IsSet() {
		return true
	}

	return false
}

// SetSlaExpirationDate gets a reference to the given NullableString and assigns it to the SlaExpirationDate field.
func (o *Finding) SetSlaExpirationDate(v string) {
	o.SlaExpirationDate.Set(&v)
}
// SetSlaExpirationDateNil sets the value for SlaExpirationDate to be an explicit nil
func (o *Finding) SetSlaExpirationDateNil() {
	o.SlaExpirationDate.Set(nil)
}

// UnsetSlaExpirationDate ensures that no value is present for SlaExpirationDate, not even an explicit nil
func (o *Finding) UnsetSlaExpirationDate() {
	o.SlaExpirationDate.Unset()
}

// GetCwe returns the Cwe field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Finding) GetCwe() int32 {
	if o == nil || IsNil(o.Cwe.Get()) {
		var ret int32
		return ret
	}
	return *o.Cwe.Get()
}

// GetCweOk returns a tuple with the Cwe field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Finding) GetCweOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Cwe.Get(), o.Cwe.IsSet()
}

// HasCwe returns a boolean if a field has been set.
func (o *Finding) HasCwe() bool {
	if o != nil && o.Cwe.IsSet() {
		return true
	}

	return false
}

// SetCwe gets a reference to the given NullableInt32 and assigns it to the Cwe field.
func (o *Finding) SetCwe(v int32) {
	o.Cwe.Set(&v)
}
// SetCweNil sets the value for Cwe to be an explicit nil
func (o *Finding) SetCweNil() {
	o.Cwe.Set(nil)
}

// UnsetCwe ensures that no value is present for Cwe, not even an explicit nil
func (o *Finding) UnsetCwe() {
	o.Cwe.Unset()
}

// GetCvssv3 returns the Cvssv3 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Finding) GetCvssv3() string {
	if o == nil || IsNil(o.Cvssv3.Get()) {
		var ret string
		return ret
	}
	return *o.Cvssv3.Get()
}

// GetCvssv3Ok returns a tuple with the Cvssv3 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Finding) GetCvssv3Ok() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Cvssv3.Get(), o.Cvssv3.IsSet()
}

// HasCvssv3 returns a boolean if a field has been set.
func (o *Finding) HasCvssv3() bool {
	if o != nil && o.Cvssv3.IsSet() {
		return true
	}

	return false
}

// SetCvssv3 gets a reference to the given NullableString and assigns it to the Cvssv3 field.
func (o *Finding) SetCvssv3(v string) {
	o.Cvssv3.Set(&v)
}
// SetCvssv3Nil sets the value for Cvssv3 to be an explicit nil
func (o *Finding) SetCvssv3Nil() {
	o.Cvssv3.Set(nil)
}

// UnsetCvssv3 ensures that no value is present for Cvssv3, not even an explicit nil
func (o *Finding) UnsetCvssv3() {
	o.Cvssv3.Unset()
}

// GetCvssv3Score returns the Cvssv3Score field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Finding) GetCvssv3Score() float64 {
	if o == nil || IsNil(o.Cvssv3Score.Get()) {
		var ret float64
		return ret
	}
	return *o.Cvssv3Score.Get()
}

// GetCvssv3ScoreOk returns a tuple with the Cvssv3Score field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Finding) GetCvssv3ScoreOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Cvssv3Score.Get(), o.Cvssv3Score.IsSet()
}

// HasCvssv3Score returns a boolean if a field has been set.
func (o *Finding) HasCvssv3Score() bool {
	if o != nil && o.Cvssv3Score.IsSet() {
		return true
	}

	return false
}

// SetCvssv3Score gets a reference to the given NullableFloat64 and assigns it to the Cvssv3Score field.
func (o *Finding) SetCvssv3Score(v float64) {
	o.Cvssv3Score.Set(&v)
}
// SetCvssv3ScoreNil sets the value for Cvssv3Score to be an explicit nil
func (o *Finding) SetCvssv3ScoreNil() {
	o.Cvssv3Score.Set(nil)
}

// UnsetCvssv3Score ensures that no value is present for Cvssv3Score, not even an explicit nil
func (o *Finding) UnsetCvssv3Score() {
	o.Cvssv3Score.Unset()
}

// GetUrl returns the Url field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Finding) GetUrl() string {
	if o == nil || o.Url.Get() == nil {
		var ret string
		return ret
	}

	return *o.Url.Get()
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Finding) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Url.Get(), o.Url.IsSet()
}

// SetUrl sets field value
func (o *Finding) SetUrl(v string) {
	o.Url.Set(&v)
}

// GetSeverity returns the Severity field value
func (o *Finding) GetSeverity() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Severity
}

// GetSeverityOk returns a tuple with the Severity field value
// and a boolean to check if the value has been set.
func (o *Finding) GetSeverityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Severity, true
}

// SetSeverity sets field value
func (o *Finding) SetSeverity(v string) {
	o.Severity = v
}

// GetDescription returns the Description field value
func (o *Finding) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *Finding) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *Finding) SetDescription(v string) {
	o.Description = v
}

// GetMitigation returns the Mitigation field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Finding) GetMitigation() string {
	if o == nil || IsNil(o.Mitigation.Get()) {
		var ret string
		return ret
	}
	return *o.Mitigation.Get()
}

// GetMitigationOk returns a tuple with the Mitigation field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Finding) GetMitigationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Mitigation.Get(), o.Mitigation.IsSet()
}

// HasMitigation returns a boolean if a field has been set.
func (o *Finding) HasMitigation() bool {
	if o != nil && o.Mitigation.IsSet() {
		return true
	}

	return false
}

// SetMitigation gets a reference to the given NullableString and assigns it to the Mitigation field.
func (o *Finding) SetMitigation(v string) {
	o.Mitigation.Set(&v)
}
// SetMitigationNil sets the value for Mitigation to be an explicit nil
func (o *Finding) SetMitigationNil() {
	o.Mitigation.Set(nil)
}

// UnsetMitigation ensures that no value is present for Mitigation, not even an explicit nil
func (o *Finding) UnsetMitigation() {
	o.Mitigation.Unset()
}

// GetImpact returns the Impact field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Finding) GetImpact() string {
	if o == nil || IsNil(o.Impact.Get()) {
		var ret string
		return ret
	}
	return *o.Impact.Get()
}

// GetImpactOk returns a tuple with the Impact field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Finding) GetImpactOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Impact.Get(), o.Impact.IsSet()
}

// HasImpact returns a boolean if a field has been set.
func (o *Finding) HasImpact() bool {
	if o != nil && o.Impact.IsSet() {
		return true
	}

	return false
}

// SetImpact gets a reference to the given NullableString and assigns it to the Impact field.
func (o *Finding) SetImpact(v string) {
	o.Impact.Set(&v)
}
// SetImpactNil sets the value for Impact to be an explicit nil
func (o *Finding) SetImpactNil() {
	o.Impact.Set(nil)
}

// UnsetImpact ensures that no value is present for Impact, not even an explicit nil
func (o *Finding) UnsetImpact() {
	o.Impact.Unset()
}

// GetStepsToReproduce returns the StepsToReproduce field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Finding) GetStepsToReproduce() string {
	if o == nil || IsNil(o.StepsToReproduce.Get()) {
		var ret string
		return ret
	}
	return *o.StepsToReproduce.Get()
}

// GetStepsToReproduceOk returns a tuple with the StepsToReproduce field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Finding) GetStepsToReproduceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.StepsToReproduce.Get(), o.StepsToReproduce.IsSet()
}

// HasStepsToReproduce returns a boolean if a field has been set.
func (o *Finding) HasStepsToReproduce() bool {
	if o != nil && o.StepsToReproduce.IsSet() {
		return true
	}

	return false
}

// SetStepsToReproduce gets a reference to the given NullableString and assigns it to the StepsToReproduce field.
func (o *Finding) SetStepsToReproduce(v string) {
	o.StepsToReproduce.Set(&v)
}
// SetStepsToReproduceNil sets the value for StepsToReproduce to be an explicit nil
func (o *Finding) SetStepsToReproduceNil() {
	o.StepsToReproduce.Set(nil)
}

// UnsetStepsToReproduce ensures that no value is present for StepsToReproduce, not even an explicit nil
func (o *Finding) UnsetStepsToReproduce() {
	o.StepsToReproduce.Unset()
}

// GetSeverityJustification returns the SeverityJustification field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Finding) GetSeverityJustification() string {
	if o == nil || IsNil(o.SeverityJustification.Get()) {
		var ret string
		return ret
	}
	return *o.SeverityJustification.Get()
}

// GetSeverityJustificationOk returns a tuple with the SeverityJustification field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Finding) GetSeverityJustificationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SeverityJustification.Get(), o.SeverityJustification.IsSet()
}

// HasSeverityJustification returns a boolean if a field has been set.
func (o *Finding) HasSeverityJustification() bool {
	if o != nil && o.SeverityJustification.IsSet() {
		return true
	}

	return false
}

// SetSeverityJustification gets a reference to the given NullableString and assigns it to the SeverityJustification field.
func (o *Finding) SetSeverityJustification(v string) {
	o.SeverityJustification.Set(&v)
}
// SetSeverityJustificationNil sets the value for SeverityJustification to be an explicit nil
func (o *Finding) SetSeverityJustificationNil() {
	o.SeverityJustification.Set(nil)
}

// UnsetSeverityJustification ensures that no value is present for SeverityJustification, not even an explicit nil
func (o *Finding) UnsetSeverityJustification() {
	o.SeverityJustification.Unset()
}

// GetReferences returns the References field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Finding) GetReferences() string {
	if o == nil || IsNil(o.References.Get()) {
		var ret string
		return ret
	}
	return *o.References.Get()
}

// GetReferencesOk returns a tuple with the References field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Finding) GetReferencesOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.References.Get(), o.References.IsSet()
}

// HasReferences returns a boolean if a field has been set.
func (o *Finding) HasReferences() bool {
	if o != nil && o.References.IsSet() {
		return true
	}

	return false
}

// SetReferences gets a reference to the given NullableString and assigns it to the References field.
func (o *Finding) SetReferences(v string) {
	o.References.Set(&v)
}
// SetReferencesNil sets the value for References to be an explicit nil
func (o *Finding) SetReferencesNil() {
	o.References.Set(nil)
}

// UnsetReferences ensures that no value is present for References, not even an explicit nil
func (o *Finding) UnsetReferences() {
	o.References.Unset()
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *Finding) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Finding) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *Finding) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *Finding) SetActive(v bool) {
	o.Active = &v
}

// GetVerified returns the Verified field value if set, zero value otherwise.
func (o *Finding) GetVerified() bool {
	if o == nil || IsNil(o.Verified) {
		var ret bool
		return ret
	}
	return *o.Verified
}

// GetVerifiedOk returns a tuple with the Verified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Finding) GetVerifiedOk() (*bool, bool) {
	if o == nil || IsNil(o.Verified) {
		return nil, false
	}
	return o.Verified, true
}

// HasVerified returns a boolean if a field has been set.
func (o *Finding) HasVerified() bool {
	if o != nil && !IsNil(o.Verified) {
		return true
	}

	return false
}

// SetVerified gets a reference to the given bool and assigns it to the Verified field.
func (o *Finding) SetVerified(v bool) {
	o.Verified = &v
}

// GetFalseP returns the FalseP field value if set, zero value otherwise.
func (o *Finding) GetFalseP() bool {
	if o == nil || IsNil(o.FalseP) {
		var ret bool
		return ret
	}
	return *o.FalseP
}

// GetFalsePOk returns a tuple with the FalseP field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Finding) GetFalsePOk() (*bool, bool) {
	if o == nil || IsNil(o.FalseP) {
		return nil, false
	}
	return o.FalseP, true
}

// HasFalseP returns a boolean if a field has been set.
func (o *Finding) HasFalseP() bool {
	if o != nil && !IsNil(o.FalseP) {
		return true
	}

	return false
}

// SetFalseP gets a reference to the given bool and assigns it to the FalseP field.
func (o *Finding) SetFalseP(v bool) {
	o.FalseP = &v
}

// GetDuplicate returns the Duplicate field value if set, zero value otherwise.
func (o *Finding) GetDuplicate() bool {
	if o == nil || IsNil(o.Duplicate) {
		var ret bool
		return ret
	}
	return *o.Duplicate
}

// GetDuplicateOk returns a tuple with the Duplicate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Finding) GetDuplicateOk() (*bool, bool) {
	if o == nil || IsNil(o.Duplicate) {
		return nil, false
	}
	return o.Duplicate, true
}

// HasDuplicate returns a boolean if a field has been set.
func (o *Finding) HasDuplicate() bool {
	if o != nil && !IsNil(o.Duplicate) {
		return true
	}

	return false
}

// SetDuplicate gets a reference to the given bool and assigns it to the Duplicate field.
func (o *Finding) SetDuplicate(v bool) {
	o.Duplicate = &v
}

// GetOutOfScope returns the OutOfScope field value if set, zero value otherwise.
func (o *Finding) GetOutOfScope() bool {
	if o == nil || IsNil(o.OutOfScope) {
		var ret bool
		return ret
	}
	return *o.OutOfScope
}

// GetOutOfScopeOk returns a tuple with the OutOfScope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Finding) GetOutOfScopeOk() (*bool, bool) {
	if o == nil || IsNil(o.OutOfScope) {
		return nil, false
	}
	return o.OutOfScope, true
}

// HasOutOfScope returns a boolean if a field has been set.
func (o *Finding) HasOutOfScope() bool {
	if o != nil && !IsNil(o.OutOfScope) {
		return true
	}

	return false
}

// SetOutOfScope gets a reference to the given bool and assigns it to the OutOfScope field.
func (o *Finding) SetOutOfScope(v bool) {
	o.OutOfScope = &v
}

// GetRiskAccepted returns the RiskAccepted field value if set, zero value otherwise.
func (o *Finding) GetRiskAccepted() bool {
	if o == nil || IsNil(o.RiskAccepted) {
		var ret bool
		return ret
	}
	return *o.RiskAccepted
}

// GetRiskAcceptedOk returns a tuple with the RiskAccepted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Finding) GetRiskAcceptedOk() (*bool, bool) {
	if o == nil || IsNil(o.RiskAccepted) {
		return nil, false
	}
	return o.RiskAccepted, true
}

// HasRiskAccepted returns a boolean if a field has been set.
func (o *Finding) HasRiskAccepted() bool {
	if o != nil && !IsNil(o.RiskAccepted) {
		return true
	}

	return false
}

// SetRiskAccepted gets a reference to the given bool and assigns it to the RiskAccepted field.
func (o *Finding) SetRiskAccepted(v bool) {
	o.RiskAccepted = &v
}

// GetUnderReview returns the UnderReview field value if set, zero value otherwise.
func (o *Finding) GetUnderReview() bool {
	if o == nil || IsNil(o.UnderReview) {
		var ret bool
		return ret
	}
	return *o.UnderReview
}

// GetUnderReviewOk returns a tuple with the UnderReview field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Finding) GetUnderReviewOk() (*bool, bool) {
	if o == nil || IsNil(o.UnderReview) {
		return nil, false
	}
	return o.UnderReview, true
}

// HasUnderReview returns a boolean if a field has been set.
func (o *Finding) HasUnderReview() bool {
	if o != nil && !IsNil(o.UnderReview) {
		return true
	}

	return false
}

// SetUnderReview gets a reference to the given bool and assigns it to the UnderReview field.
func (o *Finding) SetUnderReview(v bool) {
	o.UnderReview = &v
}

// GetLastStatusUpdate returns the LastStatusUpdate field value
// If the value is explicit nil, the zero value for time.Time will be returned
func (o *Finding) GetLastStatusUpdate() time.Time {
	if o == nil || o.LastStatusUpdate.Get() == nil {
		var ret time.Time
		return ret
	}

	return *o.LastStatusUpdate.Get()
}

// GetLastStatusUpdateOk returns a tuple with the LastStatusUpdate field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Finding) GetLastStatusUpdateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastStatusUpdate.Get(), o.LastStatusUpdate.IsSet()
}

// SetLastStatusUpdate sets field value
func (o *Finding) SetLastStatusUpdate(v time.Time) {
	o.LastStatusUpdate.Set(&v)
}

// GetUnderDefectReview returns the UnderDefectReview field value if set, zero value otherwise.
func (o *Finding) GetUnderDefectReview() bool {
	if o == nil || IsNil(o.UnderDefectReview) {
		var ret bool
		return ret
	}
	return *o.UnderDefectReview
}

// GetUnderDefectReviewOk returns a tuple with the UnderDefectReview field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Finding) GetUnderDefectReviewOk() (*bool, bool) {
	if o == nil || IsNil(o.UnderDefectReview) {
		return nil, false
	}
	return o.UnderDefectReview, true
}

// HasUnderDefectReview returns a boolean if a field has been set.
func (o *Finding) HasUnderDefectReview() bool {
	if o != nil && !IsNil(o.UnderDefectReview) {
		return true
	}

	return false
}

// SetUnderDefectReview gets a reference to the given bool and assigns it to the UnderDefectReview field.
func (o *Finding) SetUnderDefectReview(v bool) {
	o.UnderDefectReview = &v
}

// GetIsMitigated returns the IsMitigated field value if set, zero value otherwise.
func (o *Finding) GetIsMitigated() bool {
	if o == nil || IsNil(o.IsMitigated) {
		var ret bool
		return ret
	}
	return *o.IsMitigated
}

// GetIsMitigatedOk returns a tuple with the IsMitigated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Finding) GetIsMitigatedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsMitigated) {
		return nil, false
	}
	return o.IsMitigated, true
}

// HasIsMitigated returns a boolean if a field has been set.
func (o *Finding) HasIsMitigated() bool {
	if o != nil && !IsNil(o.IsMitigated) {
		return true
	}

	return false
}

// SetIsMitigated gets a reference to the given bool and assigns it to the IsMitigated field.
func (o *Finding) SetIsMitigated(v bool) {
	o.IsMitigated = &v
}

// GetThreadId returns the ThreadId field value
func (o *Finding) GetThreadId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ThreadId
}

// GetThreadIdOk returns a tuple with the ThreadId field value
// and a boolean to check if the value has been set.
func (o *Finding) GetThreadIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ThreadId, true
}

// SetThreadId sets field value
func (o *Finding) SetThreadId(v int32) {
	o.ThreadId = v
}

// GetMitigated returns the Mitigated field value
// If the value is explicit nil, the zero value for time.Time will be returned
func (o *Finding) GetMitigated() time.Time {
	if o == nil || o.Mitigated.Get() == nil {
		var ret time.Time
		return ret
	}

	return *o.Mitigated.Get()
}

// GetMitigatedOk returns a tuple with the Mitigated field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Finding) GetMitigatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.Mitigated.Get(), o.Mitigated.IsSet()
}

// SetMitigated sets field value
func (o *Finding) SetMitigated(v time.Time) {
	o.Mitigated.Set(&v)
}

// GetNumericalSeverity returns the NumericalSeverity field value
func (o *Finding) GetNumericalSeverity() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NumericalSeverity
}

// GetNumericalSeverityOk returns a tuple with the NumericalSeverity field value
// and a boolean to check if the value has been set.
func (o *Finding) GetNumericalSeverityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NumericalSeverity, true
}

// SetNumericalSeverity sets field value
func (o *Finding) SetNumericalSeverity(v string) {
	o.NumericalSeverity = v
}

// GetLastReviewed returns the LastReviewed field value
// If the value is explicit nil, the zero value for time.Time will be returned
func (o *Finding) GetLastReviewed() time.Time {
	if o == nil || o.LastReviewed.Get() == nil {
		var ret time.Time
		return ret
	}

	return *o.LastReviewed.Get()
}

// GetLastReviewedOk returns a tuple with the LastReviewed field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Finding) GetLastReviewedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastReviewed.Get(), o.LastReviewed.IsSet()
}

// SetLastReviewed sets field value
func (o *Finding) SetLastReviewed(v time.Time) {
	o.LastReviewed.Set(&v)
}

// GetParam returns the Param field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Finding) GetParam() string {
	if o == nil || o.Param.Get() == nil {
		var ret string
		return ret
	}

	return *o.Param.Get()
}

// GetParamOk returns a tuple with the Param field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Finding) GetParamOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Param.Get(), o.Param.IsSet()
}

// SetParam sets field value
func (o *Finding) SetParam(v string) {
	o.Param.Set(&v)
}

// GetPayload returns the Payload field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Finding) GetPayload() string {
	if o == nil || o.Payload.Get() == nil {
		var ret string
		return ret
	}

	return *o.Payload.Get()
}

// GetPayloadOk returns a tuple with the Payload field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Finding) GetPayloadOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Payload.Get(), o.Payload.IsSet()
}

// SetPayload sets field value
func (o *Finding) SetPayload(v string) {
	o.Payload.Set(&v)
}

// GetHashCode returns the HashCode field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Finding) GetHashCode() string {
	if o == nil || o.HashCode.Get() == nil {
		var ret string
		return ret
	}

	return *o.HashCode.Get()
}

// GetHashCodeOk returns a tuple with the HashCode field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Finding) GetHashCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.HashCode.Get(), o.HashCode.IsSet()
}

// SetHashCode sets field value
func (o *Finding) SetHashCode(v string) {
	o.HashCode.Set(&v)
}

// GetLine returns the Line field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Finding) GetLine() int32 {
	if o == nil || IsNil(o.Line.Get()) {
		var ret int32
		return ret
	}
	return *o.Line.Get()
}

// GetLineOk returns a tuple with the Line field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Finding) GetLineOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Line.Get(), o.Line.IsSet()
}

// HasLine returns a boolean if a field has been set.
func (o *Finding) HasLine() bool {
	if o != nil && o.Line.IsSet() {
		return true
	}

	return false
}

// SetLine gets a reference to the given NullableInt32 and assigns it to the Line field.
func (o *Finding) SetLine(v int32) {
	o.Line.Set(&v)
}
// SetLineNil sets the value for Line to be an explicit nil
func (o *Finding) SetLineNil() {
	o.Line.Set(nil)
}

// UnsetLine ensures that no value is present for Line, not even an explicit nil
func (o *Finding) UnsetLine() {
	o.Line.Unset()
}

// GetFilePath returns the FilePath field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Finding) GetFilePath() string {
	if o == nil || IsNil(o.FilePath.Get()) {
		var ret string
		return ret
	}
	return *o.FilePath.Get()
}

// GetFilePathOk returns a tuple with the FilePath field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Finding) GetFilePathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FilePath.Get(), o.FilePath.IsSet()
}

// HasFilePath returns a boolean if a field has been set.
func (o *Finding) HasFilePath() bool {
	if o != nil && o.FilePath.IsSet() {
		return true
	}

	return false
}

// SetFilePath gets a reference to the given NullableString and assigns it to the FilePath field.
func (o *Finding) SetFilePath(v string) {
	o.FilePath.Set(&v)
}
// SetFilePathNil sets the value for FilePath to be an explicit nil
func (o *Finding) SetFilePathNil() {
	o.FilePath.Set(nil)
}

// UnsetFilePath ensures that no value is present for FilePath, not even an explicit nil
func (o *Finding) UnsetFilePath() {
	o.FilePath.Unset()
}

// GetComponentName returns the ComponentName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Finding) GetComponentName() string {
	if o == nil || IsNil(o.ComponentName.Get()) {
		var ret string
		return ret
	}
	return *o.ComponentName.Get()
}

// GetComponentNameOk returns a tuple with the ComponentName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Finding) GetComponentNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ComponentName.Get(), o.ComponentName.IsSet()
}

// HasComponentName returns a boolean if a field has been set.
func (o *Finding) HasComponentName() bool {
	if o != nil && o.ComponentName.IsSet() {
		return true
	}

	return false
}

// SetComponentName gets a reference to the given NullableString and assigns it to the ComponentName field.
func (o *Finding) SetComponentName(v string) {
	o.ComponentName.Set(&v)
}
// SetComponentNameNil sets the value for ComponentName to be an explicit nil
func (o *Finding) SetComponentNameNil() {
	o.ComponentName.Set(nil)
}

// UnsetComponentName ensures that no value is present for ComponentName, not even an explicit nil
func (o *Finding) UnsetComponentName() {
	o.ComponentName.Unset()
}

// GetComponentVersion returns the ComponentVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Finding) GetComponentVersion() string {
	if o == nil || IsNil(o.ComponentVersion.Get()) {
		var ret string
		return ret
	}
	return *o.ComponentVersion.Get()
}

// GetComponentVersionOk returns a tuple with the ComponentVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Finding) GetComponentVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ComponentVersion.Get(), o.ComponentVersion.IsSet()
}

// HasComponentVersion returns a boolean if a field has been set.
func (o *Finding) HasComponentVersion() bool {
	if o != nil && o.ComponentVersion.IsSet() {
		return true
	}

	return false
}

// SetComponentVersion gets a reference to the given NullableString and assigns it to the ComponentVersion field.
func (o *Finding) SetComponentVersion(v string) {
	o.ComponentVersion.Set(&v)
}
// SetComponentVersionNil sets the value for ComponentVersion to be an explicit nil
func (o *Finding) SetComponentVersionNil() {
	o.ComponentVersion.Set(nil)
}

// UnsetComponentVersion ensures that no value is present for ComponentVersion, not even an explicit nil
func (o *Finding) UnsetComponentVersion() {
	o.ComponentVersion.Unset()
}

// GetStaticFinding returns the StaticFinding field value if set, zero value otherwise.
func (o *Finding) GetStaticFinding() bool {
	if o == nil || IsNil(o.StaticFinding) {
		var ret bool
		return ret
	}
	return *o.StaticFinding
}

// GetStaticFindingOk returns a tuple with the StaticFinding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Finding) GetStaticFindingOk() (*bool, bool) {
	if o == nil || IsNil(o.StaticFinding) {
		return nil, false
	}
	return o.StaticFinding, true
}

// HasStaticFinding returns a boolean if a field has been set.
func (o *Finding) HasStaticFinding() bool {
	if o != nil && !IsNil(o.StaticFinding) {
		return true
	}

	return false
}

// SetStaticFinding gets a reference to the given bool and assigns it to the StaticFinding field.
func (o *Finding) SetStaticFinding(v bool) {
	o.StaticFinding = &v
}

// GetDynamicFinding returns the DynamicFinding field value if set, zero value otherwise.
func (o *Finding) GetDynamicFinding() bool {
	if o == nil || IsNil(o.DynamicFinding) {
		var ret bool
		return ret
	}
	return *o.DynamicFinding
}

// GetDynamicFindingOk returns a tuple with the DynamicFinding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Finding) GetDynamicFindingOk() (*bool, bool) {
	if o == nil || IsNil(o.DynamicFinding) {
		return nil, false
	}
	return o.DynamicFinding, true
}

// HasDynamicFinding returns a boolean if a field has been set.
func (o *Finding) HasDynamicFinding() bool {
	if o != nil && !IsNil(o.DynamicFinding) {
		return true
	}

	return false
}

// SetDynamicFinding gets a reference to the given bool and assigns it to the DynamicFinding field.
func (o *Finding) SetDynamicFinding(v bool) {
	o.DynamicFinding = &v
}

// GetCreated returns the Created field value
// If the value is explicit nil, the zero value for time.Time will be returned
func (o *Finding) GetCreated() time.Time {
	if o == nil || o.Created.Get() == nil {
		var ret time.Time
		return ret
	}

	return *o.Created.Get()
}

// GetCreatedOk returns a tuple with the Created field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Finding) GetCreatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.Created.Get(), o.Created.IsSet()
}

// SetCreated sets field value
func (o *Finding) SetCreated(v time.Time) {
	o.Created.Set(&v)
}

// GetScannerConfidence returns the ScannerConfidence field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *Finding) GetScannerConfidence() int32 {
	if o == nil || o.ScannerConfidence.Get() == nil {
		var ret int32
		return ret
	}

	return *o.ScannerConfidence.Get()
}

// GetScannerConfidenceOk returns a tuple with the ScannerConfidence field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Finding) GetScannerConfidenceOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ScannerConfidence.Get(), o.ScannerConfidence.IsSet()
}

// SetScannerConfidence sets field value
func (o *Finding) SetScannerConfidence(v int32) {
	o.ScannerConfidence.Set(&v)
}

// GetUniqueIdFromTool returns the UniqueIdFromTool field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Finding) GetUniqueIdFromTool() string {
	if o == nil || IsNil(o.UniqueIdFromTool.Get()) {
		var ret string
		return ret
	}
	return *o.UniqueIdFromTool.Get()
}

// GetUniqueIdFromToolOk returns a tuple with the UniqueIdFromTool field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Finding) GetUniqueIdFromToolOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.UniqueIdFromTool.Get(), o.UniqueIdFromTool.IsSet()
}

// HasUniqueIdFromTool returns a boolean if a field has been set.
func (o *Finding) HasUniqueIdFromTool() bool {
	if o != nil && o.UniqueIdFromTool.IsSet() {
		return true
	}

	return false
}

// SetUniqueIdFromTool gets a reference to the given NullableString and assigns it to the UniqueIdFromTool field.
func (o *Finding) SetUniqueIdFromTool(v string) {
	o.UniqueIdFromTool.Set(&v)
}
// SetUniqueIdFromToolNil sets the value for UniqueIdFromTool to be an explicit nil
func (o *Finding) SetUniqueIdFromToolNil() {
	o.UniqueIdFromTool.Set(nil)
}

// UnsetUniqueIdFromTool ensures that no value is present for UniqueIdFromTool, not even an explicit nil
func (o *Finding) UnsetUniqueIdFromTool() {
	o.UniqueIdFromTool.Unset()
}

// GetVulnIdFromTool returns the VulnIdFromTool field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Finding) GetVulnIdFromTool() string {
	if o == nil || IsNil(o.VulnIdFromTool.Get()) {
		var ret string
		return ret
	}
	return *o.VulnIdFromTool.Get()
}

// GetVulnIdFromToolOk returns a tuple with the VulnIdFromTool field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Finding) GetVulnIdFromToolOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.VulnIdFromTool.Get(), o.VulnIdFromTool.IsSet()
}

// HasVulnIdFromTool returns a boolean if a field has been set.
func (o *Finding) HasVulnIdFromTool() bool {
	if o != nil && o.VulnIdFromTool.IsSet() {
		return true
	}

	return false
}

// SetVulnIdFromTool gets a reference to the given NullableString and assigns it to the VulnIdFromTool field.
func (o *Finding) SetVulnIdFromTool(v string) {
	o.VulnIdFromTool.Set(&v)
}
// SetVulnIdFromToolNil sets the value for VulnIdFromTool to be an explicit nil
func (o *Finding) SetVulnIdFromToolNil() {
	o.VulnIdFromTool.Set(nil)
}

// UnsetVulnIdFromTool ensures that no value is present for VulnIdFromTool, not even an explicit nil
func (o *Finding) UnsetVulnIdFromTool() {
	o.VulnIdFromTool.Unset()
}

// GetSastSourceObject returns the SastSourceObject field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Finding) GetSastSourceObject() string {
	if o == nil || IsNil(o.SastSourceObject.Get()) {
		var ret string
		return ret
	}
	return *o.SastSourceObject.Get()
}

// GetSastSourceObjectOk returns a tuple with the SastSourceObject field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Finding) GetSastSourceObjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SastSourceObject.Get(), o.SastSourceObject.IsSet()
}

// HasSastSourceObject returns a boolean if a field has been set.
func (o *Finding) HasSastSourceObject() bool {
	if o != nil && o.SastSourceObject.IsSet() {
		return true
	}

	return false
}

// SetSastSourceObject gets a reference to the given NullableString and assigns it to the SastSourceObject field.
func (o *Finding) SetSastSourceObject(v string) {
	o.SastSourceObject.Set(&v)
}
// SetSastSourceObjectNil sets the value for SastSourceObject to be an explicit nil
func (o *Finding) SetSastSourceObjectNil() {
	o.SastSourceObject.Set(nil)
}

// UnsetSastSourceObject ensures that no value is present for SastSourceObject, not even an explicit nil
func (o *Finding) UnsetSastSourceObject() {
	o.SastSourceObject.Unset()
}

// GetSastSinkObject returns the SastSinkObject field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Finding) GetSastSinkObject() string {
	if o == nil || IsNil(o.SastSinkObject.Get()) {
		var ret string
		return ret
	}
	return *o.SastSinkObject.Get()
}

// GetSastSinkObjectOk returns a tuple with the SastSinkObject field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Finding) GetSastSinkObjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SastSinkObject.Get(), o.SastSinkObject.IsSet()
}

// HasSastSinkObject returns a boolean if a field has been set.
func (o *Finding) HasSastSinkObject() bool {
	if o != nil && o.SastSinkObject.IsSet() {
		return true
	}

	return false
}

// SetSastSinkObject gets a reference to the given NullableString and assigns it to the SastSinkObject field.
func (o *Finding) SetSastSinkObject(v string) {
	o.SastSinkObject.Set(&v)
}
// SetSastSinkObjectNil sets the value for SastSinkObject to be an explicit nil
func (o *Finding) SetSastSinkObjectNil() {
	o.SastSinkObject.Set(nil)
}

// UnsetSastSinkObject ensures that no value is present for SastSinkObject, not even an explicit nil
func (o *Finding) UnsetSastSinkObject() {
	o.SastSinkObject.Unset()
}

// GetSastSourceLine returns the SastSourceLine field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Finding) GetSastSourceLine() int32 {
	if o == nil || IsNil(o.SastSourceLine.Get()) {
		var ret int32
		return ret
	}
	return *o.SastSourceLine.Get()
}

// GetSastSourceLineOk returns a tuple with the SastSourceLine field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Finding) GetSastSourceLineOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.SastSourceLine.Get(), o.SastSourceLine.IsSet()
}

// HasSastSourceLine returns a boolean if a field has been set.
func (o *Finding) HasSastSourceLine() bool {
	if o != nil && o.SastSourceLine.IsSet() {
		return true
	}

	return false
}

// SetSastSourceLine gets a reference to the given NullableInt32 and assigns it to the SastSourceLine field.
func (o *Finding) SetSastSourceLine(v int32) {
	o.SastSourceLine.Set(&v)
}
// SetSastSourceLineNil sets the value for SastSourceLine to be an explicit nil
func (o *Finding) SetSastSourceLineNil() {
	o.SastSourceLine.Set(nil)
}

// UnsetSastSourceLine ensures that no value is present for SastSourceLine, not even an explicit nil
func (o *Finding) UnsetSastSourceLine() {
	o.SastSourceLine.Unset()
}

// GetSastSourceFilePath returns the SastSourceFilePath field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Finding) GetSastSourceFilePath() string {
	if o == nil || IsNil(o.SastSourceFilePath.Get()) {
		var ret string
		return ret
	}
	return *o.SastSourceFilePath.Get()
}

// GetSastSourceFilePathOk returns a tuple with the SastSourceFilePath field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Finding) GetSastSourceFilePathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SastSourceFilePath.Get(), o.SastSourceFilePath.IsSet()
}

// HasSastSourceFilePath returns a boolean if a field has been set.
func (o *Finding) HasSastSourceFilePath() bool {
	if o != nil && o.SastSourceFilePath.IsSet() {
		return true
	}

	return false
}

// SetSastSourceFilePath gets a reference to the given NullableString and assigns it to the SastSourceFilePath field.
func (o *Finding) SetSastSourceFilePath(v string) {
	o.SastSourceFilePath.Set(&v)
}
// SetSastSourceFilePathNil sets the value for SastSourceFilePath to be an explicit nil
func (o *Finding) SetSastSourceFilePathNil() {
	o.SastSourceFilePath.Set(nil)
}

// UnsetSastSourceFilePath ensures that no value is present for SastSourceFilePath, not even an explicit nil
func (o *Finding) UnsetSastSourceFilePath() {
	o.SastSourceFilePath.Unset()
}

// GetNbOccurences returns the NbOccurences field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Finding) GetNbOccurences() int32 {
	if o == nil || IsNil(o.NbOccurences.Get()) {
		var ret int32
		return ret
	}
	return *o.NbOccurences.Get()
}

// GetNbOccurencesOk returns a tuple with the NbOccurences field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Finding) GetNbOccurencesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.NbOccurences.Get(), o.NbOccurences.IsSet()
}

// HasNbOccurences returns a boolean if a field has been set.
func (o *Finding) HasNbOccurences() bool {
	if o != nil && o.NbOccurences.IsSet() {
		return true
	}

	return false
}

// SetNbOccurences gets a reference to the given NullableInt32 and assigns it to the NbOccurences field.
func (o *Finding) SetNbOccurences(v int32) {
	o.NbOccurences.Set(&v)
}
// SetNbOccurencesNil sets the value for NbOccurences to be an explicit nil
func (o *Finding) SetNbOccurencesNil() {
	o.NbOccurences.Set(nil)
}

// UnsetNbOccurences ensures that no value is present for NbOccurences, not even an explicit nil
func (o *Finding) UnsetNbOccurences() {
	o.NbOccurences.Unset()
}

// GetPublishDate returns the PublishDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Finding) GetPublishDate() string {
	if o == nil || IsNil(o.PublishDate.Get()) {
		var ret string
		return ret
	}
	return *o.PublishDate.Get()
}

// GetPublishDateOk returns a tuple with the PublishDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Finding) GetPublishDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PublishDate.Get(), o.PublishDate.IsSet()
}

// HasPublishDate returns a boolean if a field has been set.
func (o *Finding) HasPublishDate() bool {
	if o != nil && o.PublishDate.IsSet() {
		return true
	}

	return false
}

// SetPublishDate gets a reference to the given NullableString and assigns it to the PublishDate field.
func (o *Finding) SetPublishDate(v string) {
	o.PublishDate.Set(&v)
}
// SetPublishDateNil sets the value for PublishDate to be an explicit nil
func (o *Finding) SetPublishDateNil() {
	o.PublishDate.Set(nil)
}

// UnsetPublishDate ensures that no value is present for PublishDate, not even an explicit nil
func (o *Finding) UnsetPublishDate() {
	o.PublishDate.Unset()
}

// GetService returns the Service field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Finding) GetService() string {
	if o == nil || IsNil(o.Service.Get()) {
		var ret string
		return ret
	}
	return *o.Service.Get()
}

// GetServiceOk returns a tuple with the Service field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Finding) GetServiceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Service.Get(), o.Service.IsSet()
}

// HasService returns a boolean if a field has been set.
func (o *Finding) HasService() bool {
	if o != nil && o.Service.IsSet() {
		return true
	}

	return false
}

// SetService gets a reference to the given NullableString and assigns it to the Service field.
func (o *Finding) SetService(v string) {
	o.Service.Set(&v)
}
// SetServiceNil sets the value for Service to be an explicit nil
func (o *Finding) SetServiceNil() {
	o.Service.Set(nil)
}

// UnsetService ensures that no value is present for Service, not even an explicit nil
func (o *Finding) UnsetService() {
	o.Service.Unset()
}

// GetPlannedRemediationDate returns the PlannedRemediationDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Finding) GetPlannedRemediationDate() string {
	if o == nil || IsNil(o.PlannedRemediationDate.Get()) {
		var ret string
		return ret
	}
	return *o.PlannedRemediationDate.Get()
}

// GetPlannedRemediationDateOk returns a tuple with the PlannedRemediationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Finding) GetPlannedRemediationDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PlannedRemediationDate.Get(), o.PlannedRemediationDate.IsSet()
}

// HasPlannedRemediationDate returns a boolean if a field has been set.
func (o *Finding) HasPlannedRemediationDate() bool {
	if o != nil && o.PlannedRemediationDate.IsSet() {
		return true
	}

	return false
}

// SetPlannedRemediationDate gets a reference to the given NullableString and assigns it to the PlannedRemediationDate field.
func (o *Finding) SetPlannedRemediationDate(v string) {
	o.PlannedRemediationDate.Set(&v)
}
// SetPlannedRemediationDateNil sets the value for PlannedRemediationDate to be an explicit nil
func (o *Finding) SetPlannedRemediationDateNil() {
	o.PlannedRemediationDate.Set(nil)
}

// UnsetPlannedRemediationDate ensures that no value is present for PlannedRemediationDate, not even an explicit nil
func (o *Finding) UnsetPlannedRemediationDate() {
	o.PlannedRemediationDate.Unset()
}

// GetPlannedRemediationVersion returns the PlannedRemediationVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Finding) GetPlannedRemediationVersion() string {
	if o == nil || IsNil(o.PlannedRemediationVersion.Get()) {
		var ret string
		return ret
	}
	return *o.PlannedRemediationVersion.Get()
}

// GetPlannedRemediationVersionOk returns a tuple with the PlannedRemediationVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Finding) GetPlannedRemediationVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PlannedRemediationVersion.Get(), o.PlannedRemediationVersion.IsSet()
}

// HasPlannedRemediationVersion returns a boolean if a field has been set.
func (o *Finding) HasPlannedRemediationVersion() bool {
	if o != nil && o.PlannedRemediationVersion.IsSet() {
		return true
	}

	return false
}

// SetPlannedRemediationVersion gets a reference to the given NullableString and assigns it to the PlannedRemediationVersion field.
func (o *Finding) SetPlannedRemediationVersion(v string) {
	o.PlannedRemediationVersion.Set(&v)
}
// SetPlannedRemediationVersionNil sets the value for PlannedRemediationVersion to be an explicit nil
func (o *Finding) SetPlannedRemediationVersionNil() {
	o.PlannedRemediationVersion.Set(nil)
}

// UnsetPlannedRemediationVersion ensures that no value is present for PlannedRemediationVersion, not even an explicit nil
func (o *Finding) UnsetPlannedRemediationVersion() {
	o.PlannedRemediationVersion.Unset()
}

// GetEffortForFixing returns the EffortForFixing field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Finding) GetEffortForFixing() string {
	if o == nil || IsNil(o.EffortForFixing.Get()) {
		var ret string
		return ret
	}
	return *o.EffortForFixing.Get()
}

// GetEffortForFixingOk returns a tuple with the EffortForFixing field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Finding) GetEffortForFixingOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EffortForFixing.Get(), o.EffortForFixing.IsSet()
}

// HasEffortForFixing returns a boolean if a field has been set.
func (o *Finding) HasEffortForFixing() bool {
	if o != nil && o.EffortForFixing.IsSet() {
		return true
	}

	return false
}

// SetEffortForFixing gets a reference to the given NullableString and assigns it to the EffortForFixing field.
func (o *Finding) SetEffortForFixing(v string) {
	o.EffortForFixing.Set(&v)
}
// SetEffortForFixingNil sets the value for EffortForFixing to be an explicit nil
func (o *Finding) SetEffortForFixingNil() {
	o.EffortForFixing.Set(nil)
}

// UnsetEffortForFixing ensures that no value is present for EffortForFixing, not even an explicit nil
func (o *Finding) UnsetEffortForFixing() {
	o.EffortForFixing.Unset()
}

// GetTest returns the Test field value
func (o *Finding) GetTest() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Test
}

// GetTestOk returns a tuple with the Test field value
// and a boolean to check if the value has been set.
func (o *Finding) GetTestOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Test, true
}

// SetTest sets field value
func (o *Finding) SetTest(v int32) {
	o.Test = v
}

// GetDuplicateFinding returns the DuplicateFinding field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *Finding) GetDuplicateFinding() int32 {
	if o == nil || o.DuplicateFinding.Get() == nil {
		var ret int32
		return ret
	}

	return *o.DuplicateFinding.Get()
}

// GetDuplicateFindingOk returns a tuple with the DuplicateFinding field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Finding) GetDuplicateFindingOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.DuplicateFinding.Get(), o.DuplicateFinding.IsSet()
}

// SetDuplicateFinding sets field value
func (o *Finding) SetDuplicateFinding(v int32) {
	o.DuplicateFinding.Set(&v)
}

// GetReviewRequestedBy returns the ReviewRequestedBy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Finding) GetReviewRequestedBy() int32 {
	if o == nil || IsNil(o.ReviewRequestedBy.Get()) {
		var ret int32
		return ret
	}
	return *o.ReviewRequestedBy.Get()
}

// GetReviewRequestedByOk returns a tuple with the ReviewRequestedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Finding) GetReviewRequestedByOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ReviewRequestedBy.Get(), o.ReviewRequestedBy.IsSet()
}

// HasReviewRequestedBy returns a boolean if a field has been set.
func (o *Finding) HasReviewRequestedBy() bool {
	if o != nil && o.ReviewRequestedBy.IsSet() {
		return true
	}

	return false
}

// SetReviewRequestedBy gets a reference to the given NullableInt32 and assigns it to the ReviewRequestedBy field.
func (o *Finding) SetReviewRequestedBy(v int32) {
	o.ReviewRequestedBy.Set(&v)
}
// SetReviewRequestedByNil sets the value for ReviewRequestedBy to be an explicit nil
func (o *Finding) SetReviewRequestedByNil() {
	o.ReviewRequestedBy.Set(nil)
}

// UnsetReviewRequestedBy ensures that no value is present for ReviewRequestedBy, not even an explicit nil
func (o *Finding) UnsetReviewRequestedBy() {
	o.ReviewRequestedBy.Unset()
}

// GetDefectReviewRequestedBy returns the DefectReviewRequestedBy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Finding) GetDefectReviewRequestedBy() int32 {
	if o == nil || IsNil(o.DefectReviewRequestedBy.Get()) {
		var ret int32
		return ret
	}
	return *o.DefectReviewRequestedBy.Get()
}

// GetDefectReviewRequestedByOk returns a tuple with the DefectReviewRequestedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Finding) GetDefectReviewRequestedByOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.DefectReviewRequestedBy.Get(), o.DefectReviewRequestedBy.IsSet()
}

// HasDefectReviewRequestedBy returns a boolean if a field has been set.
func (o *Finding) HasDefectReviewRequestedBy() bool {
	if o != nil && o.DefectReviewRequestedBy.IsSet() {
		return true
	}

	return false
}

// SetDefectReviewRequestedBy gets a reference to the given NullableInt32 and assigns it to the DefectReviewRequestedBy field.
func (o *Finding) SetDefectReviewRequestedBy(v int32) {
	o.DefectReviewRequestedBy.Set(&v)
}
// SetDefectReviewRequestedByNil sets the value for DefectReviewRequestedBy to be an explicit nil
func (o *Finding) SetDefectReviewRequestedByNil() {
	o.DefectReviewRequestedBy.Set(nil)
}

// UnsetDefectReviewRequestedBy ensures that no value is present for DefectReviewRequestedBy, not even an explicit nil
func (o *Finding) UnsetDefectReviewRequestedBy() {
	o.DefectReviewRequestedBy.Unset()
}

// GetMitigatedBy returns the MitigatedBy field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *Finding) GetMitigatedBy() int32 {
	if o == nil || o.MitigatedBy.Get() == nil {
		var ret int32
		return ret
	}

	return *o.MitigatedBy.Get()
}

// GetMitigatedByOk returns a tuple with the MitigatedBy field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Finding) GetMitigatedByOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MitigatedBy.Get(), o.MitigatedBy.IsSet()
}

// SetMitigatedBy sets field value
func (o *Finding) SetMitigatedBy(v int32) {
	o.MitigatedBy.Set(&v)
}

// GetLastReviewedBy returns the LastReviewedBy field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *Finding) GetLastReviewedBy() int32 {
	if o == nil || o.LastReviewedBy.Get() == nil {
		var ret int32
		return ret
	}

	return *o.LastReviewedBy.Get()
}

// GetLastReviewedByOk returns a tuple with the LastReviewedBy field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Finding) GetLastReviewedByOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastReviewedBy.Get(), o.LastReviewedBy.IsSet()
}

// SetLastReviewedBy sets field value
func (o *Finding) SetLastReviewedBy(v int32) {
	o.LastReviewedBy.Set(&v)
}

// GetSonarqubeIssue returns the SonarqubeIssue field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Finding) GetSonarqubeIssue() int32 {
	if o == nil || IsNil(o.SonarqubeIssue.Get()) {
		var ret int32
		return ret
	}
	return *o.SonarqubeIssue.Get()
}

// GetSonarqubeIssueOk returns a tuple with the SonarqubeIssue field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Finding) GetSonarqubeIssueOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.SonarqubeIssue.Get(), o.SonarqubeIssue.IsSet()
}

// HasSonarqubeIssue returns a boolean if a field has been set.
func (o *Finding) HasSonarqubeIssue() bool {
	if o != nil && o.SonarqubeIssue.IsSet() {
		return true
	}

	return false
}

// SetSonarqubeIssue gets a reference to the given NullableInt32 and assigns it to the SonarqubeIssue field.
func (o *Finding) SetSonarqubeIssue(v int32) {
	o.SonarqubeIssue.Set(&v)
}
// SetSonarqubeIssueNil sets the value for SonarqubeIssue to be an explicit nil
func (o *Finding) SetSonarqubeIssueNil() {
	o.SonarqubeIssue.Set(nil)
}

// UnsetSonarqubeIssue ensures that no value is present for SonarqubeIssue, not even an explicit nil
func (o *Finding) UnsetSonarqubeIssue() {
	o.SonarqubeIssue.Unset()
}

// GetEndpoints returns the Endpoints field value
func (o *Finding) GetEndpoints() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}

	return o.Endpoints
}

// GetEndpointsOk returns a tuple with the Endpoints field value
// and a boolean to check if the value has been set.
func (o *Finding) GetEndpointsOk() ([]int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Endpoints, true
}

// SetEndpoints sets field value
func (o *Finding) SetEndpoints(v []int32) {
	o.Endpoints = v
}

// GetReviewers returns the Reviewers field value if set, zero value otherwise.
func (o *Finding) GetReviewers() []int32 {
	if o == nil || IsNil(o.Reviewers) {
		var ret []int32
		return ret
	}
	return o.Reviewers
}

// GetReviewersOk returns a tuple with the Reviewers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Finding) GetReviewersOk() ([]int32, bool) {
	if o == nil || IsNil(o.Reviewers) {
		return nil, false
	}
	return o.Reviewers, true
}

// HasReviewers returns a boolean if a field has been set.
func (o *Finding) HasReviewers() bool {
	if o != nil && !IsNil(o.Reviewers) {
		return true
	}

	return false
}

// SetReviewers gets a reference to the given []int32 and assigns it to the Reviewers field.
func (o *Finding) SetReviewers(v []int32) {
	o.Reviewers = v
}

// GetNotes returns the Notes field value
func (o *Finding) GetNotes() []Note {
	if o == nil {
		var ret []Note
		return ret
	}

	return o.Notes
}

// GetNotesOk returns a tuple with the Notes field value
// and a boolean to check if the value has been set.
func (o *Finding) GetNotesOk() ([]Note, bool) {
	if o == nil {
		return nil, false
	}
	return o.Notes, true
}

// SetNotes sets field value
func (o *Finding) SetNotes(v []Note) {
	o.Notes = v
}

// GetFiles returns the Files field value
func (o *Finding) GetFiles() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}

	return o.Files
}

// GetFilesOk returns a tuple with the Files field value
// and a boolean to check if the value has been set.
func (o *Finding) GetFilesOk() ([]int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Files, true
}

// SetFiles sets field value
func (o *Finding) SetFiles(v []int32) {
	o.Files = v
}

// GetFoundBy returns the FoundBy field value
func (o *Finding) GetFoundBy() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}

	return o.FoundBy
}

// GetFoundByOk returns a tuple with the FoundBy field value
// and a boolean to check if the value has been set.
func (o *Finding) GetFoundByOk() ([]int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.FoundBy, true
}

// SetFoundBy sets field value
func (o *Finding) SetFoundBy(v []int32) {
	o.FoundBy = v
}

// GetPrefetch returns the Prefetch field value if set, zero value otherwise.
func (o *Finding) GetPrefetch() FindingPrefetch {
	if o == nil || IsNil(o.Prefetch) {
		var ret FindingPrefetch
		return ret
	}
	return *o.Prefetch
}

// GetPrefetchOk returns a tuple with the Prefetch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Finding) GetPrefetchOk() (*FindingPrefetch, bool) {
	if o == nil || IsNil(o.Prefetch) {
		return nil, false
	}
	return o.Prefetch, true
}

// HasPrefetch returns a boolean if a field has been set.
func (o *Finding) HasPrefetch() bool {
	if o != nil && !IsNil(o.Prefetch) {
		return true
	}

	return false
}

// SetPrefetch gets a reference to the given FindingPrefetch and assigns it to the Prefetch field.
func (o *Finding) SetPrefetch(v FindingPrefetch) {
	o.Prefetch = &v
}

func (o Finding) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Finding) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	toSerialize["request_response"] = o.RequestResponse
	toSerialize["accepted_risks"] = o.AcceptedRisks
	if !IsNil(o.PushToJira) {
		toSerialize["push_to_jira"] = o.PushToJira
	}
	toSerialize["age"] = o.Age
	toSerialize["sla_days_remaining"] = o.SlaDaysRemaining
	toSerialize["finding_meta"] = o.FindingMeta
	toSerialize["related_fields"] = o.RelatedFields
	toSerialize["jira_creation"] = o.JiraCreation
	toSerialize["jira_change"] = o.JiraChange
	toSerialize["display_status"] = o.DisplayStatus
	toSerialize["finding_groups"] = o.FindingGroups
	if !IsNil(o.VulnerabilityIds) {
		toSerialize["vulnerability_ids"] = o.VulnerabilityIds
	}
	if !IsNil(o.Reporter) {
		toSerialize["reporter"] = o.Reporter
	}
	toSerialize["title"] = o.Title
	if !IsNil(o.Date) {
		toSerialize["date"] = o.Date
	}
	if o.SlaStartDate.IsSet() {
		toSerialize["sla_start_date"] = o.SlaStartDate.Get()
	}
	if o.SlaExpirationDate.IsSet() {
		toSerialize["sla_expiration_date"] = o.SlaExpirationDate.Get()
	}
	if o.Cwe.IsSet() {
		toSerialize["cwe"] = o.Cwe.Get()
	}
	if o.Cvssv3.IsSet() {
		toSerialize["cvssv3"] = o.Cvssv3.Get()
	}
	if o.Cvssv3Score.IsSet() {
		toSerialize["cvssv3_score"] = o.Cvssv3Score.Get()
	}
	toSerialize["url"] = o.Url.Get()
	toSerialize["severity"] = o.Severity
	toSerialize["description"] = o.Description
	if o.Mitigation.IsSet() {
		toSerialize["mitigation"] = o.Mitigation.Get()
	}
	if o.Impact.IsSet() {
		toSerialize["impact"] = o.Impact.Get()
	}
	if o.StepsToReproduce.IsSet() {
		toSerialize["steps_to_reproduce"] = o.StepsToReproduce.Get()
	}
	if o.SeverityJustification.IsSet() {
		toSerialize["severity_justification"] = o.SeverityJustification.Get()
	}
	if o.References.IsSet() {
		toSerialize["references"] = o.References.Get()
	}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !IsNil(o.Verified) {
		toSerialize["verified"] = o.Verified
	}
	if !IsNil(o.FalseP) {
		toSerialize["false_p"] = o.FalseP
	}
	if !IsNil(o.Duplicate) {
		toSerialize["duplicate"] = o.Duplicate
	}
	if !IsNil(o.OutOfScope) {
		toSerialize["out_of_scope"] = o.OutOfScope
	}
	if !IsNil(o.RiskAccepted) {
		toSerialize["risk_accepted"] = o.RiskAccepted
	}
	if !IsNil(o.UnderReview) {
		toSerialize["under_review"] = o.UnderReview
	}
	toSerialize["last_status_update"] = o.LastStatusUpdate.Get()
	if !IsNil(o.UnderDefectReview) {
		toSerialize["under_defect_review"] = o.UnderDefectReview
	}
	if !IsNil(o.IsMitigated) {
		toSerialize["is_mitigated"] = o.IsMitigated
	}
	toSerialize["thread_id"] = o.ThreadId
	toSerialize["mitigated"] = o.Mitigated.Get()
	toSerialize["numerical_severity"] = o.NumericalSeverity
	toSerialize["last_reviewed"] = o.LastReviewed.Get()
	toSerialize["param"] = o.Param.Get()
	toSerialize["payload"] = o.Payload.Get()
	toSerialize["hash_code"] = o.HashCode.Get()
	if o.Line.IsSet() {
		toSerialize["line"] = o.Line.Get()
	}
	if o.FilePath.IsSet() {
		toSerialize["file_path"] = o.FilePath.Get()
	}
	if o.ComponentName.IsSet() {
		toSerialize["component_name"] = o.ComponentName.Get()
	}
	if o.ComponentVersion.IsSet() {
		toSerialize["component_version"] = o.ComponentVersion.Get()
	}
	if !IsNil(o.StaticFinding) {
		toSerialize["static_finding"] = o.StaticFinding
	}
	if !IsNil(o.DynamicFinding) {
		toSerialize["dynamic_finding"] = o.DynamicFinding
	}
	toSerialize["created"] = o.Created.Get()
	toSerialize["scanner_confidence"] = o.ScannerConfidence.Get()
	if o.UniqueIdFromTool.IsSet() {
		toSerialize["unique_id_from_tool"] = o.UniqueIdFromTool.Get()
	}
	if o.VulnIdFromTool.IsSet() {
		toSerialize["vuln_id_from_tool"] = o.VulnIdFromTool.Get()
	}
	if o.SastSourceObject.IsSet() {
		toSerialize["sast_source_object"] = o.SastSourceObject.Get()
	}
	if o.SastSinkObject.IsSet() {
		toSerialize["sast_sink_object"] = o.SastSinkObject.Get()
	}
	if o.SastSourceLine.IsSet() {
		toSerialize["sast_source_line"] = o.SastSourceLine.Get()
	}
	if o.SastSourceFilePath.IsSet() {
		toSerialize["sast_source_file_path"] = o.SastSourceFilePath.Get()
	}
	if o.NbOccurences.IsSet() {
		toSerialize["nb_occurences"] = o.NbOccurences.Get()
	}
	if o.PublishDate.IsSet() {
		toSerialize["publish_date"] = o.PublishDate.Get()
	}
	if o.Service.IsSet() {
		toSerialize["service"] = o.Service.Get()
	}
	if o.PlannedRemediationDate.IsSet() {
		toSerialize["planned_remediation_date"] = o.PlannedRemediationDate.Get()
	}
	if o.PlannedRemediationVersion.IsSet() {
		toSerialize["planned_remediation_version"] = o.PlannedRemediationVersion.Get()
	}
	if o.EffortForFixing.IsSet() {
		toSerialize["effort_for_fixing"] = o.EffortForFixing.Get()
	}
	toSerialize["test"] = o.Test
	toSerialize["duplicate_finding"] = o.DuplicateFinding.Get()
	if o.ReviewRequestedBy.IsSet() {
		toSerialize["review_requested_by"] = o.ReviewRequestedBy.Get()
	}
	if o.DefectReviewRequestedBy.IsSet() {
		toSerialize["defect_review_requested_by"] = o.DefectReviewRequestedBy.Get()
	}
	toSerialize["mitigated_by"] = o.MitigatedBy.Get()
	toSerialize["last_reviewed_by"] = o.LastReviewedBy.Get()
	if o.SonarqubeIssue.IsSet() {
		toSerialize["sonarqube_issue"] = o.SonarqubeIssue.Get()
	}
	toSerialize["endpoints"] = o.Endpoints
	if !IsNil(o.Reviewers) {
		toSerialize["reviewers"] = o.Reviewers
	}
	toSerialize["notes"] = o.Notes
	toSerialize["files"] = o.Files
	toSerialize["found_by"] = o.FoundBy
	if !IsNil(o.Prefetch) {
		toSerialize["prefetch"] = o.Prefetch
	}
	return toSerialize, nil
}

func (o *Finding) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"request_response",
		"accepted_risks",
		"age",
		"sla_days_remaining",
		"finding_meta",
		"related_fields",
		"jira_creation",
		"jira_change",
		"display_status",
		"finding_groups",
		"title",
		"url",
		"severity",
		"description",
		"last_status_update",
		"thread_id",
		"mitigated",
		"numerical_severity",
		"last_reviewed",
		"param",
		"payload",
		"hash_code",
		"created",
		"scanner_confidence",
		"test",
		"duplicate_finding",
		"mitigated_by",
		"last_reviewed_by",
		"endpoints",
		"notes",
		"files",
		"found_by",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFinding := _Finding{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFinding)

	if err != nil {
		return err
	}

	*o = Finding(varFinding)

	return err
}

type NullableFinding struct {
	value *Finding
	isSet bool
}

func (v NullableFinding) Get() *Finding {
	return v.value
}

func (v *NullableFinding) Set(val *Finding) {
	v.value = val
	v.isSet = true
}

func (v NullableFinding) IsSet() bool {
	return v.isSet
}

func (v *NullableFinding) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFinding(val *Finding) *NullableFinding {
	return &NullableFinding{value: val, isSet: true}
}

func (v NullableFinding) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFinding) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


