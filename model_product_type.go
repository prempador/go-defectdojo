/*
Defect Dojo API v2

Defect Dojo - Open Source vulnerability Management made easy. Prefetch related parameters/responses not yet in the schema.

API version: 2.31.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package defectdojo

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the ProductType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProductType{}

// ProductType struct for ProductType
type ProductType struct {
	Id int32 `json:"id"`
	Name string `json:"name"`
	Description NullableString `json:"description,omitempty"`
	CriticalProduct *bool `json:"critical_product,omitempty"`
	KeyProduct *bool `json:"key_product,omitempty"`
	Updated NullableTime `json:"updated"`
	Created NullableTime `json:"created"`
	Members []int32 `json:"members"`
	AuthorizationGroups []int32 `json:"authorization_groups"`
	Prefetch *PaginatedProductTypeListPrefetch `json:"prefetch,omitempty"`
}

type _ProductType ProductType

// NewProductType instantiates a new ProductType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProductType(id int32, name string, updated NullableTime, created NullableTime, members []int32, authorizationGroups []int32) *ProductType {
	this := ProductType{}
	this.Id = id
	this.Name = name
	this.Updated = updated
	this.Created = created
	this.Members = members
	this.AuthorizationGroups = authorizationGroups
	return &this
}

// NewProductTypeWithDefaults instantiates a new ProductType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProductTypeWithDefaults() *ProductType {
	this := ProductType{}
	return &this
}

// GetId returns the Id field value
func (o *ProductType) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ProductType) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ProductType) SetId(v int32) {
	o.Id = v
}

// GetName returns the Name field value
func (o *ProductType) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ProductType) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ProductType) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProductType) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProductType) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *ProductType) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *ProductType) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *ProductType) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *ProductType) UnsetDescription() {
	o.Description.Unset()
}

// GetCriticalProduct returns the CriticalProduct field value if set, zero value otherwise.
func (o *ProductType) GetCriticalProduct() bool {
	if o == nil || IsNil(o.CriticalProduct) {
		var ret bool
		return ret
	}
	return *o.CriticalProduct
}

// GetCriticalProductOk returns a tuple with the CriticalProduct field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductType) GetCriticalProductOk() (*bool, bool) {
	if o == nil || IsNil(o.CriticalProduct) {
		return nil, false
	}
	return o.CriticalProduct, true
}

// HasCriticalProduct returns a boolean if a field has been set.
func (o *ProductType) HasCriticalProduct() bool {
	if o != nil && !IsNil(o.CriticalProduct) {
		return true
	}

	return false
}

// SetCriticalProduct gets a reference to the given bool and assigns it to the CriticalProduct field.
func (o *ProductType) SetCriticalProduct(v bool) {
	o.CriticalProduct = &v
}

// GetKeyProduct returns the KeyProduct field value if set, zero value otherwise.
func (o *ProductType) GetKeyProduct() bool {
	if o == nil || IsNil(o.KeyProduct) {
		var ret bool
		return ret
	}
	return *o.KeyProduct
}

// GetKeyProductOk returns a tuple with the KeyProduct field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductType) GetKeyProductOk() (*bool, bool) {
	if o == nil || IsNil(o.KeyProduct) {
		return nil, false
	}
	return o.KeyProduct, true
}

// HasKeyProduct returns a boolean if a field has been set.
func (o *ProductType) HasKeyProduct() bool {
	if o != nil && !IsNil(o.KeyProduct) {
		return true
	}

	return false
}

// SetKeyProduct gets a reference to the given bool and assigns it to the KeyProduct field.
func (o *ProductType) SetKeyProduct(v bool) {
	o.KeyProduct = &v
}

// GetUpdated returns the Updated field value
// If the value is explicit nil, the zero value for time.Time will be returned
func (o *ProductType) GetUpdated() time.Time {
	if o == nil || o.Updated.Get() == nil {
		var ret time.Time
		return ret
	}

	return *o.Updated.Get()
}

// GetUpdatedOk returns a tuple with the Updated field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProductType) GetUpdatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.Updated.Get(), o.Updated.IsSet()
}

// SetUpdated sets field value
func (o *ProductType) SetUpdated(v time.Time) {
	o.Updated.Set(&v)
}

// GetCreated returns the Created field value
// If the value is explicit nil, the zero value for time.Time will be returned
func (o *ProductType) GetCreated() time.Time {
	if o == nil || o.Created.Get() == nil {
		var ret time.Time
		return ret
	}

	return *o.Created.Get()
}

// GetCreatedOk returns a tuple with the Created field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProductType) GetCreatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.Created.Get(), o.Created.IsSet()
}

// SetCreated sets field value
func (o *ProductType) SetCreated(v time.Time) {
	o.Created.Set(&v)
}

// GetMembers returns the Members field value
func (o *ProductType) GetMembers() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}

	return o.Members
}

// GetMembersOk returns a tuple with the Members field value
// and a boolean to check if the value has been set.
func (o *ProductType) GetMembersOk() ([]int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Members, true
}

// SetMembers sets field value
func (o *ProductType) SetMembers(v []int32) {
	o.Members = v
}

// GetAuthorizationGroups returns the AuthorizationGroups field value
func (o *ProductType) GetAuthorizationGroups() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}

	return o.AuthorizationGroups
}

// GetAuthorizationGroupsOk returns a tuple with the AuthorizationGroups field value
// and a boolean to check if the value has been set.
func (o *ProductType) GetAuthorizationGroupsOk() ([]int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.AuthorizationGroups, true
}

// SetAuthorizationGroups sets field value
func (o *ProductType) SetAuthorizationGroups(v []int32) {
	o.AuthorizationGroups = v
}

// GetPrefetch returns the Prefetch field value if set, zero value otherwise.
func (o *ProductType) GetPrefetch() PaginatedProductTypeListPrefetch {
	if o == nil || IsNil(o.Prefetch) {
		var ret PaginatedProductTypeListPrefetch
		return ret
	}
	return *o.Prefetch
}

// GetPrefetchOk returns a tuple with the Prefetch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductType) GetPrefetchOk() (*PaginatedProductTypeListPrefetch, bool) {
	if o == nil || IsNil(o.Prefetch) {
		return nil, false
	}
	return o.Prefetch, true
}

// HasPrefetch returns a boolean if a field has been set.
func (o *ProductType) HasPrefetch() bool {
	if o != nil && !IsNil(o.Prefetch) {
		return true
	}

	return false
}

// SetPrefetch gets a reference to the given PaginatedProductTypeListPrefetch and assigns it to the Prefetch field.
func (o *ProductType) SetPrefetch(v PaginatedProductTypeListPrefetch) {
	o.Prefetch = &v
}

func (o ProductType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProductType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if !IsNil(o.CriticalProduct) {
		toSerialize["critical_product"] = o.CriticalProduct
	}
	if !IsNil(o.KeyProduct) {
		toSerialize["key_product"] = o.KeyProduct
	}
	toSerialize["updated"] = o.Updated.Get()
	toSerialize["created"] = o.Created.Get()
	toSerialize["members"] = o.Members
	toSerialize["authorization_groups"] = o.AuthorizationGroups
	if !IsNil(o.Prefetch) {
		toSerialize["prefetch"] = o.Prefetch
	}
	return toSerialize, nil
}

func (o *ProductType) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"updated",
		"created",
		"members",
		"authorization_groups",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProductType := _ProductType{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varProductType)

	if err != nil {
		return err
	}

	*o = ProductType(varProductType)

	return err
}

type NullableProductType struct {
	value *ProductType
	isSet bool
}

func (v NullableProductType) Get() *ProductType {
	return v.value
}

func (v *NullableProductType) Set(val *ProductType) {
	v.value = val
	v.isSet = true
}

func (v NullableProductType) IsSet() bool {
	return v.isSet
}

func (v *NullableProductType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProductType(val *ProductType) *NullableProductType {
	return &NullableProductType{value: val, isSet: true}
}

func (v NullableProductType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProductType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


