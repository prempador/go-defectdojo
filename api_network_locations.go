/*
Defect Dojo API v2

Defect Dojo - Open Source vulnerability Management made easy. Prefetch related parameters/responses not yet in the schema.

API version: 2.30.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package defectdojo

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type NetworkLocationsAPI interface {

	/*
	NetworkLocationsCreate Method for NetworkLocationsCreate

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiNetworkLocationsCreateRequest
	*/
	NetworkLocationsCreate(ctx context.Context) ApiNetworkLocationsCreateRequest

	// NetworkLocationsCreateExecute executes the request
	//  @return NetworkLocations
	NetworkLocationsCreateExecute(r ApiNetworkLocationsCreateRequest) (*NetworkLocations, *http.Response, error)

	/*
	NetworkLocationsDeletePreviewList Method for NetworkLocationsDeletePreviewList

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this network_ locations.
	@return ApiNetworkLocationsDeletePreviewListRequest
	*/
	NetworkLocationsDeletePreviewList(ctx context.Context, id int32) ApiNetworkLocationsDeletePreviewListRequest

	// NetworkLocationsDeletePreviewListExecute executes the request
	//  @return PaginatedDeletePreviewList
	NetworkLocationsDeletePreviewListExecute(r ApiNetworkLocationsDeletePreviewListRequest) (*PaginatedDeletePreviewList, *http.Response, error)

	/*
	NetworkLocationsDestroy Method for NetworkLocationsDestroy

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this network_ locations.
	@return ApiNetworkLocationsDestroyRequest
	*/
	NetworkLocationsDestroy(ctx context.Context, id int32) ApiNetworkLocationsDestroyRequest

	// NetworkLocationsDestroyExecute executes the request
	NetworkLocationsDestroyExecute(r ApiNetworkLocationsDestroyRequest) (*http.Response, error)

	/*
	NetworkLocationsList Method for NetworkLocationsList

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiNetworkLocationsListRequest
	*/
	NetworkLocationsList(ctx context.Context) ApiNetworkLocationsListRequest

	// NetworkLocationsListExecute executes the request
	//  @return PaginatedNetworkLocationsList
	NetworkLocationsListExecute(r ApiNetworkLocationsListRequest) (*PaginatedNetworkLocationsList, *http.Response, error)

	/*
	NetworkLocationsPartialUpdate Method for NetworkLocationsPartialUpdate

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this network_ locations.
	@return ApiNetworkLocationsPartialUpdateRequest
	*/
	NetworkLocationsPartialUpdate(ctx context.Context, id int32) ApiNetworkLocationsPartialUpdateRequest

	// NetworkLocationsPartialUpdateExecute executes the request
	//  @return NetworkLocations
	NetworkLocationsPartialUpdateExecute(r ApiNetworkLocationsPartialUpdateRequest) (*NetworkLocations, *http.Response, error)

	/*
	NetworkLocationsRetrieve Method for NetworkLocationsRetrieve

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this network_ locations.
	@return ApiNetworkLocationsRetrieveRequest
	*/
	NetworkLocationsRetrieve(ctx context.Context, id int32) ApiNetworkLocationsRetrieveRequest

	// NetworkLocationsRetrieveExecute executes the request
	//  @return NetworkLocations
	NetworkLocationsRetrieveExecute(r ApiNetworkLocationsRetrieveRequest) (*NetworkLocations, *http.Response, error)

	/*
	NetworkLocationsUpdate Method for NetworkLocationsUpdate

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this network_ locations.
	@return ApiNetworkLocationsUpdateRequest
	*/
	NetworkLocationsUpdate(ctx context.Context, id int32) ApiNetworkLocationsUpdateRequest

	// NetworkLocationsUpdateExecute executes the request
	//  @return NetworkLocations
	NetworkLocationsUpdateExecute(r ApiNetworkLocationsUpdateRequest) (*NetworkLocations, *http.Response, error)
}

// NetworkLocationsAPIService NetworkLocationsAPI service
type NetworkLocationsAPIService service

type ApiNetworkLocationsCreateRequest struct {
	ctx context.Context
	ApiService NetworkLocationsAPI
	networkLocationsRequest *NetworkLocationsRequest
}

func (r ApiNetworkLocationsCreateRequest) NetworkLocationsRequest(networkLocationsRequest NetworkLocationsRequest) ApiNetworkLocationsCreateRequest {
	r.networkLocationsRequest = &networkLocationsRequest
	return r
}

func (r ApiNetworkLocationsCreateRequest) Execute() (*NetworkLocations, *http.Response, error) {
	return r.ApiService.NetworkLocationsCreateExecute(r)
}

/*
NetworkLocationsCreate Method for NetworkLocationsCreate

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiNetworkLocationsCreateRequest
*/
func (a *NetworkLocationsAPIService) NetworkLocationsCreate(ctx context.Context) ApiNetworkLocationsCreateRequest {
	return ApiNetworkLocationsCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return NetworkLocations
func (a *NetworkLocationsAPIService) NetworkLocationsCreateExecute(r ApiNetworkLocationsCreateRequest) (*NetworkLocations, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NetworkLocations
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkLocationsAPIService.NetworkLocationsCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/network_locations/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.networkLocationsRequest == nil {
		return localVarReturnValue, nil, reportError("networkLocationsRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.networkLocationsRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiNetworkLocationsDeletePreviewListRequest struct {
	ctx context.Context
	ApiService NetworkLocationsAPI
	id int32
	limit *int32
	offset *int32
}

// Number of results to return per page.
func (r ApiNetworkLocationsDeletePreviewListRequest) Limit(limit int32) ApiNetworkLocationsDeletePreviewListRequest {
	r.limit = &limit
	return r
}

// The initial index from which to return the results.
func (r ApiNetworkLocationsDeletePreviewListRequest) Offset(offset int32) ApiNetworkLocationsDeletePreviewListRequest {
	r.offset = &offset
	return r
}

func (r ApiNetworkLocationsDeletePreviewListRequest) Execute() (*PaginatedDeletePreviewList, *http.Response, error) {
	return r.ApiService.NetworkLocationsDeletePreviewListExecute(r)
}

/*
NetworkLocationsDeletePreviewList Method for NetworkLocationsDeletePreviewList

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A unique integer value identifying this network_ locations.
 @return ApiNetworkLocationsDeletePreviewListRequest
*/
func (a *NetworkLocationsAPIService) NetworkLocationsDeletePreviewList(ctx context.Context, id int32) ApiNetworkLocationsDeletePreviewListRequest {
	return ApiNetworkLocationsDeletePreviewListRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PaginatedDeletePreviewList
func (a *NetworkLocationsAPIService) NetworkLocationsDeletePreviewListExecute(r ApiNetworkLocationsDeletePreviewListRequest) (*PaginatedDeletePreviewList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedDeletePreviewList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkLocationsAPIService.NetworkLocationsDeletePreviewList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/network_locations/{id}/delete_preview/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiNetworkLocationsDestroyRequest struct {
	ctx context.Context
	ApiService NetworkLocationsAPI
	id int32
}

func (r ApiNetworkLocationsDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.NetworkLocationsDestroyExecute(r)
}

/*
NetworkLocationsDestroy Method for NetworkLocationsDestroy

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A unique integer value identifying this network_ locations.
 @return ApiNetworkLocationsDestroyRequest
*/
func (a *NetworkLocationsAPIService) NetworkLocationsDestroy(ctx context.Context, id int32) ApiNetworkLocationsDestroyRequest {
	return ApiNetworkLocationsDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *NetworkLocationsAPIService) NetworkLocationsDestroyExecute(r ApiNetworkLocationsDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkLocationsAPIService.NetworkLocationsDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/network_locations/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiNetworkLocationsListRequest struct {
	ctx context.Context
	ApiService NetworkLocationsAPI
	id *int32
	limit *int32
	location *string
	offset *int32
}

func (r ApiNetworkLocationsListRequest) Id(id int32) ApiNetworkLocationsListRequest {
	r.id = &id
	return r
}

// Number of results to return per page.
func (r ApiNetworkLocationsListRequest) Limit(limit int32) ApiNetworkLocationsListRequest {
	r.limit = &limit
	return r
}

func (r ApiNetworkLocationsListRequest) Location(location string) ApiNetworkLocationsListRequest {
	r.location = &location
	return r
}

// The initial index from which to return the results.
func (r ApiNetworkLocationsListRequest) Offset(offset int32) ApiNetworkLocationsListRequest {
	r.offset = &offset
	return r
}

func (r ApiNetworkLocationsListRequest) Execute() (*PaginatedNetworkLocationsList, *http.Response, error) {
	return r.ApiService.NetworkLocationsListExecute(r)
}

/*
NetworkLocationsList Method for NetworkLocationsList

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiNetworkLocationsListRequest
*/
func (a *NetworkLocationsAPIService) NetworkLocationsList(ctx context.Context) ApiNetworkLocationsListRequest {
	return ApiNetworkLocationsListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedNetworkLocationsList
func (a *NetworkLocationsAPIService) NetworkLocationsListExecute(r ApiNetworkLocationsListRequest) (*PaginatedNetworkLocationsList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedNetworkLocationsList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkLocationsAPIService.NetworkLocationsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/network_locations/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.id != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id", r.id, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.location != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "location", r.location, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiNetworkLocationsPartialUpdateRequest struct {
	ctx context.Context
	ApiService NetworkLocationsAPI
	id int32
	patchedNetworkLocationsRequest *PatchedNetworkLocationsRequest
}

func (r ApiNetworkLocationsPartialUpdateRequest) PatchedNetworkLocationsRequest(patchedNetworkLocationsRequest PatchedNetworkLocationsRequest) ApiNetworkLocationsPartialUpdateRequest {
	r.patchedNetworkLocationsRequest = &patchedNetworkLocationsRequest
	return r
}

func (r ApiNetworkLocationsPartialUpdateRequest) Execute() (*NetworkLocations, *http.Response, error) {
	return r.ApiService.NetworkLocationsPartialUpdateExecute(r)
}

/*
NetworkLocationsPartialUpdate Method for NetworkLocationsPartialUpdate

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A unique integer value identifying this network_ locations.
 @return ApiNetworkLocationsPartialUpdateRequest
*/
func (a *NetworkLocationsAPIService) NetworkLocationsPartialUpdate(ctx context.Context, id int32) ApiNetworkLocationsPartialUpdateRequest {
	return ApiNetworkLocationsPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return NetworkLocations
func (a *NetworkLocationsAPIService) NetworkLocationsPartialUpdateExecute(r ApiNetworkLocationsPartialUpdateRequest) (*NetworkLocations, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NetworkLocations
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkLocationsAPIService.NetworkLocationsPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/network_locations/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedNetworkLocationsRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiNetworkLocationsRetrieveRequest struct {
	ctx context.Context
	ApiService NetworkLocationsAPI
	id int32
}

func (r ApiNetworkLocationsRetrieveRequest) Execute() (*NetworkLocations, *http.Response, error) {
	return r.ApiService.NetworkLocationsRetrieveExecute(r)
}

/*
NetworkLocationsRetrieve Method for NetworkLocationsRetrieve

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A unique integer value identifying this network_ locations.
 @return ApiNetworkLocationsRetrieveRequest
*/
func (a *NetworkLocationsAPIService) NetworkLocationsRetrieve(ctx context.Context, id int32) ApiNetworkLocationsRetrieveRequest {
	return ApiNetworkLocationsRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return NetworkLocations
func (a *NetworkLocationsAPIService) NetworkLocationsRetrieveExecute(r ApiNetworkLocationsRetrieveRequest) (*NetworkLocations, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NetworkLocations
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkLocationsAPIService.NetworkLocationsRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/network_locations/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiNetworkLocationsUpdateRequest struct {
	ctx context.Context
	ApiService NetworkLocationsAPI
	id int32
	networkLocationsRequest *NetworkLocationsRequest
}

func (r ApiNetworkLocationsUpdateRequest) NetworkLocationsRequest(networkLocationsRequest NetworkLocationsRequest) ApiNetworkLocationsUpdateRequest {
	r.networkLocationsRequest = &networkLocationsRequest
	return r
}

func (r ApiNetworkLocationsUpdateRequest) Execute() (*NetworkLocations, *http.Response, error) {
	return r.ApiService.NetworkLocationsUpdateExecute(r)
}

/*
NetworkLocationsUpdate Method for NetworkLocationsUpdate

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A unique integer value identifying this network_ locations.
 @return ApiNetworkLocationsUpdateRequest
*/
func (a *NetworkLocationsAPIService) NetworkLocationsUpdate(ctx context.Context, id int32) ApiNetworkLocationsUpdateRequest {
	return ApiNetworkLocationsUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return NetworkLocations
func (a *NetworkLocationsAPIService) NetworkLocationsUpdateExecute(r ApiNetworkLocationsUpdateRequest) (*NetworkLocations, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *NetworkLocations
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "NetworkLocationsAPIService.NetworkLocationsUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/network_locations/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.networkLocationsRequest == nil {
		return localVarReturnValue, nil, reportError("networkLocationsRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.networkLocationsRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
