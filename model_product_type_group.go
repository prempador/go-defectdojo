/*
Defect Dojo API v2

Defect Dojo - Open Source vulnerability Management made easy. Prefetch related parameters/responses not yet in the schema.

API version: 2.30.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package defectdojo

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ProductTypeGroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProductTypeGroup{}

// ProductTypeGroup struct for ProductTypeGroup
type ProductTypeGroup struct {
	Id int32 `json:"id"`
	ProductType int32 `json:"product_type"`
	Group int32 `json:"group"`
	Role int32 `json:"role"`
	Prefetch *PaginatedProductTypeGroupListPrefetch `json:"prefetch,omitempty"`
}

type _ProductTypeGroup ProductTypeGroup

// NewProductTypeGroup instantiates a new ProductTypeGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProductTypeGroup(id int32, productType int32, group int32, role int32) *ProductTypeGroup {
	this := ProductTypeGroup{}
	this.Id = id
	this.ProductType = productType
	this.Group = group
	this.Role = role
	return &this
}

// NewProductTypeGroupWithDefaults instantiates a new ProductTypeGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProductTypeGroupWithDefaults() *ProductTypeGroup {
	this := ProductTypeGroup{}
	return &this
}

// GetId returns the Id field value
func (o *ProductTypeGroup) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ProductTypeGroup) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ProductTypeGroup) SetId(v int32) {
	o.Id = v
}

// GetProductType returns the ProductType field value
func (o *ProductTypeGroup) GetProductType() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ProductType
}

// GetProductTypeOk returns a tuple with the ProductType field value
// and a boolean to check if the value has been set.
func (o *ProductTypeGroup) GetProductTypeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProductType, true
}

// SetProductType sets field value
func (o *ProductTypeGroup) SetProductType(v int32) {
	o.ProductType = v
}

// GetGroup returns the Group field value
func (o *ProductTypeGroup) GetGroup() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Group
}

// GetGroupOk returns a tuple with the Group field value
// and a boolean to check if the value has been set.
func (o *ProductTypeGroup) GetGroupOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Group, true
}

// SetGroup sets field value
func (o *ProductTypeGroup) SetGroup(v int32) {
	o.Group = v
}

// GetRole returns the Role field value
func (o *ProductTypeGroup) GetRole() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Role
}

// GetRoleOk returns a tuple with the Role field value
// and a boolean to check if the value has been set.
func (o *ProductTypeGroup) GetRoleOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Role, true
}

// SetRole sets field value
func (o *ProductTypeGroup) SetRole(v int32) {
	o.Role = v
}

// GetPrefetch returns the Prefetch field value if set, zero value otherwise.
func (o *ProductTypeGroup) GetPrefetch() PaginatedProductTypeGroupListPrefetch {
	if o == nil || IsNil(o.Prefetch) {
		var ret PaginatedProductTypeGroupListPrefetch
		return ret
	}
	return *o.Prefetch
}

// GetPrefetchOk returns a tuple with the Prefetch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductTypeGroup) GetPrefetchOk() (*PaginatedProductTypeGroupListPrefetch, bool) {
	if o == nil || IsNil(o.Prefetch) {
		return nil, false
	}
	return o.Prefetch, true
}

// HasPrefetch returns a boolean if a field has been set.
func (o *ProductTypeGroup) HasPrefetch() bool {
	if o != nil && !IsNil(o.Prefetch) {
		return true
	}

	return false
}

// SetPrefetch gets a reference to the given PaginatedProductTypeGroupListPrefetch and assigns it to the Prefetch field.
func (o *ProductTypeGroup) SetPrefetch(v PaginatedProductTypeGroupListPrefetch) {
	o.Prefetch = &v
}

func (o ProductTypeGroup) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProductTypeGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["product_type"] = o.ProductType
	toSerialize["group"] = o.Group
	toSerialize["role"] = o.Role
	if !IsNil(o.Prefetch) {
		toSerialize["prefetch"] = o.Prefetch
	}
	return toSerialize, nil
}

func (o *ProductTypeGroup) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"product_type",
		"group",
		"role",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProductTypeGroup := _ProductTypeGroup{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varProductTypeGroup)

	if err != nil {
		return err
	}

	*o = ProductTypeGroup(varProductTypeGroup)

	return err
}

type NullableProductTypeGroup struct {
	value *ProductTypeGroup
	isSet bool
}

func (v NullableProductTypeGroup) Get() *ProductTypeGroup {
	return v.value
}

func (v *NullableProductTypeGroup) Set(val *ProductTypeGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableProductTypeGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableProductTypeGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProductTypeGroup(val *ProductTypeGroup) *NullableProductTypeGroup {
	return &NullableProductTypeGroup{value: val, isSet: true}
}

func (v NullableProductTypeGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProductTypeGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


