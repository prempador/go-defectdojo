/*
Defect Dojo API v2

Defect Dojo - Open Source vulnerability Management made easy. Prefetch related parameters/responses not yet in the schema.

API version: 2.33.5
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package defectdojo

import (
	"encoding/json"
)

// checks if the PaginatedTestImportListPrefetch type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PaginatedTestImportListPrefetch{}

// PaginatedTestImportListPrefetch struct for PaginatedTestImportListPrefetch
type PaginatedTestImportListPrefetch struct {
	FindingsAffected *map[string]Finding `json:"findings_affected,omitempty"`
	Test *map[string]Test `json:"test,omitempty"`
}

// NewPaginatedTestImportListPrefetch instantiates a new PaginatedTestImportListPrefetch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaginatedTestImportListPrefetch() *PaginatedTestImportListPrefetch {
	this := PaginatedTestImportListPrefetch{}
	return &this
}

// NewPaginatedTestImportListPrefetchWithDefaults instantiates a new PaginatedTestImportListPrefetch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaginatedTestImportListPrefetchWithDefaults() *PaginatedTestImportListPrefetch {
	this := PaginatedTestImportListPrefetch{}
	return &this
}

// GetFindingsAffected returns the FindingsAffected field value if set, zero value otherwise.
func (o *PaginatedTestImportListPrefetch) GetFindingsAffected() map[string]Finding {
	if o == nil || IsNil(o.FindingsAffected) {
		var ret map[string]Finding
		return ret
	}
	return *o.FindingsAffected
}

// GetFindingsAffectedOk returns a tuple with the FindingsAffected field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaginatedTestImportListPrefetch) GetFindingsAffectedOk() (*map[string]Finding, bool) {
	if o == nil || IsNil(o.FindingsAffected) {
		return nil, false
	}
	return o.FindingsAffected, true
}

// HasFindingsAffected returns a boolean if a field has been set.
func (o *PaginatedTestImportListPrefetch) HasFindingsAffected() bool {
	if o != nil && !IsNil(o.FindingsAffected) {
		return true
	}

	return false
}

// SetFindingsAffected gets a reference to the given map[string]Finding and assigns it to the FindingsAffected field.
func (o *PaginatedTestImportListPrefetch) SetFindingsAffected(v map[string]Finding) {
	o.FindingsAffected = &v
}

// GetTest returns the Test field value if set, zero value otherwise.
func (o *PaginatedTestImportListPrefetch) GetTest() map[string]Test {
	if o == nil || IsNil(o.Test) {
		var ret map[string]Test
		return ret
	}
	return *o.Test
}

// GetTestOk returns a tuple with the Test field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaginatedTestImportListPrefetch) GetTestOk() (*map[string]Test, bool) {
	if o == nil || IsNil(o.Test) {
		return nil, false
	}
	return o.Test, true
}

// HasTest returns a boolean if a field has been set.
func (o *PaginatedTestImportListPrefetch) HasTest() bool {
	if o != nil && !IsNil(o.Test) {
		return true
	}

	return false
}

// SetTest gets a reference to the given map[string]Test and assigns it to the Test field.
func (o *PaginatedTestImportListPrefetch) SetTest(v map[string]Test) {
	o.Test = &v
}

func (o PaginatedTestImportListPrefetch) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PaginatedTestImportListPrefetch) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FindingsAffected) {
		toSerialize["findings_affected"] = o.FindingsAffected
	}
	if !IsNil(o.Test) {
		toSerialize["test"] = o.Test
	}
	return toSerialize, nil
}

type NullablePaginatedTestImportListPrefetch struct {
	value *PaginatedTestImportListPrefetch
	isSet bool
}

func (v NullablePaginatedTestImportListPrefetch) Get() *PaginatedTestImportListPrefetch {
	return v.value
}

func (v *NullablePaginatedTestImportListPrefetch) Set(val *PaginatedTestImportListPrefetch) {
	v.value = val
	v.isSet = true
}

func (v NullablePaginatedTestImportListPrefetch) IsSet() bool {
	return v.isSet
}

func (v *NullablePaginatedTestImportListPrefetch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaginatedTestImportListPrefetch(val *PaginatedTestImportListPrefetch) *NullablePaginatedTestImportListPrefetch {
	return &NullablePaginatedTestImportListPrefetch{value: val, isSet: true}
}

func (v NullablePaginatedTestImportListPrefetch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaginatedTestImportListPrefetch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


