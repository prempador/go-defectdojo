/*
Defect Dojo API v2

Defect Dojo - Open Source vulnerability Management made easy. Prefetch related parameters/responses not yet in the schema.

API version: 2.31.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package defectdojo

import (
	"encoding/json"
)

// checks if the PatchedSonarqubeIssueRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PatchedSonarqubeIssueRequest{}

// PatchedSonarqubeIssueRequest struct for PatchedSonarqubeIssueRequest
type PatchedSonarqubeIssueRequest struct {
	// SonarQube issue key
	Key *string `json:"key,omitempty"`
	// SonarQube issue status
	Status *string `json:"status,omitempty"`
	// SonarQube issue type
	Type *string `json:"type,omitempty"`
}

// NewPatchedSonarqubeIssueRequest instantiates a new PatchedSonarqubeIssueRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPatchedSonarqubeIssueRequest() *PatchedSonarqubeIssueRequest {
	this := PatchedSonarqubeIssueRequest{}
	return &this
}

// NewPatchedSonarqubeIssueRequestWithDefaults instantiates a new PatchedSonarqubeIssueRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatchedSonarqubeIssueRequestWithDefaults() *PatchedSonarqubeIssueRequest {
	this := PatchedSonarqubeIssueRequest{}
	return &this
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *PatchedSonarqubeIssueRequest) GetKey() string {
	if o == nil || IsNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedSonarqubeIssueRequest) GetKeyOk() (*string, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *PatchedSonarqubeIssueRequest) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *PatchedSonarqubeIssueRequest) SetKey(v string) {
	o.Key = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *PatchedSonarqubeIssueRequest) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedSonarqubeIssueRequest) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *PatchedSonarqubeIssueRequest) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *PatchedSonarqubeIssueRequest) SetStatus(v string) {
	o.Status = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *PatchedSonarqubeIssueRequest) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedSonarqubeIssueRequest) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *PatchedSonarqubeIssueRequest) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *PatchedSonarqubeIssueRequest) SetType(v string) {
	o.Type = &v
}

func (o PatchedSonarqubeIssueRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PatchedSonarqubeIssueRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullablePatchedSonarqubeIssueRequest struct {
	value *PatchedSonarqubeIssueRequest
	isSet bool
}

func (v NullablePatchedSonarqubeIssueRequest) Get() *PatchedSonarqubeIssueRequest {
	return v.value
}

func (v *NullablePatchedSonarqubeIssueRequest) Set(val *PatchedSonarqubeIssueRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchedSonarqubeIssueRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchedSonarqubeIssueRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchedSonarqubeIssueRequest(val *PatchedSonarqubeIssueRequest) *NullablePatchedSonarqubeIssueRequest {
	return &NullablePatchedSonarqubeIssueRequest{value: val, isSet: true}
}

func (v NullablePatchedSonarqubeIssueRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchedSonarqubeIssueRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


