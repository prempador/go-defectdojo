/*
Defect Dojo API v2

Defect Dojo - Open Source vulnerability Management made easy. Prefetch related parameters/responses not yet in the schema.

API version: 2.33.5
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package defectdojo

import (
	"encoding/json"
)

// checks if the PatchedEngagementPresetsRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PatchedEngagementPresetsRequest{}

// PatchedEngagementPresetsRequest struct for PatchedEngagementPresetsRequest
type PatchedEngagementPresetsRequest struct {
	// Brief description of preset.
	Title *string `json:"title,omitempty"`
	// Description of what needs to be tested or setting up environment for testing
	Notes NullableString `json:"notes,omitempty"`
	// Scope of Engagement testing, IP's/Resources/URL's)
	Scope *string `json:"scope,omitempty"`
	Product *int32 `json:"product,omitempty"`
	TestType []int32 `json:"test_type,omitempty"`
	NetworkLocations []int32 `json:"network_locations,omitempty"`
}

// NewPatchedEngagementPresetsRequest instantiates a new PatchedEngagementPresetsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPatchedEngagementPresetsRequest() *PatchedEngagementPresetsRequest {
	this := PatchedEngagementPresetsRequest{}
	return &this
}

// NewPatchedEngagementPresetsRequestWithDefaults instantiates a new PatchedEngagementPresetsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatchedEngagementPresetsRequestWithDefaults() *PatchedEngagementPresetsRequest {
	this := PatchedEngagementPresetsRequest{}
	return &this
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *PatchedEngagementPresetsRequest) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedEngagementPresetsRequest) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *PatchedEngagementPresetsRequest) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *PatchedEngagementPresetsRequest) SetTitle(v string) {
	o.Title = &v
}

// GetNotes returns the Notes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchedEngagementPresetsRequest) GetNotes() string {
	if o == nil || IsNil(o.Notes.Get()) {
		var ret string
		return ret
	}
	return *o.Notes.Get()
}

// GetNotesOk returns a tuple with the Notes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchedEngagementPresetsRequest) GetNotesOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Notes.Get(), o.Notes.IsSet()
}

// HasNotes returns a boolean if a field has been set.
func (o *PatchedEngagementPresetsRequest) HasNotes() bool {
	if o != nil && o.Notes.IsSet() {
		return true
	}

	return false
}

// SetNotes gets a reference to the given NullableString and assigns it to the Notes field.
func (o *PatchedEngagementPresetsRequest) SetNotes(v string) {
	o.Notes.Set(&v)
}
// SetNotesNil sets the value for Notes to be an explicit nil
func (o *PatchedEngagementPresetsRequest) SetNotesNil() {
	o.Notes.Set(nil)
}

// UnsetNotes ensures that no value is present for Notes, not even an explicit nil
func (o *PatchedEngagementPresetsRequest) UnsetNotes() {
	o.Notes.Unset()
}

// GetScope returns the Scope field value if set, zero value otherwise.
func (o *PatchedEngagementPresetsRequest) GetScope() string {
	if o == nil || IsNil(o.Scope) {
		var ret string
		return ret
	}
	return *o.Scope
}

// GetScopeOk returns a tuple with the Scope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedEngagementPresetsRequest) GetScopeOk() (*string, bool) {
	if o == nil || IsNil(o.Scope) {
		return nil, false
	}
	return o.Scope, true
}

// HasScope returns a boolean if a field has been set.
func (o *PatchedEngagementPresetsRequest) HasScope() bool {
	if o != nil && !IsNil(o.Scope) {
		return true
	}

	return false
}

// SetScope gets a reference to the given string and assigns it to the Scope field.
func (o *PatchedEngagementPresetsRequest) SetScope(v string) {
	o.Scope = &v
}

// GetProduct returns the Product field value if set, zero value otherwise.
func (o *PatchedEngagementPresetsRequest) GetProduct() int32 {
	if o == nil || IsNil(o.Product) {
		var ret int32
		return ret
	}
	return *o.Product
}

// GetProductOk returns a tuple with the Product field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedEngagementPresetsRequest) GetProductOk() (*int32, bool) {
	if o == nil || IsNil(o.Product) {
		return nil, false
	}
	return o.Product, true
}

// HasProduct returns a boolean if a field has been set.
func (o *PatchedEngagementPresetsRequest) HasProduct() bool {
	if o != nil && !IsNil(o.Product) {
		return true
	}

	return false
}

// SetProduct gets a reference to the given int32 and assigns it to the Product field.
func (o *PatchedEngagementPresetsRequest) SetProduct(v int32) {
	o.Product = &v
}

// GetTestType returns the TestType field value if set, zero value otherwise.
func (o *PatchedEngagementPresetsRequest) GetTestType() []int32 {
	if o == nil || IsNil(o.TestType) {
		var ret []int32
		return ret
	}
	return o.TestType
}

// GetTestTypeOk returns a tuple with the TestType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedEngagementPresetsRequest) GetTestTypeOk() ([]int32, bool) {
	if o == nil || IsNil(o.TestType) {
		return nil, false
	}
	return o.TestType, true
}

// HasTestType returns a boolean if a field has been set.
func (o *PatchedEngagementPresetsRequest) HasTestType() bool {
	if o != nil && !IsNil(o.TestType) {
		return true
	}

	return false
}

// SetTestType gets a reference to the given []int32 and assigns it to the TestType field.
func (o *PatchedEngagementPresetsRequest) SetTestType(v []int32) {
	o.TestType = v
}

// GetNetworkLocations returns the NetworkLocations field value if set, zero value otherwise.
func (o *PatchedEngagementPresetsRequest) GetNetworkLocations() []int32 {
	if o == nil || IsNil(o.NetworkLocations) {
		var ret []int32
		return ret
	}
	return o.NetworkLocations
}

// GetNetworkLocationsOk returns a tuple with the NetworkLocations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedEngagementPresetsRequest) GetNetworkLocationsOk() ([]int32, bool) {
	if o == nil || IsNil(o.NetworkLocations) {
		return nil, false
	}
	return o.NetworkLocations, true
}

// HasNetworkLocations returns a boolean if a field has been set.
func (o *PatchedEngagementPresetsRequest) HasNetworkLocations() bool {
	if o != nil && !IsNil(o.NetworkLocations) {
		return true
	}

	return false
}

// SetNetworkLocations gets a reference to the given []int32 and assigns it to the NetworkLocations field.
func (o *PatchedEngagementPresetsRequest) SetNetworkLocations(v []int32) {
	o.NetworkLocations = v
}

func (o PatchedEngagementPresetsRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PatchedEngagementPresetsRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if o.Notes.IsSet() {
		toSerialize["notes"] = o.Notes.Get()
	}
	if !IsNil(o.Scope) {
		toSerialize["scope"] = o.Scope
	}
	if !IsNil(o.Product) {
		toSerialize["product"] = o.Product
	}
	if !IsNil(o.TestType) {
		toSerialize["test_type"] = o.TestType
	}
	if !IsNil(o.NetworkLocations) {
		toSerialize["network_locations"] = o.NetworkLocations
	}
	return toSerialize, nil
}

type NullablePatchedEngagementPresetsRequest struct {
	value *PatchedEngagementPresetsRequest
	isSet bool
}

func (v NullablePatchedEngagementPresetsRequest) Get() *PatchedEngagementPresetsRequest {
	return v.value
}

func (v *NullablePatchedEngagementPresetsRequest) Set(val *PatchedEngagementPresetsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchedEngagementPresetsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchedEngagementPresetsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchedEngagementPresetsRequest(val *PatchedEngagementPresetsRequest) *NullablePatchedEngagementPresetsRequest {
	return &NullablePatchedEngagementPresetsRequest{value: val, isSet: true}
}

func (v NullablePatchedEngagementPresetsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchedEngagementPresetsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


