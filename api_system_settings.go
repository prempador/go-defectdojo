/*
Defect Dojo API v2

Defect Dojo - Open Source vulnerability Management made easy. Prefetch related parameters/responses not yet in the schema.

API version: 2.30.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package defectdojo

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type SystemSettingsAPI interface {

	/*
	SystemSettingsList Method for SystemSettingsList

	Basic control over System Settings. Use 'id' 1 for PUT, PATCH operations

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiSystemSettingsListRequest
	*/
	SystemSettingsList(ctx context.Context) ApiSystemSettingsListRequest

	// SystemSettingsListExecute executes the request
	//  @return PaginatedSystemSettingsList
	SystemSettingsListExecute(r ApiSystemSettingsListRequest) (*PaginatedSystemSettingsList, *http.Response, error)

	/*
	SystemSettingsPartialUpdate Method for SystemSettingsPartialUpdate

	Basic control over System Settings. Use 'id' 1 for PUT, PATCH operations

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this system_ settings.
	@return ApiSystemSettingsPartialUpdateRequest
	*/
	SystemSettingsPartialUpdate(ctx context.Context, id int32) ApiSystemSettingsPartialUpdateRequest

	// SystemSettingsPartialUpdateExecute executes the request
	//  @return SystemSettings
	SystemSettingsPartialUpdateExecute(r ApiSystemSettingsPartialUpdateRequest) (*SystemSettings, *http.Response, error)

	/*
	SystemSettingsUpdate Method for SystemSettingsUpdate

	Basic control over System Settings. Use 'id' 1 for PUT, PATCH operations

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this system_ settings.
	@return ApiSystemSettingsUpdateRequest
	*/
	SystemSettingsUpdate(ctx context.Context, id int32) ApiSystemSettingsUpdateRequest

	// SystemSettingsUpdateExecute executes the request
	//  @return SystemSettings
	SystemSettingsUpdateExecute(r ApiSystemSettingsUpdateRequest) (*SystemSettings, *http.Response, error)
}

// SystemSettingsAPIService SystemSettingsAPI service
type SystemSettingsAPIService service

type ApiSystemSettingsListRequest struct {
	ctx context.Context
	ApiService SystemSettingsAPI
	limit *int32
	offset *int32
}

// Number of results to return per page.
func (r ApiSystemSettingsListRequest) Limit(limit int32) ApiSystemSettingsListRequest {
	r.limit = &limit
	return r
}

// The initial index from which to return the results.
func (r ApiSystemSettingsListRequest) Offset(offset int32) ApiSystemSettingsListRequest {
	r.offset = &offset
	return r
}

func (r ApiSystemSettingsListRequest) Execute() (*PaginatedSystemSettingsList, *http.Response, error) {
	return r.ApiService.SystemSettingsListExecute(r)
}

/*
SystemSettingsList Method for SystemSettingsList

Basic control over System Settings. Use 'id' 1 for PUT, PATCH operations

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiSystemSettingsListRequest
*/
func (a *SystemSettingsAPIService) SystemSettingsList(ctx context.Context) ApiSystemSettingsListRequest {
	return ApiSystemSettingsListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedSystemSettingsList
func (a *SystemSettingsAPIService) SystemSettingsListExecute(r ApiSystemSettingsListRequest) (*PaginatedSystemSettingsList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedSystemSettingsList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SystemSettingsAPIService.SystemSettingsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/system_settings/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSystemSettingsPartialUpdateRequest struct {
	ctx context.Context
	ApiService SystemSettingsAPI
	id int32
	patchedSystemSettingsRequest *PatchedSystemSettingsRequest
}

func (r ApiSystemSettingsPartialUpdateRequest) PatchedSystemSettingsRequest(patchedSystemSettingsRequest PatchedSystemSettingsRequest) ApiSystemSettingsPartialUpdateRequest {
	r.patchedSystemSettingsRequest = &patchedSystemSettingsRequest
	return r
}

func (r ApiSystemSettingsPartialUpdateRequest) Execute() (*SystemSettings, *http.Response, error) {
	return r.ApiService.SystemSettingsPartialUpdateExecute(r)
}

/*
SystemSettingsPartialUpdate Method for SystemSettingsPartialUpdate

Basic control over System Settings. Use 'id' 1 for PUT, PATCH operations

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A unique integer value identifying this system_ settings.
 @return ApiSystemSettingsPartialUpdateRequest
*/
func (a *SystemSettingsAPIService) SystemSettingsPartialUpdate(ctx context.Context, id int32) ApiSystemSettingsPartialUpdateRequest {
	return ApiSystemSettingsPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return SystemSettings
func (a *SystemSettingsAPIService) SystemSettingsPartialUpdateExecute(r ApiSystemSettingsPartialUpdateRequest) (*SystemSettings, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SystemSettings
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SystemSettingsAPIService.SystemSettingsPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/system_settings/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedSystemSettingsRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSystemSettingsUpdateRequest struct {
	ctx context.Context
	ApiService SystemSettingsAPI
	id int32
	systemSettingsRequest *SystemSettingsRequest
}

func (r ApiSystemSettingsUpdateRequest) SystemSettingsRequest(systemSettingsRequest SystemSettingsRequest) ApiSystemSettingsUpdateRequest {
	r.systemSettingsRequest = &systemSettingsRequest
	return r
}

func (r ApiSystemSettingsUpdateRequest) Execute() (*SystemSettings, *http.Response, error) {
	return r.ApiService.SystemSettingsUpdateExecute(r)
}

/*
SystemSettingsUpdate Method for SystemSettingsUpdate

Basic control over System Settings. Use 'id' 1 for PUT, PATCH operations

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A unique integer value identifying this system_ settings.
 @return ApiSystemSettingsUpdateRequest
*/
func (a *SystemSettingsAPIService) SystemSettingsUpdate(ctx context.Context, id int32) ApiSystemSettingsUpdateRequest {
	return ApiSystemSettingsUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return SystemSettings
func (a *SystemSettingsAPIService) SystemSettingsUpdateExecute(r ApiSystemSettingsUpdateRequest) (*SystemSettings, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SystemSettings
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SystemSettingsAPIService.SystemSettingsUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/system_settings/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.systemSettingsRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
