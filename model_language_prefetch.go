/*
Defect Dojo API v2

Defect Dojo - Open Source vulnerability Management made easy. Prefetch related parameters/responses not yet in the schema.

API version: 2.33.5
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package defectdojo

import (
	"encoding/json"
)

// checks if the LanguagePrefetch type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LanguagePrefetch{}

// LanguagePrefetch struct for LanguagePrefetch
type LanguagePrefetch struct {
	Language *map[string]LanguageType `json:"language,omitempty"`
	Product *map[string]Product `json:"product,omitempty"`
	User *map[string]UserStub `json:"user,omitempty"`
}

// NewLanguagePrefetch instantiates a new LanguagePrefetch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLanguagePrefetch() *LanguagePrefetch {
	this := LanguagePrefetch{}
	return &this
}

// NewLanguagePrefetchWithDefaults instantiates a new LanguagePrefetch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLanguagePrefetchWithDefaults() *LanguagePrefetch {
	this := LanguagePrefetch{}
	return &this
}

// GetLanguage returns the Language field value if set, zero value otherwise.
func (o *LanguagePrefetch) GetLanguage() map[string]LanguageType {
	if o == nil || IsNil(o.Language) {
		var ret map[string]LanguageType
		return ret
	}
	return *o.Language
}

// GetLanguageOk returns a tuple with the Language field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LanguagePrefetch) GetLanguageOk() (*map[string]LanguageType, bool) {
	if o == nil || IsNil(o.Language) {
		return nil, false
	}
	return o.Language, true
}

// HasLanguage returns a boolean if a field has been set.
func (o *LanguagePrefetch) HasLanguage() bool {
	if o != nil && !IsNil(o.Language) {
		return true
	}

	return false
}

// SetLanguage gets a reference to the given map[string]LanguageType and assigns it to the Language field.
func (o *LanguagePrefetch) SetLanguage(v map[string]LanguageType) {
	o.Language = &v
}

// GetProduct returns the Product field value if set, zero value otherwise.
func (o *LanguagePrefetch) GetProduct() map[string]Product {
	if o == nil || IsNil(o.Product) {
		var ret map[string]Product
		return ret
	}
	return *o.Product
}

// GetProductOk returns a tuple with the Product field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LanguagePrefetch) GetProductOk() (*map[string]Product, bool) {
	if o == nil || IsNil(o.Product) {
		return nil, false
	}
	return o.Product, true
}

// HasProduct returns a boolean if a field has been set.
func (o *LanguagePrefetch) HasProduct() bool {
	if o != nil && !IsNil(o.Product) {
		return true
	}

	return false
}

// SetProduct gets a reference to the given map[string]Product and assigns it to the Product field.
func (o *LanguagePrefetch) SetProduct(v map[string]Product) {
	o.Product = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *LanguagePrefetch) GetUser() map[string]UserStub {
	if o == nil || IsNil(o.User) {
		var ret map[string]UserStub
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LanguagePrefetch) GetUserOk() (*map[string]UserStub, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *LanguagePrefetch) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given map[string]UserStub and assigns it to the User field.
func (o *LanguagePrefetch) SetUser(v map[string]UserStub) {
	o.User = &v
}

func (o LanguagePrefetch) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LanguagePrefetch) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Language) {
		toSerialize["language"] = o.Language
	}
	if !IsNil(o.Product) {
		toSerialize["product"] = o.Product
	}
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	return toSerialize, nil
}

type NullableLanguagePrefetch struct {
	value *LanguagePrefetch
	isSet bool
}

func (v NullableLanguagePrefetch) Get() *LanguagePrefetch {
	return v.value
}

func (v *NullableLanguagePrefetch) Set(val *LanguagePrefetch) {
	v.value = val
	v.isSet = true
}

func (v NullableLanguagePrefetch) IsSet() bool {
	return v.isSet
}

func (v *NullableLanguagePrefetch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLanguagePrefetch(val *LanguagePrefetch) *NullableLanguagePrefetch {
	return &NullableLanguagePrefetch{value: val, isSet: true}
}

func (v NullableLanguagePrefetch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLanguagePrefetch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


