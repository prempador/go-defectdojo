/*
Defect Dojo API v2

Defect Dojo - Open Source vulnerability Management made easy. Prefetch related parameters/responses not yet in the schema.

API version: 2.31.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package defectdojo

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Announcement type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Announcement{}

// Announcement struct for Announcement
type Announcement struct {
	Id int32 `json:"id"`
	// This dismissable message will be displayed on all pages for authenticated users. It can contain basic html tags, for example <a href='https://www.fred.com' style='color: #337ab7;' target='_blank'>https://example.com</a>
	Message *string `json:"message,omitempty"`
	// The style of banner to display. (info, success, warning, danger)  * `info` - Info * `success` - Success * `warning` - Warning * `danger` - Danger
	Style *string `json:"style,omitempty"`
	// Ticking this box allows users to dismiss the current announcement
	Dismissable *bool `json:"dismissable,omitempty"`
}

type _Announcement Announcement

// NewAnnouncement instantiates a new Announcement object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAnnouncement(id int32) *Announcement {
	this := Announcement{}
	this.Id = id
	return &this
}

// NewAnnouncementWithDefaults instantiates a new Announcement object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAnnouncementWithDefaults() *Announcement {
	this := Announcement{}
	return &this
}

// GetId returns the Id field value
func (o *Announcement) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Announcement) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Announcement) SetId(v int32) {
	o.Id = v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *Announcement) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Announcement) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *Announcement) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *Announcement) SetMessage(v string) {
	o.Message = &v
}

// GetStyle returns the Style field value if set, zero value otherwise.
func (o *Announcement) GetStyle() string {
	if o == nil || IsNil(o.Style) {
		var ret string
		return ret
	}
	return *o.Style
}

// GetStyleOk returns a tuple with the Style field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Announcement) GetStyleOk() (*string, bool) {
	if o == nil || IsNil(o.Style) {
		return nil, false
	}
	return o.Style, true
}

// HasStyle returns a boolean if a field has been set.
func (o *Announcement) HasStyle() bool {
	if o != nil && !IsNil(o.Style) {
		return true
	}

	return false
}

// SetStyle gets a reference to the given string and assigns it to the Style field.
func (o *Announcement) SetStyle(v string) {
	o.Style = &v
}

// GetDismissable returns the Dismissable field value if set, zero value otherwise.
func (o *Announcement) GetDismissable() bool {
	if o == nil || IsNil(o.Dismissable) {
		var ret bool
		return ret
	}
	return *o.Dismissable
}

// GetDismissableOk returns a tuple with the Dismissable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Announcement) GetDismissableOk() (*bool, bool) {
	if o == nil || IsNil(o.Dismissable) {
		return nil, false
	}
	return o.Dismissable, true
}

// HasDismissable returns a boolean if a field has been set.
func (o *Announcement) HasDismissable() bool {
	if o != nil && !IsNil(o.Dismissable) {
		return true
	}

	return false
}

// SetDismissable gets a reference to the given bool and assigns it to the Dismissable field.
func (o *Announcement) SetDismissable(v bool) {
	o.Dismissable = &v
}

func (o Announcement) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Announcement) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.Style) {
		toSerialize["style"] = o.Style
	}
	if !IsNil(o.Dismissable) {
		toSerialize["dismissable"] = o.Dismissable
	}
	return toSerialize, nil
}

func (o *Announcement) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAnnouncement := _Announcement{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAnnouncement)

	if err != nil {
		return err
	}

	*o = Announcement(varAnnouncement)

	return err
}

type NullableAnnouncement struct {
	value *Announcement
	isSet bool
}

func (v NullableAnnouncement) Get() *Announcement {
	return v.value
}

func (v *NullableAnnouncement) Set(val *Announcement) {
	v.value = val
	v.isSet = true
}

func (v NullableAnnouncement) IsSet() bool {
	return v.isSet
}

func (v *NullableAnnouncement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAnnouncement(val *Announcement) *NullableAnnouncement {
	return &NullableAnnouncement{value: val, isSet: true}
}

func (v NullableAnnouncement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAnnouncement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


