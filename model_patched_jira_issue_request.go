/*
Defect Dojo API v2

Defect Dojo - Open Source vulnerability Management made easy. Prefetch related parameters/responses not yet in the schema.

API version: 2.30.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package defectdojo

import (
	"encoding/json"
	"time"
)

// checks if the PatchedJIRAIssueRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PatchedJIRAIssueRequest{}

// PatchedJIRAIssueRequest struct for PatchedJIRAIssueRequest
type PatchedJIRAIssueRequest struct {
	JiraId *string `json:"jira_id,omitempty"`
	JiraKey *string `json:"jira_key,omitempty"`
	// The date a Jira issue was created from this finding.
	JiraCreation NullableTime `json:"jira_creation,omitempty"`
	// The date the linked Jira issue was last modified.
	JiraChange NullableTime `json:"jira_change,omitempty"`
	JiraProject NullableInt32 `json:"jira_project,omitempty"`
	Finding NullableInt32 `json:"finding,omitempty"`
	Engagement NullableInt32 `json:"engagement,omitempty"`
	FindingGroup NullableInt32 `json:"finding_group,omitempty"`
}

// NewPatchedJIRAIssueRequest instantiates a new PatchedJIRAIssueRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPatchedJIRAIssueRequest() *PatchedJIRAIssueRequest {
	this := PatchedJIRAIssueRequest{}
	return &this
}

// NewPatchedJIRAIssueRequestWithDefaults instantiates a new PatchedJIRAIssueRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatchedJIRAIssueRequestWithDefaults() *PatchedJIRAIssueRequest {
	this := PatchedJIRAIssueRequest{}
	return &this
}

// GetJiraId returns the JiraId field value if set, zero value otherwise.
func (o *PatchedJIRAIssueRequest) GetJiraId() string {
	if o == nil || IsNil(o.JiraId) {
		var ret string
		return ret
	}
	return *o.JiraId
}

// GetJiraIdOk returns a tuple with the JiraId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedJIRAIssueRequest) GetJiraIdOk() (*string, bool) {
	if o == nil || IsNil(o.JiraId) {
		return nil, false
	}
	return o.JiraId, true
}

// HasJiraId returns a boolean if a field has been set.
func (o *PatchedJIRAIssueRequest) HasJiraId() bool {
	if o != nil && !IsNil(o.JiraId) {
		return true
	}

	return false
}

// SetJiraId gets a reference to the given string and assigns it to the JiraId field.
func (o *PatchedJIRAIssueRequest) SetJiraId(v string) {
	o.JiraId = &v
}

// GetJiraKey returns the JiraKey field value if set, zero value otherwise.
func (o *PatchedJIRAIssueRequest) GetJiraKey() string {
	if o == nil || IsNil(o.JiraKey) {
		var ret string
		return ret
	}
	return *o.JiraKey
}

// GetJiraKeyOk returns a tuple with the JiraKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedJIRAIssueRequest) GetJiraKeyOk() (*string, bool) {
	if o == nil || IsNil(o.JiraKey) {
		return nil, false
	}
	return o.JiraKey, true
}

// HasJiraKey returns a boolean if a field has been set.
func (o *PatchedJIRAIssueRequest) HasJiraKey() bool {
	if o != nil && !IsNil(o.JiraKey) {
		return true
	}

	return false
}

// SetJiraKey gets a reference to the given string and assigns it to the JiraKey field.
func (o *PatchedJIRAIssueRequest) SetJiraKey(v string) {
	o.JiraKey = &v
}

// GetJiraCreation returns the JiraCreation field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchedJIRAIssueRequest) GetJiraCreation() time.Time {
	if o == nil || IsNil(o.JiraCreation.Get()) {
		var ret time.Time
		return ret
	}
	return *o.JiraCreation.Get()
}

// GetJiraCreationOk returns a tuple with the JiraCreation field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchedJIRAIssueRequest) GetJiraCreationOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.JiraCreation.Get(), o.JiraCreation.IsSet()
}

// HasJiraCreation returns a boolean if a field has been set.
func (o *PatchedJIRAIssueRequest) HasJiraCreation() bool {
	if o != nil && o.JiraCreation.IsSet() {
		return true
	}

	return false
}

// SetJiraCreation gets a reference to the given NullableTime and assigns it to the JiraCreation field.
func (o *PatchedJIRAIssueRequest) SetJiraCreation(v time.Time) {
	o.JiraCreation.Set(&v)
}
// SetJiraCreationNil sets the value for JiraCreation to be an explicit nil
func (o *PatchedJIRAIssueRequest) SetJiraCreationNil() {
	o.JiraCreation.Set(nil)
}

// UnsetJiraCreation ensures that no value is present for JiraCreation, not even an explicit nil
func (o *PatchedJIRAIssueRequest) UnsetJiraCreation() {
	o.JiraCreation.Unset()
}

// GetJiraChange returns the JiraChange field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchedJIRAIssueRequest) GetJiraChange() time.Time {
	if o == nil || IsNil(o.JiraChange.Get()) {
		var ret time.Time
		return ret
	}
	return *o.JiraChange.Get()
}

// GetJiraChangeOk returns a tuple with the JiraChange field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchedJIRAIssueRequest) GetJiraChangeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.JiraChange.Get(), o.JiraChange.IsSet()
}

// HasJiraChange returns a boolean if a field has been set.
func (o *PatchedJIRAIssueRequest) HasJiraChange() bool {
	if o != nil && o.JiraChange.IsSet() {
		return true
	}

	return false
}

// SetJiraChange gets a reference to the given NullableTime and assigns it to the JiraChange field.
func (o *PatchedJIRAIssueRequest) SetJiraChange(v time.Time) {
	o.JiraChange.Set(&v)
}
// SetJiraChangeNil sets the value for JiraChange to be an explicit nil
func (o *PatchedJIRAIssueRequest) SetJiraChangeNil() {
	o.JiraChange.Set(nil)
}

// UnsetJiraChange ensures that no value is present for JiraChange, not even an explicit nil
func (o *PatchedJIRAIssueRequest) UnsetJiraChange() {
	o.JiraChange.Unset()
}

// GetJiraProject returns the JiraProject field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchedJIRAIssueRequest) GetJiraProject() int32 {
	if o == nil || IsNil(o.JiraProject.Get()) {
		var ret int32
		return ret
	}
	return *o.JiraProject.Get()
}

// GetJiraProjectOk returns a tuple with the JiraProject field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchedJIRAIssueRequest) GetJiraProjectOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.JiraProject.Get(), o.JiraProject.IsSet()
}

// HasJiraProject returns a boolean if a field has been set.
func (o *PatchedJIRAIssueRequest) HasJiraProject() bool {
	if o != nil && o.JiraProject.IsSet() {
		return true
	}

	return false
}

// SetJiraProject gets a reference to the given NullableInt32 and assigns it to the JiraProject field.
func (o *PatchedJIRAIssueRequest) SetJiraProject(v int32) {
	o.JiraProject.Set(&v)
}
// SetJiraProjectNil sets the value for JiraProject to be an explicit nil
func (o *PatchedJIRAIssueRequest) SetJiraProjectNil() {
	o.JiraProject.Set(nil)
}

// UnsetJiraProject ensures that no value is present for JiraProject, not even an explicit nil
func (o *PatchedJIRAIssueRequest) UnsetJiraProject() {
	o.JiraProject.Unset()
}

// GetFinding returns the Finding field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchedJIRAIssueRequest) GetFinding() int32 {
	if o == nil || IsNil(o.Finding.Get()) {
		var ret int32
		return ret
	}
	return *o.Finding.Get()
}

// GetFindingOk returns a tuple with the Finding field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchedJIRAIssueRequest) GetFindingOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Finding.Get(), o.Finding.IsSet()
}

// HasFinding returns a boolean if a field has been set.
func (o *PatchedJIRAIssueRequest) HasFinding() bool {
	if o != nil && o.Finding.IsSet() {
		return true
	}

	return false
}

// SetFinding gets a reference to the given NullableInt32 and assigns it to the Finding field.
func (o *PatchedJIRAIssueRequest) SetFinding(v int32) {
	o.Finding.Set(&v)
}
// SetFindingNil sets the value for Finding to be an explicit nil
func (o *PatchedJIRAIssueRequest) SetFindingNil() {
	o.Finding.Set(nil)
}

// UnsetFinding ensures that no value is present for Finding, not even an explicit nil
func (o *PatchedJIRAIssueRequest) UnsetFinding() {
	o.Finding.Unset()
}

// GetEngagement returns the Engagement field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchedJIRAIssueRequest) GetEngagement() int32 {
	if o == nil || IsNil(o.Engagement.Get()) {
		var ret int32
		return ret
	}
	return *o.Engagement.Get()
}

// GetEngagementOk returns a tuple with the Engagement field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchedJIRAIssueRequest) GetEngagementOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Engagement.Get(), o.Engagement.IsSet()
}

// HasEngagement returns a boolean if a field has been set.
func (o *PatchedJIRAIssueRequest) HasEngagement() bool {
	if o != nil && o.Engagement.IsSet() {
		return true
	}

	return false
}

// SetEngagement gets a reference to the given NullableInt32 and assigns it to the Engagement field.
func (o *PatchedJIRAIssueRequest) SetEngagement(v int32) {
	o.Engagement.Set(&v)
}
// SetEngagementNil sets the value for Engagement to be an explicit nil
func (o *PatchedJIRAIssueRequest) SetEngagementNil() {
	o.Engagement.Set(nil)
}

// UnsetEngagement ensures that no value is present for Engagement, not even an explicit nil
func (o *PatchedJIRAIssueRequest) UnsetEngagement() {
	o.Engagement.Unset()
}

// GetFindingGroup returns the FindingGroup field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchedJIRAIssueRequest) GetFindingGroup() int32 {
	if o == nil || IsNil(o.FindingGroup.Get()) {
		var ret int32
		return ret
	}
	return *o.FindingGroup.Get()
}

// GetFindingGroupOk returns a tuple with the FindingGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchedJIRAIssueRequest) GetFindingGroupOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.FindingGroup.Get(), o.FindingGroup.IsSet()
}

// HasFindingGroup returns a boolean if a field has been set.
func (o *PatchedJIRAIssueRequest) HasFindingGroup() bool {
	if o != nil && o.FindingGroup.IsSet() {
		return true
	}

	return false
}

// SetFindingGroup gets a reference to the given NullableInt32 and assigns it to the FindingGroup field.
func (o *PatchedJIRAIssueRequest) SetFindingGroup(v int32) {
	o.FindingGroup.Set(&v)
}
// SetFindingGroupNil sets the value for FindingGroup to be an explicit nil
func (o *PatchedJIRAIssueRequest) SetFindingGroupNil() {
	o.FindingGroup.Set(nil)
}

// UnsetFindingGroup ensures that no value is present for FindingGroup, not even an explicit nil
func (o *PatchedJIRAIssueRequest) UnsetFindingGroup() {
	o.FindingGroup.Unset()
}

func (o PatchedJIRAIssueRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PatchedJIRAIssueRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.JiraId) {
		toSerialize["jira_id"] = o.JiraId
	}
	if !IsNil(o.JiraKey) {
		toSerialize["jira_key"] = o.JiraKey
	}
	if o.JiraCreation.IsSet() {
		toSerialize["jira_creation"] = o.JiraCreation.Get()
	}
	if o.JiraChange.IsSet() {
		toSerialize["jira_change"] = o.JiraChange.Get()
	}
	if o.JiraProject.IsSet() {
		toSerialize["jira_project"] = o.JiraProject.Get()
	}
	if o.Finding.IsSet() {
		toSerialize["finding"] = o.Finding.Get()
	}
	if o.Engagement.IsSet() {
		toSerialize["engagement"] = o.Engagement.Get()
	}
	if o.FindingGroup.IsSet() {
		toSerialize["finding_group"] = o.FindingGroup.Get()
	}
	return toSerialize, nil
}

type NullablePatchedJIRAIssueRequest struct {
	value *PatchedJIRAIssueRequest
	isSet bool
}

func (v NullablePatchedJIRAIssueRequest) Get() *PatchedJIRAIssueRequest {
	return v.value
}

func (v *NullablePatchedJIRAIssueRequest) Set(val *PatchedJIRAIssueRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchedJIRAIssueRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchedJIRAIssueRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchedJIRAIssueRequest(val *PatchedJIRAIssueRequest) *NullablePatchedJIRAIssueRequest {
	return &NullablePatchedJIRAIssueRequest{value: val, isSet: true}
}

func (v NullablePatchedJIRAIssueRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchedJIRAIssueRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


