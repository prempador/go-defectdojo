/*
Defect Dojo API v2

Defect Dojo - Open Source vulnerability Management made easy. Prefetch related parameters/responses not yet in the schema.

API version: 2.38.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package defectdojo

import (
	"encoding/json"
)

// checks if the PaginatedProductListPrefetch type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PaginatedProductListPrefetch{}

// PaginatedProductListPrefetch struct for PaginatedProductListPrefetch
type PaginatedProductListPrefetch struct {
	AuthorizationGroups *map[string]DojoGroup `json:"authorization_groups,omitempty"`
	Members *map[string]UserStub `json:"members,omitempty"`
	ProdType *map[string]ProductType `json:"prod_type,omitempty"`
	ProductManager *map[string]UserStub `json:"product_manager,omitempty"`
	Regulations *map[string]Regulation `json:"regulations,omitempty"`
	SlaConfiguration *map[string]SLAConfiguration `json:"sla_configuration,omitempty"`
	TeamManager *map[string]UserStub `json:"team_manager,omitempty"`
	TechnicalContact *map[string]UserStub `json:"technical_contact,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PaginatedProductListPrefetch PaginatedProductListPrefetch

// NewPaginatedProductListPrefetch instantiates a new PaginatedProductListPrefetch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaginatedProductListPrefetch() *PaginatedProductListPrefetch {
	this := PaginatedProductListPrefetch{}
	return &this
}

// NewPaginatedProductListPrefetchWithDefaults instantiates a new PaginatedProductListPrefetch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaginatedProductListPrefetchWithDefaults() *PaginatedProductListPrefetch {
	this := PaginatedProductListPrefetch{}
	return &this
}

// GetAuthorizationGroups returns the AuthorizationGroups field value if set, zero value otherwise.
func (o *PaginatedProductListPrefetch) GetAuthorizationGroups() map[string]DojoGroup {
	if o == nil || IsNil(o.AuthorizationGroups) {
		var ret map[string]DojoGroup
		return ret
	}
	return *o.AuthorizationGroups
}

// GetAuthorizationGroupsOk returns a tuple with the AuthorizationGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaginatedProductListPrefetch) GetAuthorizationGroupsOk() (*map[string]DojoGroup, bool) {
	if o == nil || IsNil(o.AuthorizationGroups) {
		return nil, false
	}
	return o.AuthorizationGroups, true
}

// HasAuthorizationGroups returns a boolean if a field has been set.
func (o *PaginatedProductListPrefetch) HasAuthorizationGroups() bool {
	if o != nil && !IsNil(o.AuthorizationGroups) {
		return true
	}

	return false
}

// SetAuthorizationGroups gets a reference to the given map[string]DojoGroup and assigns it to the AuthorizationGroups field.
func (o *PaginatedProductListPrefetch) SetAuthorizationGroups(v map[string]DojoGroup) {
	o.AuthorizationGroups = &v
}

// GetMembers returns the Members field value if set, zero value otherwise.
func (o *PaginatedProductListPrefetch) GetMembers() map[string]UserStub {
	if o == nil || IsNil(o.Members) {
		var ret map[string]UserStub
		return ret
	}
	return *o.Members
}

// GetMembersOk returns a tuple with the Members field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaginatedProductListPrefetch) GetMembersOk() (*map[string]UserStub, bool) {
	if o == nil || IsNil(o.Members) {
		return nil, false
	}
	return o.Members, true
}

// HasMembers returns a boolean if a field has been set.
func (o *PaginatedProductListPrefetch) HasMembers() bool {
	if o != nil && !IsNil(o.Members) {
		return true
	}

	return false
}

// SetMembers gets a reference to the given map[string]UserStub and assigns it to the Members field.
func (o *PaginatedProductListPrefetch) SetMembers(v map[string]UserStub) {
	o.Members = &v
}

// GetProdType returns the ProdType field value if set, zero value otherwise.
func (o *PaginatedProductListPrefetch) GetProdType() map[string]ProductType {
	if o == nil || IsNil(o.ProdType) {
		var ret map[string]ProductType
		return ret
	}
	return *o.ProdType
}

// GetProdTypeOk returns a tuple with the ProdType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaginatedProductListPrefetch) GetProdTypeOk() (*map[string]ProductType, bool) {
	if o == nil || IsNil(o.ProdType) {
		return nil, false
	}
	return o.ProdType, true
}

// HasProdType returns a boolean if a field has been set.
func (o *PaginatedProductListPrefetch) HasProdType() bool {
	if o != nil && !IsNil(o.ProdType) {
		return true
	}

	return false
}

// SetProdType gets a reference to the given map[string]ProductType and assigns it to the ProdType field.
func (o *PaginatedProductListPrefetch) SetProdType(v map[string]ProductType) {
	o.ProdType = &v
}

// GetProductManager returns the ProductManager field value if set, zero value otherwise.
func (o *PaginatedProductListPrefetch) GetProductManager() map[string]UserStub {
	if o == nil || IsNil(o.ProductManager) {
		var ret map[string]UserStub
		return ret
	}
	return *o.ProductManager
}

// GetProductManagerOk returns a tuple with the ProductManager field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaginatedProductListPrefetch) GetProductManagerOk() (*map[string]UserStub, bool) {
	if o == nil || IsNil(o.ProductManager) {
		return nil, false
	}
	return o.ProductManager, true
}

// HasProductManager returns a boolean if a field has been set.
func (o *PaginatedProductListPrefetch) HasProductManager() bool {
	if o != nil && !IsNil(o.ProductManager) {
		return true
	}

	return false
}

// SetProductManager gets a reference to the given map[string]UserStub and assigns it to the ProductManager field.
func (o *PaginatedProductListPrefetch) SetProductManager(v map[string]UserStub) {
	o.ProductManager = &v
}

// GetRegulations returns the Regulations field value if set, zero value otherwise.
func (o *PaginatedProductListPrefetch) GetRegulations() map[string]Regulation {
	if o == nil || IsNil(o.Regulations) {
		var ret map[string]Regulation
		return ret
	}
	return *o.Regulations
}

// GetRegulationsOk returns a tuple with the Regulations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaginatedProductListPrefetch) GetRegulationsOk() (*map[string]Regulation, bool) {
	if o == nil || IsNil(o.Regulations) {
		return nil, false
	}
	return o.Regulations, true
}

// HasRegulations returns a boolean if a field has been set.
func (o *PaginatedProductListPrefetch) HasRegulations() bool {
	if o != nil && !IsNil(o.Regulations) {
		return true
	}

	return false
}

// SetRegulations gets a reference to the given map[string]Regulation and assigns it to the Regulations field.
func (o *PaginatedProductListPrefetch) SetRegulations(v map[string]Regulation) {
	o.Regulations = &v
}

// GetSlaConfiguration returns the SlaConfiguration field value if set, zero value otherwise.
func (o *PaginatedProductListPrefetch) GetSlaConfiguration() map[string]SLAConfiguration {
	if o == nil || IsNil(o.SlaConfiguration) {
		var ret map[string]SLAConfiguration
		return ret
	}
	return *o.SlaConfiguration
}

// GetSlaConfigurationOk returns a tuple with the SlaConfiguration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaginatedProductListPrefetch) GetSlaConfigurationOk() (*map[string]SLAConfiguration, bool) {
	if o == nil || IsNil(o.SlaConfiguration) {
		return nil, false
	}
	return o.SlaConfiguration, true
}

// HasSlaConfiguration returns a boolean if a field has been set.
func (o *PaginatedProductListPrefetch) HasSlaConfiguration() bool {
	if o != nil && !IsNil(o.SlaConfiguration) {
		return true
	}

	return false
}

// SetSlaConfiguration gets a reference to the given map[string]SLAConfiguration and assigns it to the SlaConfiguration field.
func (o *PaginatedProductListPrefetch) SetSlaConfiguration(v map[string]SLAConfiguration) {
	o.SlaConfiguration = &v
}

// GetTeamManager returns the TeamManager field value if set, zero value otherwise.
func (o *PaginatedProductListPrefetch) GetTeamManager() map[string]UserStub {
	if o == nil || IsNil(o.TeamManager) {
		var ret map[string]UserStub
		return ret
	}
	return *o.TeamManager
}

// GetTeamManagerOk returns a tuple with the TeamManager field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaginatedProductListPrefetch) GetTeamManagerOk() (*map[string]UserStub, bool) {
	if o == nil || IsNil(o.TeamManager) {
		return nil, false
	}
	return o.TeamManager, true
}

// HasTeamManager returns a boolean if a field has been set.
func (o *PaginatedProductListPrefetch) HasTeamManager() bool {
	if o != nil && !IsNil(o.TeamManager) {
		return true
	}

	return false
}

// SetTeamManager gets a reference to the given map[string]UserStub and assigns it to the TeamManager field.
func (o *PaginatedProductListPrefetch) SetTeamManager(v map[string]UserStub) {
	o.TeamManager = &v
}

// GetTechnicalContact returns the TechnicalContact field value if set, zero value otherwise.
func (o *PaginatedProductListPrefetch) GetTechnicalContact() map[string]UserStub {
	if o == nil || IsNil(o.TechnicalContact) {
		var ret map[string]UserStub
		return ret
	}
	return *o.TechnicalContact
}

// GetTechnicalContactOk returns a tuple with the TechnicalContact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaginatedProductListPrefetch) GetTechnicalContactOk() (*map[string]UserStub, bool) {
	if o == nil || IsNil(o.TechnicalContact) {
		return nil, false
	}
	return o.TechnicalContact, true
}

// HasTechnicalContact returns a boolean if a field has been set.
func (o *PaginatedProductListPrefetch) HasTechnicalContact() bool {
	if o != nil && !IsNil(o.TechnicalContact) {
		return true
	}

	return false
}

// SetTechnicalContact gets a reference to the given map[string]UserStub and assigns it to the TechnicalContact field.
func (o *PaginatedProductListPrefetch) SetTechnicalContact(v map[string]UserStub) {
	o.TechnicalContact = &v
}

func (o PaginatedProductListPrefetch) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PaginatedProductListPrefetch) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AuthorizationGroups) {
		toSerialize["authorization_groups"] = o.AuthorizationGroups
	}
	if !IsNil(o.Members) {
		toSerialize["members"] = o.Members
	}
	if !IsNil(o.ProdType) {
		toSerialize["prod_type"] = o.ProdType
	}
	if !IsNil(o.ProductManager) {
		toSerialize["product_manager"] = o.ProductManager
	}
	if !IsNil(o.Regulations) {
		toSerialize["regulations"] = o.Regulations
	}
	if !IsNil(o.SlaConfiguration) {
		toSerialize["sla_configuration"] = o.SlaConfiguration
	}
	if !IsNil(o.TeamManager) {
		toSerialize["team_manager"] = o.TeamManager
	}
	if !IsNil(o.TechnicalContact) {
		toSerialize["technical_contact"] = o.TechnicalContact
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PaginatedProductListPrefetch) UnmarshalJSON(data []byte) (err error) {
	varPaginatedProductListPrefetch := _PaginatedProductListPrefetch{}

	err = json.Unmarshal(data, &varPaginatedProductListPrefetch)

	if err != nil {
		return err
	}

	*o = PaginatedProductListPrefetch(varPaginatedProductListPrefetch)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "authorization_groups")
		delete(additionalProperties, "members")
		delete(additionalProperties, "prod_type")
		delete(additionalProperties, "product_manager")
		delete(additionalProperties, "regulations")
		delete(additionalProperties, "sla_configuration")
		delete(additionalProperties, "team_manager")
		delete(additionalProperties, "technical_contact")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePaginatedProductListPrefetch struct {
	value *PaginatedProductListPrefetch
	isSet bool
}

func (v NullablePaginatedProductListPrefetch) Get() *PaginatedProductListPrefetch {
	return v.value
}

func (v *NullablePaginatedProductListPrefetch) Set(val *PaginatedProductListPrefetch) {
	v.value = val
	v.isSet = true
}

func (v NullablePaginatedProductListPrefetch) IsSet() bool {
	return v.isSet
}

func (v *NullablePaginatedProductListPrefetch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaginatedProductListPrefetch(val *PaginatedProductListPrefetch) *NullablePaginatedProductListPrefetch {
	return &NullablePaginatedProductListPrefetch{value: val, isSet: true}
}

func (v NullablePaginatedProductListPrefetch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaginatedProductListPrefetch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


