/*
Defect Dojo API v2

Defect Dojo - Open Source vulnerability Management made easy. Prefetch related parameters/responses not yet in the schema.

API version: 2.38.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package defectdojo

import (
	"encoding/json"
)

// checks if the PatchedJIRAInstanceRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PatchedJIRAInstanceRequest{}

// PatchedJIRAInstanceRequest struct for PatchedJIRAInstanceRequest
type PatchedJIRAInstanceRequest struct {
	// Enter a name to give to this configuration
	ConfigurationName *string `json:"configuration_name,omitempty"`
	// For more information how to configure Jira, read the DefectDojo documentation.
	Url *string `json:"url,omitempty"`
	Username *string `json:"username,omitempty"`
	Password *string `json:"password,omitempty"`
	// You can define extra issue types in settings.py  * `Task` - Task * `Story` - Story * `Epic` - Epic * `Spike` - Spike * `Bug` - Bug * `Security` - Security
	DefaultIssueType *string `json:"default_issue_type,omitempty"`
	// Choose the folder containing the Django templates used to render the JIRA issue description. These are stored in dojo/templates/issue-trackers. Leave empty to use the default jira_full templates.
	IssueTemplateDir NullableString `json:"issue_template_dir,omitempty"`
	// To obtain the 'Epic name id' visit https://<YOUR JIRA URL>/rest/api/2/field and search for Epic Name. Copy the number out of cf[number] and paste it here.
	EpicNameId *int32 `json:"epic_name_id,omitempty"`
	// Transition ID to Re-Open JIRA issues, visit https://<YOUR JIRA URL>/rest/api/latest/issue/<ANY VALID ISSUE KEY>/transitions?expand=transitions.fields to find the ID for your JIRA instance
	OpenStatusKey *int32 `json:"open_status_key,omitempty"`
	// Transition ID to Close JIRA issues, visit https://<YOUR JIRA URL>/rest/api/latest/issue/<ANY VALID ISSUE KEY>/transitions?expand=transitions.fields to find the ID for your JIRA instance
	CloseStatusKey *int32 `json:"close_status_key,omitempty"`
	// Maps to the 'Priority' field in Jira. For example: Info
	InfoMappingSeverity *string `json:"info_mapping_severity,omitempty"`
	// Maps to the 'Priority' field in Jira. For example: Low
	LowMappingSeverity *string `json:"low_mapping_severity,omitempty"`
	// Maps to the 'Priority' field in Jira. For example: Medium
	MediumMappingSeverity *string `json:"medium_mapping_severity,omitempty"`
	// Maps to the 'Priority' field in Jira. For example: High
	HighMappingSeverity *string `json:"high_mapping_severity,omitempty"`
	// Maps to the 'Priority' field in Jira. For example: Critical
	CriticalMappingSeverity *string `json:"critical_mapping_severity,omitempty"`
	// Additional text that will be added to the finding in Jira. For example including how the finding was created or who to contact for more information.
	FindingText NullableString `json:"finding_text,omitempty"`
	// JIRA resolution names (comma-separated values) that maps to an Accepted Finding
	AcceptedMappingResolution NullableString `json:"accepted_mapping_resolution,omitempty"`
	// JIRA resolution names (comma-separated values) that maps to a False Positive Finding
	FalsePositiveMappingResolution NullableString `json:"false_positive_mapping_resolution,omitempty"`
	// This setting can be overidden at the Product level
	GlobalJiraSlaNotification *bool `json:"global_jira_sla_notification,omitempty"`
	// If enabled, this will sync changes to a Finding automatically to JIRA
	FindingJiraSync *bool `json:"finding_jira_sync,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PatchedJIRAInstanceRequest PatchedJIRAInstanceRequest

// NewPatchedJIRAInstanceRequest instantiates a new PatchedJIRAInstanceRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPatchedJIRAInstanceRequest() *PatchedJIRAInstanceRequest {
	this := PatchedJIRAInstanceRequest{}
	return &this
}

// NewPatchedJIRAInstanceRequestWithDefaults instantiates a new PatchedJIRAInstanceRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatchedJIRAInstanceRequestWithDefaults() *PatchedJIRAInstanceRequest {
	this := PatchedJIRAInstanceRequest{}
	return &this
}

// GetConfigurationName returns the ConfigurationName field value if set, zero value otherwise.
func (o *PatchedJIRAInstanceRequest) GetConfigurationName() string {
	if o == nil || IsNil(o.ConfigurationName) {
		var ret string
		return ret
	}
	return *o.ConfigurationName
}

// GetConfigurationNameOk returns a tuple with the ConfigurationName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedJIRAInstanceRequest) GetConfigurationNameOk() (*string, bool) {
	if o == nil || IsNil(o.ConfigurationName) {
		return nil, false
	}
	return o.ConfigurationName, true
}

// HasConfigurationName returns a boolean if a field has been set.
func (o *PatchedJIRAInstanceRequest) HasConfigurationName() bool {
	if o != nil && !IsNil(o.ConfigurationName) {
		return true
	}

	return false
}

// SetConfigurationName gets a reference to the given string and assigns it to the ConfigurationName field.
func (o *PatchedJIRAInstanceRequest) SetConfigurationName(v string) {
	o.ConfigurationName = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *PatchedJIRAInstanceRequest) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedJIRAInstanceRequest) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *PatchedJIRAInstanceRequest) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *PatchedJIRAInstanceRequest) SetUrl(v string) {
	o.Url = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *PatchedJIRAInstanceRequest) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedJIRAInstanceRequest) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *PatchedJIRAInstanceRequest) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *PatchedJIRAInstanceRequest) SetUsername(v string) {
	o.Username = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *PatchedJIRAInstanceRequest) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedJIRAInstanceRequest) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *PatchedJIRAInstanceRequest) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *PatchedJIRAInstanceRequest) SetPassword(v string) {
	o.Password = &v
}

// GetDefaultIssueType returns the DefaultIssueType field value if set, zero value otherwise.
func (o *PatchedJIRAInstanceRequest) GetDefaultIssueType() string {
	if o == nil || IsNil(o.DefaultIssueType) {
		var ret string
		return ret
	}
	return *o.DefaultIssueType
}

// GetDefaultIssueTypeOk returns a tuple with the DefaultIssueType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedJIRAInstanceRequest) GetDefaultIssueTypeOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultIssueType) {
		return nil, false
	}
	return o.DefaultIssueType, true
}

// HasDefaultIssueType returns a boolean if a field has been set.
func (o *PatchedJIRAInstanceRequest) HasDefaultIssueType() bool {
	if o != nil && !IsNil(o.DefaultIssueType) {
		return true
	}

	return false
}

// SetDefaultIssueType gets a reference to the given string and assigns it to the DefaultIssueType field.
func (o *PatchedJIRAInstanceRequest) SetDefaultIssueType(v string) {
	o.DefaultIssueType = &v
}

// GetIssueTemplateDir returns the IssueTemplateDir field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchedJIRAInstanceRequest) GetIssueTemplateDir() string {
	if o == nil || IsNil(o.IssueTemplateDir.Get()) {
		var ret string
		return ret
	}
	return *o.IssueTemplateDir.Get()
}

// GetIssueTemplateDirOk returns a tuple with the IssueTemplateDir field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchedJIRAInstanceRequest) GetIssueTemplateDirOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.IssueTemplateDir.Get(), o.IssueTemplateDir.IsSet()
}

// HasIssueTemplateDir returns a boolean if a field has been set.
func (o *PatchedJIRAInstanceRequest) HasIssueTemplateDir() bool {
	if o != nil && o.IssueTemplateDir.IsSet() {
		return true
	}

	return false
}

// SetIssueTemplateDir gets a reference to the given NullableString and assigns it to the IssueTemplateDir field.
func (o *PatchedJIRAInstanceRequest) SetIssueTemplateDir(v string) {
	o.IssueTemplateDir.Set(&v)
}
// SetIssueTemplateDirNil sets the value for IssueTemplateDir to be an explicit nil
func (o *PatchedJIRAInstanceRequest) SetIssueTemplateDirNil() {
	o.IssueTemplateDir.Set(nil)
}

// UnsetIssueTemplateDir ensures that no value is present for IssueTemplateDir, not even an explicit nil
func (o *PatchedJIRAInstanceRequest) UnsetIssueTemplateDir() {
	o.IssueTemplateDir.Unset()
}

// GetEpicNameId returns the EpicNameId field value if set, zero value otherwise.
func (o *PatchedJIRAInstanceRequest) GetEpicNameId() int32 {
	if o == nil || IsNil(o.EpicNameId) {
		var ret int32
		return ret
	}
	return *o.EpicNameId
}

// GetEpicNameIdOk returns a tuple with the EpicNameId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedJIRAInstanceRequest) GetEpicNameIdOk() (*int32, bool) {
	if o == nil || IsNil(o.EpicNameId) {
		return nil, false
	}
	return o.EpicNameId, true
}

// HasEpicNameId returns a boolean if a field has been set.
func (o *PatchedJIRAInstanceRequest) HasEpicNameId() bool {
	if o != nil && !IsNil(o.EpicNameId) {
		return true
	}

	return false
}

// SetEpicNameId gets a reference to the given int32 and assigns it to the EpicNameId field.
func (o *PatchedJIRAInstanceRequest) SetEpicNameId(v int32) {
	o.EpicNameId = &v
}

// GetOpenStatusKey returns the OpenStatusKey field value if set, zero value otherwise.
func (o *PatchedJIRAInstanceRequest) GetOpenStatusKey() int32 {
	if o == nil || IsNil(o.OpenStatusKey) {
		var ret int32
		return ret
	}
	return *o.OpenStatusKey
}

// GetOpenStatusKeyOk returns a tuple with the OpenStatusKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedJIRAInstanceRequest) GetOpenStatusKeyOk() (*int32, bool) {
	if o == nil || IsNil(o.OpenStatusKey) {
		return nil, false
	}
	return o.OpenStatusKey, true
}

// HasOpenStatusKey returns a boolean if a field has been set.
func (o *PatchedJIRAInstanceRequest) HasOpenStatusKey() bool {
	if o != nil && !IsNil(o.OpenStatusKey) {
		return true
	}

	return false
}

// SetOpenStatusKey gets a reference to the given int32 and assigns it to the OpenStatusKey field.
func (o *PatchedJIRAInstanceRequest) SetOpenStatusKey(v int32) {
	o.OpenStatusKey = &v
}

// GetCloseStatusKey returns the CloseStatusKey field value if set, zero value otherwise.
func (o *PatchedJIRAInstanceRequest) GetCloseStatusKey() int32 {
	if o == nil || IsNil(o.CloseStatusKey) {
		var ret int32
		return ret
	}
	return *o.CloseStatusKey
}

// GetCloseStatusKeyOk returns a tuple with the CloseStatusKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedJIRAInstanceRequest) GetCloseStatusKeyOk() (*int32, bool) {
	if o == nil || IsNil(o.CloseStatusKey) {
		return nil, false
	}
	return o.CloseStatusKey, true
}

// HasCloseStatusKey returns a boolean if a field has been set.
func (o *PatchedJIRAInstanceRequest) HasCloseStatusKey() bool {
	if o != nil && !IsNil(o.CloseStatusKey) {
		return true
	}

	return false
}

// SetCloseStatusKey gets a reference to the given int32 and assigns it to the CloseStatusKey field.
func (o *PatchedJIRAInstanceRequest) SetCloseStatusKey(v int32) {
	o.CloseStatusKey = &v
}

// GetInfoMappingSeverity returns the InfoMappingSeverity field value if set, zero value otherwise.
func (o *PatchedJIRAInstanceRequest) GetInfoMappingSeverity() string {
	if o == nil || IsNil(o.InfoMappingSeverity) {
		var ret string
		return ret
	}
	return *o.InfoMappingSeverity
}

// GetInfoMappingSeverityOk returns a tuple with the InfoMappingSeverity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedJIRAInstanceRequest) GetInfoMappingSeverityOk() (*string, bool) {
	if o == nil || IsNil(o.InfoMappingSeverity) {
		return nil, false
	}
	return o.InfoMappingSeverity, true
}

// HasInfoMappingSeverity returns a boolean if a field has been set.
func (o *PatchedJIRAInstanceRequest) HasInfoMappingSeverity() bool {
	if o != nil && !IsNil(o.InfoMappingSeverity) {
		return true
	}

	return false
}

// SetInfoMappingSeverity gets a reference to the given string and assigns it to the InfoMappingSeverity field.
func (o *PatchedJIRAInstanceRequest) SetInfoMappingSeverity(v string) {
	o.InfoMappingSeverity = &v
}

// GetLowMappingSeverity returns the LowMappingSeverity field value if set, zero value otherwise.
func (o *PatchedJIRAInstanceRequest) GetLowMappingSeverity() string {
	if o == nil || IsNil(o.LowMappingSeverity) {
		var ret string
		return ret
	}
	return *o.LowMappingSeverity
}

// GetLowMappingSeverityOk returns a tuple with the LowMappingSeverity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedJIRAInstanceRequest) GetLowMappingSeverityOk() (*string, bool) {
	if o == nil || IsNil(o.LowMappingSeverity) {
		return nil, false
	}
	return o.LowMappingSeverity, true
}

// HasLowMappingSeverity returns a boolean if a field has been set.
func (o *PatchedJIRAInstanceRequest) HasLowMappingSeverity() bool {
	if o != nil && !IsNil(o.LowMappingSeverity) {
		return true
	}

	return false
}

// SetLowMappingSeverity gets a reference to the given string and assigns it to the LowMappingSeverity field.
func (o *PatchedJIRAInstanceRequest) SetLowMappingSeverity(v string) {
	o.LowMappingSeverity = &v
}

// GetMediumMappingSeverity returns the MediumMappingSeverity field value if set, zero value otherwise.
func (o *PatchedJIRAInstanceRequest) GetMediumMappingSeverity() string {
	if o == nil || IsNil(o.MediumMappingSeverity) {
		var ret string
		return ret
	}
	return *o.MediumMappingSeverity
}

// GetMediumMappingSeverityOk returns a tuple with the MediumMappingSeverity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedJIRAInstanceRequest) GetMediumMappingSeverityOk() (*string, bool) {
	if o == nil || IsNil(o.MediumMappingSeverity) {
		return nil, false
	}
	return o.MediumMappingSeverity, true
}

// HasMediumMappingSeverity returns a boolean if a field has been set.
func (o *PatchedJIRAInstanceRequest) HasMediumMappingSeverity() bool {
	if o != nil && !IsNil(o.MediumMappingSeverity) {
		return true
	}

	return false
}

// SetMediumMappingSeverity gets a reference to the given string and assigns it to the MediumMappingSeverity field.
func (o *PatchedJIRAInstanceRequest) SetMediumMappingSeverity(v string) {
	o.MediumMappingSeverity = &v
}

// GetHighMappingSeverity returns the HighMappingSeverity field value if set, zero value otherwise.
func (o *PatchedJIRAInstanceRequest) GetHighMappingSeverity() string {
	if o == nil || IsNil(o.HighMappingSeverity) {
		var ret string
		return ret
	}
	return *o.HighMappingSeverity
}

// GetHighMappingSeverityOk returns a tuple with the HighMappingSeverity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedJIRAInstanceRequest) GetHighMappingSeverityOk() (*string, bool) {
	if o == nil || IsNil(o.HighMappingSeverity) {
		return nil, false
	}
	return o.HighMappingSeverity, true
}

// HasHighMappingSeverity returns a boolean if a field has been set.
func (o *PatchedJIRAInstanceRequest) HasHighMappingSeverity() bool {
	if o != nil && !IsNil(o.HighMappingSeverity) {
		return true
	}

	return false
}

// SetHighMappingSeverity gets a reference to the given string and assigns it to the HighMappingSeverity field.
func (o *PatchedJIRAInstanceRequest) SetHighMappingSeverity(v string) {
	o.HighMappingSeverity = &v
}

// GetCriticalMappingSeverity returns the CriticalMappingSeverity field value if set, zero value otherwise.
func (o *PatchedJIRAInstanceRequest) GetCriticalMappingSeverity() string {
	if o == nil || IsNil(o.CriticalMappingSeverity) {
		var ret string
		return ret
	}
	return *o.CriticalMappingSeverity
}

// GetCriticalMappingSeverityOk returns a tuple with the CriticalMappingSeverity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedJIRAInstanceRequest) GetCriticalMappingSeverityOk() (*string, bool) {
	if o == nil || IsNil(o.CriticalMappingSeverity) {
		return nil, false
	}
	return o.CriticalMappingSeverity, true
}

// HasCriticalMappingSeverity returns a boolean if a field has been set.
func (o *PatchedJIRAInstanceRequest) HasCriticalMappingSeverity() bool {
	if o != nil && !IsNil(o.CriticalMappingSeverity) {
		return true
	}

	return false
}

// SetCriticalMappingSeverity gets a reference to the given string and assigns it to the CriticalMappingSeverity field.
func (o *PatchedJIRAInstanceRequest) SetCriticalMappingSeverity(v string) {
	o.CriticalMappingSeverity = &v
}

// GetFindingText returns the FindingText field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchedJIRAInstanceRequest) GetFindingText() string {
	if o == nil || IsNil(o.FindingText.Get()) {
		var ret string
		return ret
	}
	return *o.FindingText.Get()
}

// GetFindingTextOk returns a tuple with the FindingText field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchedJIRAInstanceRequest) GetFindingTextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FindingText.Get(), o.FindingText.IsSet()
}

// HasFindingText returns a boolean if a field has been set.
func (o *PatchedJIRAInstanceRequest) HasFindingText() bool {
	if o != nil && o.FindingText.IsSet() {
		return true
	}

	return false
}

// SetFindingText gets a reference to the given NullableString and assigns it to the FindingText field.
func (o *PatchedJIRAInstanceRequest) SetFindingText(v string) {
	o.FindingText.Set(&v)
}
// SetFindingTextNil sets the value for FindingText to be an explicit nil
func (o *PatchedJIRAInstanceRequest) SetFindingTextNil() {
	o.FindingText.Set(nil)
}

// UnsetFindingText ensures that no value is present for FindingText, not even an explicit nil
func (o *PatchedJIRAInstanceRequest) UnsetFindingText() {
	o.FindingText.Unset()
}

// GetAcceptedMappingResolution returns the AcceptedMappingResolution field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchedJIRAInstanceRequest) GetAcceptedMappingResolution() string {
	if o == nil || IsNil(o.AcceptedMappingResolution.Get()) {
		var ret string
		return ret
	}
	return *o.AcceptedMappingResolution.Get()
}

// GetAcceptedMappingResolutionOk returns a tuple with the AcceptedMappingResolution field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchedJIRAInstanceRequest) GetAcceptedMappingResolutionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AcceptedMappingResolution.Get(), o.AcceptedMappingResolution.IsSet()
}

// HasAcceptedMappingResolution returns a boolean if a field has been set.
func (o *PatchedJIRAInstanceRequest) HasAcceptedMappingResolution() bool {
	if o != nil && o.AcceptedMappingResolution.IsSet() {
		return true
	}

	return false
}

// SetAcceptedMappingResolution gets a reference to the given NullableString and assigns it to the AcceptedMappingResolution field.
func (o *PatchedJIRAInstanceRequest) SetAcceptedMappingResolution(v string) {
	o.AcceptedMappingResolution.Set(&v)
}
// SetAcceptedMappingResolutionNil sets the value for AcceptedMappingResolution to be an explicit nil
func (o *PatchedJIRAInstanceRequest) SetAcceptedMappingResolutionNil() {
	o.AcceptedMappingResolution.Set(nil)
}

// UnsetAcceptedMappingResolution ensures that no value is present for AcceptedMappingResolution, not even an explicit nil
func (o *PatchedJIRAInstanceRequest) UnsetAcceptedMappingResolution() {
	o.AcceptedMappingResolution.Unset()
}

// GetFalsePositiveMappingResolution returns the FalsePositiveMappingResolution field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchedJIRAInstanceRequest) GetFalsePositiveMappingResolution() string {
	if o == nil || IsNil(o.FalsePositiveMappingResolution.Get()) {
		var ret string
		return ret
	}
	return *o.FalsePositiveMappingResolution.Get()
}

// GetFalsePositiveMappingResolutionOk returns a tuple with the FalsePositiveMappingResolution field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchedJIRAInstanceRequest) GetFalsePositiveMappingResolutionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FalsePositiveMappingResolution.Get(), o.FalsePositiveMappingResolution.IsSet()
}

// HasFalsePositiveMappingResolution returns a boolean if a field has been set.
func (o *PatchedJIRAInstanceRequest) HasFalsePositiveMappingResolution() bool {
	if o != nil && o.FalsePositiveMappingResolution.IsSet() {
		return true
	}

	return false
}

// SetFalsePositiveMappingResolution gets a reference to the given NullableString and assigns it to the FalsePositiveMappingResolution field.
func (o *PatchedJIRAInstanceRequest) SetFalsePositiveMappingResolution(v string) {
	o.FalsePositiveMappingResolution.Set(&v)
}
// SetFalsePositiveMappingResolutionNil sets the value for FalsePositiveMappingResolution to be an explicit nil
func (o *PatchedJIRAInstanceRequest) SetFalsePositiveMappingResolutionNil() {
	o.FalsePositiveMappingResolution.Set(nil)
}

// UnsetFalsePositiveMappingResolution ensures that no value is present for FalsePositiveMappingResolution, not even an explicit nil
func (o *PatchedJIRAInstanceRequest) UnsetFalsePositiveMappingResolution() {
	o.FalsePositiveMappingResolution.Unset()
}

// GetGlobalJiraSlaNotification returns the GlobalJiraSlaNotification field value if set, zero value otherwise.
func (o *PatchedJIRAInstanceRequest) GetGlobalJiraSlaNotification() bool {
	if o == nil || IsNil(o.GlobalJiraSlaNotification) {
		var ret bool
		return ret
	}
	return *o.GlobalJiraSlaNotification
}

// GetGlobalJiraSlaNotificationOk returns a tuple with the GlobalJiraSlaNotification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedJIRAInstanceRequest) GetGlobalJiraSlaNotificationOk() (*bool, bool) {
	if o == nil || IsNil(o.GlobalJiraSlaNotification) {
		return nil, false
	}
	return o.GlobalJiraSlaNotification, true
}

// HasGlobalJiraSlaNotification returns a boolean if a field has been set.
func (o *PatchedJIRAInstanceRequest) HasGlobalJiraSlaNotification() bool {
	if o != nil && !IsNil(o.GlobalJiraSlaNotification) {
		return true
	}

	return false
}

// SetGlobalJiraSlaNotification gets a reference to the given bool and assigns it to the GlobalJiraSlaNotification field.
func (o *PatchedJIRAInstanceRequest) SetGlobalJiraSlaNotification(v bool) {
	o.GlobalJiraSlaNotification = &v
}

// GetFindingJiraSync returns the FindingJiraSync field value if set, zero value otherwise.
func (o *PatchedJIRAInstanceRequest) GetFindingJiraSync() bool {
	if o == nil || IsNil(o.FindingJiraSync) {
		var ret bool
		return ret
	}
	return *o.FindingJiraSync
}

// GetFindingJiraSyncOk returns a tuple with the FindingJiraSync field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedJIRAInstanceRequest) GetFindingJiraSyncOk() (*bool, bool) {
	if o == nil || IsNil(o.FindingJiraSync) {
		return nil, false
	}
	return o.FindingJiraSync, true
}

// HasFindingJiraSync returns a boolean if a field has been set.
func (o *PatchedJIRAInstanceRequest) HasFindingJiraSync() bool {
	if o != nil && !IsNil(o.FindingJiraSync) {
		return true
	}

	return false
}

// SetFindingJiraSync gets a reference to the given bool and assigns it to the FindingJiraSync field.
func (o *PatchedJIRAInstanceRequest) SetFindingJiraSync(v bool) {
	o.FindingJiraSync = &v
}

func (o PatchedJIRAInstanceRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PatchedJIRAInstanceRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ConfigurationName) {
		toSerialize["configuration_name"] = o.ConfigurationName
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	if !IsNil(o.DefaultIssueType) {
		toSerialize["default_issue_type"] = o.DefaultIssueType
	}
	if o.IssueTemplateDir.IsSet() {
		toSerialize["issue_template_dir"] = o.IssueTemplateDir.Get()
	}
	if !IsNil(o.EpicNameId) {
		toSerialize["epic_name_id"] = o.EpicNameId
	}
	if !IsNil(o.OpenStatusKey) {
		toSerialize["open_status_key"] = o.OpenStatusKey
	}
	if !IsNil(o.CloseStatusKey) {
		toSerialize["close_status_key"] = o.CloseStatusKey
	}
	if !IsNil(o.InfoMappingSeverity) {
		toSerialize["info_mapping_severity"] = o.InfoMappingSeverity
	}
	if !IsNil(o.LowMappingSeverity) {
		toSerialize["low_mapping_severity"] = o.LowMappingSeverity
	}
	if !IsNil(o.MediumMappingSeverity) {
		toSerialize["medium_mapping_severity"] = o.MediumMappingSeverity
	}
	if !IsNil(o.HighMappingSeverity) {
		toSerialize["high_mapping_severity"] = o.HighMappingSeverity
	}
	if !IsNil(o.CriticalMappingSeverity) {
		toSerialize["critical_mapping_severity"] = o.CriticalMappingSeverity
	}
	if o.FindingText.IsSet() {
		toSerialize["finding_text"] = o.FindingText.Get()
	}
	if o.AcceptedMappingResolution.IsSet() {
		toSerialize["accepted_mapping_resolution"] = o.AcceptedMappingResolution.Get()
	}
	if o.FalsePositiveMappingResolution.IsSet() {
		toSerialize["false_positive_mapping_resolution"] = o.FalsePositiveMappingResolution.Get()
	}
	if !IsNil(o.GlobalJiraSlaNotification) {
		toSerialize["global_jira_sla_notification"] = o.GlobalJiraSlaNotification
	}
	if !IsNil(o.FindingJiraSync) {
		toSerialize["finding_jira_sync"] = o.FindingJiraSync
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PatchedJIRAInstanceRequest) UnmarshalJSON(data []byte) (err error) {
	varPatchedJIRAInstanceRequest := _PatchedJIRAInstanceRequest{}

	err = json.Unmarshal(data, &varPatchedJIRAInstanceRequest)

	if err != nil {
		return err
	}

	*o = PatchedJIRAInstanceRequest(varPatchedJIRAInstanceRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "configuration_name")
		delete(additionalProperties, "url")
		delete(additionalProperties, "username")
		delete(additionalProperties, "password")
		delete(additionalProperties, "default_issue_type")
		delete(additionalProperties, "issue_template_dir")
		delete(additionalProperties, "epic_name_id")
		delete(additionalProperties, "open_status_key")
		delete(additionalProperties, "close_status_key")
		delete(additionalProperties, "info_mapping_severity")
		delete(additionalProperties, "low_mapping_severity")
		delete(additionalProperties, "medium_mapping_severity")
		delete(additionalProperties, "high_mapping_severity")
		delete(additionalProperties, "critical_mapping_severity")
		delete(additionalProperties, "finding_text")
		delete(additionalProperties, "accepted_mapping_resolution")
		delete(additionalProperties, "false_positive_mapping_resolution")
		delete(additionalProperties, "global_jira_sla_notification")
		delete(additionalProperties, "finding_jira_sync")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePatchedJIRAInstanceRequest struct {
	value *PatchedJIRAInstanceRequest
	isSet bool
}

func (v NullablePatchedJIRAInstanceRequest) Get() *PatchedJIRAInstanceRequest {
	return v.value
}

func (v *NullablePatchedJIRAInstanceRequest) Set(val *PatchedJIRAInstanceRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchedJIRAInstanceRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchedJIRAInstanceRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchedJIRAInstanceRequest(val *PatchedJIRAInstanceRequest) *NullablePatchedJIRAInstanceRequest {
	return &NullablePatchedJIRAInstanceRequest{value: val, isSet: true}
}

func (v NullablePatchedJIRAInstanceRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchedJIRAInstanceRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


