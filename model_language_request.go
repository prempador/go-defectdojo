/*
Defect Dojo API v2

Defect Dojo - Open Source vulnerability Management made easy. Prefetch related parameters/responses not yet in the schema.

API version: 2.38.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package defectdojo

import (
	"encoding/json"
	"fmt"
)

// checks if the LanguageRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LanguageRequest{}

// LanguageRequest struct for LanguageRequest
type LanguageRequest struct {
	Files NullableInt32 `json:"files,omitempty"`
	Blank NullableInt32 `json:"blank,omitempty"`
	Comment NullableInt32 `json:"comment,omitempty"`
	Code NullableInt32 `json:"code,omitempty"`
	Language int32 `json:"language"`
	Product int32 `json:"product"`
	User NullableInt32 `json:"user,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _LanguageRequest LanguageRequest

// NewLanguageRequest instantiates a new LanguageRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLanguageRequest(language int32, product int32) *LanguageRequest {
	this := LanguageRequest{}
	this.Language = language
	this.Product = product
	return &this
}

// NewLanguageRequestWithDefaults instantiates a new LanguageRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLanguageRequestWithDefaults() *LanguageRequest {
	this := LanguageRequest{}
	return &this
}

// GetFiles returns the Files field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LanguageRequest) GetFiles() int32 {
	if o == nil || IsNil(o.Files.Get()) {
		var ret int32
		return ret
	}
	return *o.Files.Get()
}

// GetFilesOk returns a tuple with the Files field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LanguageRequest) GetFilesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Files.Get(), o.Files.IsSet()
}

// HasFiles returns a boolean if a field has been set.
func (o *LanguageRequest) HasFiles() bool {
	if o != nil && o.Files.IsSet() {
		return true
	}

	return false
}

// SetFiles gets a reference to the given NullableInt32 and assigns it to the Files field.
func (o *LanguageRequest) SetFiles(v int32) {
	o.Files.Set(&v)
}
// SetFilesNil sets the value for Files to be an explicit nil
func (o *LanguageRequest) SetFilesNil() {
	o.Files.Set(nil)
}

// UnsetFiles ensures that no value is present for Files, not even an explicit nil
func (o *LanguageRequest) UnsetFiles() {
	o.Files.Unset()
}

// GetBlank returns the Blank field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LanguageRequest) GetBlank() int32 {
	if o == nil || IsNil(o.Blank.Get()) {
		var ret int32
		return ret
	}
	return *o.Blank.Get()
}

// GetBlankOk returns a tuple with the Blank field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LanguageRequest) GetBlankOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Blank.Get(), o.Blank.IsSet()
}

// HasBlank returns a boolean if a field has been set.
func (o *LanguageRequest) HasBlank() bool {
	if o != nil && o.Blank.IsSet() {
		return true
	}

	return false
}

// SetBlank gets a reference to the given NullableInt32 and assigns it to the Blank field.
func (o *LanguageRequest) SetBlank(v int32) {
	o.Blank.Set(&v)
}
// SetBlankNil sets the value for Blank to be an explicit nil
func (o *LanguageRequest) SetBlankNil() {
	o.Blank.Set(nil)
}

// UnsetBlank ensures that no value is present for Blank, not even an explicit nil
func (o *LanguageRequest) UnsetBlank() {
	o.Blank.Unset()
}

// GetComment returns the Comment field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LanguageRequest) GetComment() int32 {
	if o == nil || IsNil(o.Comment.Get()) {
		var ret int32
		return ret
	}
	return *o.Comment.Get()
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LanguageRequest) GetCommentOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Comment.Get(), o.Comment.IsSet()
}

// HasComment returns a boolean if a field has been set.
func (o *LanguageRequest) HasComment() bool {
	if o != nil && o.Comment.IsSet() {
		return true
	}

	return false
}

// SetComment gets a reference to the given NullableInt32 and assigns it to the Comment field.
func (o *LanguageRequest) SetComment(v int32) {
	o.Comment.Set(&v)
}
// SetCommentNil sets the value for Comment to be an explicit nil
func (o *LanguageRequest) SetCommentNil() {
	o.Comment.Set(nil)
}

// UnsetComment ensures that no value is present for Comment, not even an explicit nil
func (o *LanguageRequest) UnsetComment() {
	o.Comment.Unset()
}

// GetCode returns the Code field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LanguageRequest) GetCode() int32 {
	if o == nil || IsNil(o.Code.Get()) {
		var ret int32
		return ret
	}
	return *o.Code.Get()
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LanguageRequest) GetCodeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Code.Get(), o.Code.IsSet()
}

// HasCode returns a boolean if a field has been set.
func (o *LanguageRequest) HasCode() bool {
	if o != nil && o.Code.IsSet() {
		return true
	}

	return false
}

// SetCode gets a reference to the given NullableInt32 and assigns it to the Code field.
func (o *LanguageRequest) SetCode(v int32) {
	o.Code.Set(&v)
}
// SetCodeNil sets the value for Code to be an explicit nil
func (o *LanguageRequest) SetCodeNil() {
	o.Code.Set(nil)
}

// UnsetCode ensures that no value is present for Code, not even an explicit nil
func (o *LanguageRequest) UnsetCode() {
	o.Code.Unset()
}

// GetLanguage returns the Language field value
func (o *LanguageRequest) GetLanguage() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Language
}

// GetLanguageOk returns a tuple with the Language field value
// and a boolean to check if the value has been set.
func (o *LanguageRequest) GetLanguageOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Language, true
}

// SetLanguage sets field value
func (o *LanguageRequest) SetLanguage(v int32) {
	o.Language = v
}


// GetProduct returns the Product field value
func (o *LanguageRequest) GetProduct() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Product
}

// GetProductOk returns a tuple with the Product field value
// and a boolean to check if the value has been set.
func (o *LanguageRequest) GetProductOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Product, true
}

// SetProduct sets field value
func (o *LanguageRequest) SetProduct(v int32) {
	o.Product = v
}


// GetUser returns the User field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LanguageRequest) GetUser() int32 {
	if o == nil || IsNil(o.User.Get()) {
		var ret int32
		return ret
	}
	return *o.User.Get()
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LanguageRequest) GetUserOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.User.Get(), o.User.IsSet()
}

// HasUser returns a boolean if a field has been set.
func (o *LanguageRequest) HasUser() bool {
	if o != nil && o.User.IsSet() {
		return true
	}

	return false
}

// SetUser gets a reference to the given NullableInt32 and assigns it to the User field.
func (o *LanguageRequest) SetUser(v int32) {
	o.User.Set(&v)
}
// SetUserNil sets the value for User to be an explicit nil
func (o *LanguageRequest) SetUserNil() {
	o.User.Set(nil)
}

// UnsetUser ensures that no value is present for User, not even an explicit nil
func (o *LanguageRequest) UnsetUser() {
	o.User.Unset()
}

func (o LanguageRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LanguageRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Files.IsSet() {
		toSerialize["files"] = o.Files.Get()
	}
	if o.Blank.IsSet() {
		toSerialize["blank"] = o.Blank.Get()
	}
	if o.Comment.IsSet() {
		toSerialize["comment"] = o.Comment.Get()
	}
	if o.Code.IsSet() {
		toSerialize["code"] = o.Code.Get()
	}
	toSerialize["language"] = o.Language
	toSerialize["product"] = o.Product
	if o.User.IsSet() {
		toSerialize["user"] = o.User.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *LanguageRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"language",
		"product",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{} {
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == ""{
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil{
			return err
		}
	}
	varLanguageRequest := _LanguageRequest{}

	err = json.Unmarshal(data, &varLanguageRequest)

	if err != nil {
		return err
	}

	*o = LanguageRequest(varLanguageRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "files")
		delete(additionalProperties, "blank")
		delete(additionalProperties, "comment")
		delete(additionalProperties, "code")
		delete(additionalProperties, "language")
		delete(additionalProperties, "product")
		delete(additionalProperties, "user")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableLanguageRequest struct {
	value *LanguageRequest
	isSet bool
}

func (v NullableLanguageRequest) Get() *LanguageRequest {
	return v.value
}

func (v *NullableLanguageRequest) Set(val *LanguageRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableLanguageRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableLanguageRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLanguageRequest(val *LanguageRequest) *NullableLanguageRequest {
	return &NullableLanguageRequest{value: val, isSet: true}
}

func (v NullableLanguageRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLanguageRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


