/*
Defect Dojo API v2

Defect Dojo - Open Source vulnerability Management made easy. Prefetch related parameters/responses not yet in the schema.

API version: 2.38.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package defectdojo

import (
	"encoding/json"
	"fmt"
)

// checks if the StatusStatistics type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StatusStatistics{}

// StatusStatistics struct for StatusStatistics
type StatusStatistics struct {
	Active int32 `json:"active"`
	Verified int32 `json:"verified"`
	Duplicate int32 `json:"duplicate"`
	FalseP int32 `json:"false_p"`
	OutOfScope int32 `json:"out_of_scope"`
	IsMitigated int32 `json:"is_mitigated"`
	RiskAccepted int32 `json:"risk_accepted"`
	Total int32 `json:"total"`
	AdditionalProperties map[string]interface{}
}

type _StatusStatistics StatusStatistics

// NewStatusStatistics instantiates a new StatusStatistics object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStatusStatistics(active int32, verified int32, duplicate int32, falseP int32, outOfScope int32, isMitigated int32, riskAccepted int32, total int32) *StatusStatistics {
	this := StatusStatistics{}
	this.Active = active
	this.Verified = verified
	this.Duplicate = duplicate
	this.FalseP = falseP
	this.OutOfScope = outOfScope
	this.IsMitigated = isMitigated
	this.RiskAccepted = riskAccepted
	this.Total = total
	return &this
}

// NewStatusStatisticsWithDefaults instantiates a new StatusStatistics object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStatusStatisticsWithDefaults() *StatusStatistics {
	this := StatusStatistics{}
	return &this
}

// GetActive returns the Active field value
func (o *StatusStatistics) GetActive() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Active
}

// GetActiveOk returns a tuple with the Active field value
// and a boolean to check if the value has been set.
func (o *StatusStatistics) GetActiveOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Active, true
}

// SetActive sets field value
func (o *StatusStatistics) SetActive(v int32) {
	o.Active = v
}


// GetVerified returns the Verified field value
func (o *StatusStatistics) GetVerified() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Verified
}

// GetVerifiedOk returns a tuple with the Verified field value
// and a boolean to check if the value has been set.
func (o *StatusStatistics) GetVerifiedOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Verified, true
}

// SetVerified sets field value
func (o *StatusStatistics) SetVerified(v int32) {
	o.Verified = v
}


// GetDuplicate returns the Duplicate field value
func (o *StatusStatistics) GetDuplicate() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Duplicate
}

// GetDuplicateOk returns a tuple with the Duplicate field value
// and a boolean to check if the value has been set.
func (o *StatusStatistics) GetDuplicateOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Duplicate, true
}

// SetDuplicate sets field value
func (o *StatusStatistics) SetDuplicate(v int32) {
	o.Duplicate = v
}


// GetFalseP returns the FalseP field value
func (o *StatusStatistics) GetFalseP() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.FalseP
}

// GetFalsePOk returns a tuple with the FalseP field value
// and a boolean to check if the value has been set.
func (o *StatusStatistics) GetFalsePOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FalseP, true
}

// SetFalseP sets field value
func (o *StatusStatistics) SetFalseP(v int32) {
	o.FalseP = v
}


// GetOutOfScope returns the OutOfScope field value
func (o *StatusStatistics) GetOutOfScope() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.OutOfScope
}

// GetOutOfScopeOk returns a tuple with the OutOfScope field value
// and a boolean to check if the value has been set.
func (o *StatusStatistics) GetOutOfScopeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OutOfScope, true
}

// SetOutOfScope sets field value
func (o *StatusStatistics) SetOutOfScope(v int32) {
	o.OutOfScope = v
}


// GetIsMitigated returns the IsMitigated field value
func (o *StatusStatistics) GetIsMitigated() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.IsMitigated
}

// GetIsMitigatedOk returns a tuple with the IsMitigated field value
// and a boolean to check if the value has been set.
func (o *StatusStatistics) GetIsMitigatedOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsMitigated, true
}

// SetIsMitigated sets field value
func (o *StatusStatistics) SetIsMitigated(v int32) {
	o.IsMitigated = v
}


// GetRiskAccepted returns the RiskAccepted field value
func (o *StatusStatistics) GetRiskAccepted() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.RiskAccepted
}

// GetRiskAcceptedOk returns a tuple with the RiskAccepted field value
// and a boolean to check if the value has been set.
func (o *StatusStatistics) GetRiskAcceptedOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RiskAccepted, true
}

// SetRiskAccepted sets field value
func (o *StatusStatistics) SetRiskAccepted(v int32) {
	o.RiskAccepted = v
}


// GetTotal returns the Total field value
func (o *StatusStatistics) GetTotal() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Total
}

// GetTotalOk returns a tuple with the Total field value
// and a boolean to check if the value has been set.
func (o *StatusStatistics) GetTotalOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Total, true
}

// SetTotal sets field value
func (o *StatusStatistics) SetTotal(v int32) {
	o.Total = v
}


func (o StatusStatistics) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StatusStatistics) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["active"] = o.Active
	toSerialize["verified"] = o.Verified
	toSerialize["duplicate"] = o.Duplicate
	toSerialize["false_p"] = o.FalseP
	toSerialize["out_of_scope"] = o.OutOfScope
	toSerialize["is_mitigated"] = o.IsMitigated
	toSerialize["risk_accepted"] = o.RiskAccepted
	toSerialize["total"] = o.Total

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *StatusStatistics) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"active",
		"verified",
		"duplicate",
		"false_p",
		"out_of_scope",
		"is_mitigated",
		"risk_accepted",
		"total",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{} {
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == ""{
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil{
			return err
		}
	}
	varStatusStatistics := _StatusStatistics{}

	err = json.Unmarshal(data, &varStatusStatistics)

	if err != nil {
		return err
	}

	*o = StatusStatistics(varStatusStatistics)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "active")
		delete(additionalProperties, "verified")
		delete(additionalProperties, "duplicate")
		delete(additionalProperties, "false_p")
		delete(additionalProperties, "out_of_scope")
		delete(additionalProperties, "is_mitigated")
		delete(additionalProperties, "risk_accepted")
		delete(additionalProperties, "total")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableStatusStatistics struct {
	value *StatusStatistics
	isSet bool
}

func (v NullableStatusStatistics) Get() *StatusStatistics {
	return v.value
}

func (v *NullableStatusStatistics) Set(val *StatusStatistics) {
	v.value = val
	v.isSet = true
}

func (v NullableStatusStatistics) IsSet() bool {
	return v.isSet
}

func (v *NullableStatusStatistics) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStatusStatistics(val *StatusStatistics) *NullableStatusStatistics {
	return &NullableStatusStatistics{value: val, isSet: true}
}

func (v NullableStatusStatistics) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStatusStatistics) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


