/*
Defect Dojo API v2

Defect Dojo - Open Source vulnerability Management made easy. Prefetch related parameters/responses not yet in the schema.

API version: 2.30.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package defectdojo

import (
	"encoding/json"
)

// checks if the PatchedAppAnalysisRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PatchedAppAnalysisRequest{}

// PatchedAppAnalysisRequest struct for PatchedAppAnalysisRequest
type PatchedAppAnalysisRequest struct {
	Tags []string `json:"tags,omitempty"`
	Name *string `json:"name,omitempty"`
	Confidence NullableInt32 `json:"confidence,omitempty"`
	Version NullableString `json:"version,omitempty"`
	Icon NullableString `json:"icon,omitempty"`
	Website NullableString `json:"website,omitempty"`
	WebsiteFound NullableString `json:"website_found,omitempty"`
	Product *int32 `json:"product,omitempty"`
	User *int32 `json:"user,omitempty"`
}

// NewPatchedAppAnalysisRequest instantiates a new PatchedAppAnalysisRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPatchedAppAnalysisRequest() *PatchedAppAnalysisRequest {
	this := PatchedAppAnalysisRequest{}
	return &this
}

// NewPatchedAppAnalysisRequestWithDefaults instantiates a new PatchedAppAnalysisRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatchedAppAnalysisRequestWithDefaults() *PatchedAppAnalysisRequest {
	this := PatchedAppAnalysisRequest{}
	return &this
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *PatchedAppAnalysisRequest) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedAppAnalysisRequest) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *PatchedAppAnalysisRequest) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *PatchedAppAnalysisRequest) SetTags(v []string) {
	o.Tags = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PatchedAppAnalysisRequest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedAppAnalysisRequest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PatchedAppAnalysisRequest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PatchedAppAnalysisRequest) SetName(v string) {
	o.Name = &v
}

// GetConfidence returns the Confidence field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchedAppAnalysisRequest) GetConfidence() int32 {
	if o == nil || IsNil(o.Confidence.Get()) {
		var ret int32
		return ret
	}
	return *o.Confidence.Get()
}

// GetConfidenceOk returns a tuple with the Confidence field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchedAppAnalysisRequest) GetConfidenceOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Confidence.Get(), o.Confidence.IsSet()
}

// HasConfidence returns a boolean if a field has been set.
func (o *PatchedAppAnalysisRequest) HasConfidence() bool {
	if o != nil && o.Confidence.IsSet() {
		return true
	}

	return false
}

// SetConfidence gets a reference to the given NullableInt32 and assigns it to the Confidence field.
func (o *PatchedAppAnalysisRequest) SetConfidence(v int32) {
	o.Confidence.Set(&v)
}
// SetConfidenceNil sets the value for Confidence to be an explicit nil
func (o *PatchedAppAnalysisRequest) SetConfidenceNil() {
	o.Confidence.Set(nil)
}

// UnsetConfidence ensures that no value is present for Confidence, not even an explicit nil
func (o *PatchedAppAnalysisRequest) UnsetConfidence() {
	o.Confidence.Unset()
}

// GetVersion returns the Version field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchedAppAnalysisRequest) GetVersion() string {
	if o == nil || IsNil(o.Version.Get()) {
		var ret string
		return ret
	}
	return *o.Version.Get()
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchedAppAnalysisRequest) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Version.Get(), o.Version.IsSet()
}

// HasVersion returns a boolean if a field has been set.
func (o *PatchedAppAnalysisRequest) HasVersion() bool {
	if o != nil && o.Version.IsSet() {
		return true
	}

	return false
}

// SetVersion gets a reference to the given NullableString and assigns it to the Version field.
func (o *PatchedAppAnalysisRequest) SetVersion(v string) {
	o.Version.Set(&v)
}
// SetVersionNil sets the value for Version to be an explicit nil
func (o *PatchedAppAnalysisRequest) SetVersionNil() {
	o.Version.Set(nil)
}

// UnsetVersion ensures that no value is present for Version, not even an explicit nil
func (o *PatchedAppAnalysisRequest) UnsetVersion() {
	o.Version.Unset()
}

// GetIcon returns the Icon field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchedAppAnalysisRequest) GetIcon() string {
	if o == nil || IsNil(o.Icon.Get()) {
		var ret string
		return ret
	}
	return *o.Icon.Get()
}

// GetIconOk returns a tuple with the Icon field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchedAppAnalysisRequest) GetIconOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Icon.Get(), o.Icon.IsSet()
}

// HasIcon returns a boolean if a field has been set.
func (o *PatchedAppAnalysisRequest) HasIcon() bool {
	if o != nil && o.Icon.IsSet() {
		return true
	}

	return false
}

// SetIcon gets a reference to the given NullableString and assigns it to the Icon field.
func (o *PatchedAppAnalysisRequest) SetIcon(v string) {
	o.Icon.Set(&v)
}
// SetIconNil sets the value for Icon to be an explicit nil
func (o *PatchedAppAnalysisRequest) SetIconNil() {
	o.Icon.Set(nil)
}

// UnsetIcon ensures that no value is present for Icon, not even an explicit nil
func (o *PatchedAppAnalysisRequest) UnsetIcon() {
	o.Icon.Unset()
}

// GetWebsite returns the Website field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchedAppAnalysisRequest) GetWebsite() string {
	if o == nil || IsNil(o.Website.Get()) {
		var ret string
		return ret
	}
	return *o.Website.Get()
}

// GetWebsiteOk returns a tuple with the Website field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchedAppAnalysisRequest) GetWebsiteOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Website.Get(), o.Website.IsSet()
}

// HasWebsite returns a boolean if a field has been set.
func (o *PatchedAppAnalysisRequest) HasWebsite() bool {
	if o != nil && o.Website.IsSet() {
		return true
	}

	return false
}

// SetWebsite gets a reference to the given NullableString and assigns it to the Website field.
func (o *PatchedAppAnalysisRequest) SetWebsite(v string) {
	o.Website.Set(&v)
}
// SetWebsiteNil sets the value for Website to be an explicit nil
func (o *PatchedAppAnalysisRequest) SetWebsiteNil() {
	o.Website.Set(nil)
}

// UnsetWebsite ensures that no value is present for Website, not even an explicit nil
func (o *PatchedAppAnalysisRequest) UnsetWebsite() {
	o.Website.Unset()
}

// GetWebsiteFound returns the WebsiteFound field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchedAppAnalysisRequest) GetWebsiteFound() string {
	if o == nil || IsNil(o.WebsiteFound.Get()) {
		var ret string
		return ret
	}
	return *o.WebsiteFound.Get()
}

// GetWebsiteFoundOk returns a tuple with the WebsiteFound field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchedAppAnalysisRequest) GetWebsiteFoundOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.WebsiteFound.Get(), o.WebsiteFound.IsSet()
}

// HasWebsiteFound returns a boolean if a field has been set.
func (o *PatchedAppAnalysisRequest) HasWebsiteFound() bool {
	if o != nil && o.WebsiteFound.IsSet() {
		return true
	}

	return false
}

// SetWebsiteFound gets a reference to the given NullableString and assigns it to the WebsiteFound field.
func (o *PatchedAppAnalysisRequest) SetWebsiteFound(v string) {
	o.WebsiteFound.Set(&v)
}
// SetWebsiteFoundNil sets the value for WebsiteFound to be an explicit nil
func (o *PatchedAppAnalysisRequest) SetWebsiteFoundNil() {
	o.WebsiteFound.Set(nil)
}

// UnsetWebsiteFound ensures that no value is present for WebsiteFound, not even an explicit nil
func (o *PatchedAppAnalysisRequest) UnsetWebsiteFound() {
	o.WebsiteFound.Unset()
}

// GetProduct returns the Product field value if set, zero value otherwise.
func (o *PatchedAppAnalysisRequest) GetProduct() int32 {
	if o == nil || IsNil(o.Product) {
		var ret int32
		return ret
	}
	return *o.Product
}

// GetProductOk returns a tuple with the Product field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedAppAnalysisRequest) GetProductOk() (*int32, bool) {
	if o == nil || IsNil(o.Product) {
		return nil, false
	}
	return o.Product, true
}

// HasProduct returns a boolean if a field has been set.
func (o *PatchedAppAnalysisRequest) HasProduct() bool {
	if o != nil && !IsNil(o.Product) {
		return true
	}

	return false
}

// SetProduct gets a reference to the given int32 and assigns it to the Product field.
func (o *PatchedAppAnalysisRequest) SetProduct(v int32) {
	o.Product = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *PatchedAppAnalysisRequest) GetUser() int32 {
	if o == nil || IsNil(o.User) {
		var ret int32
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedAppAnalysisRequest) GetUserOk() (*int32, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *PatchedAppAnalysisRequest) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given int32 and assigns it to the User field.
func (o *PatchedAppAnalysisRequest) SetUser(v int32) {
	o.User = &v
}

func (o PatchedAppAnalysisRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PatchedAppAnalysisRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if o.Confidence.IsSet() {
		toSerialize["confidence"] = o.Confidence.Get()
	}
	if o.Version.IsSet() {
		toSerialize["version"] = o.Version.Get()
	}
	if o.Icon.IsSet() {
		toSerialize["icon"] = o.Icon.Get()
	}
	if o.Website.IsSet() {
		toSerialize["website"] = o.Website.Get()
	}
	if o.WebsiteFound.IsSet() {
		toSerialize["website_found"] = o.WebsiteFound.Get()
	}
	if !IsNil(o.Product) {
		toSerialize["product"] = o.Product
	}
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	return toSerialize, nil
}

type NullablePatchedAppAnalysisRequest struct {
	value *PatchedAppAnalysisRequest
	isSet bool
}

func (v NullablePatchedAppAnalysisRequest) Get() *PatchedAppAnalysisRequest {
	return v.value
}

func (v *NullablePatchedAppAnalysisRequest) Set(val *PatchedAppAnalysisRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchedAppAnalysisRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchedAppAnalysisRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchedAppAnalysisRequest(val *PatchedAppAnalysisRequest) *NullablePatchedAppAnalysisRequest {
	return &NullablePatchedAppAnalysisRequest{value: val, isSet: true}
}

func (v NullablePatchedAppAnalysisRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchedAppAnalysisRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


