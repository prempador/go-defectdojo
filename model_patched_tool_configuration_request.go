/*
Defect Dojo API v2

Defect Dojo - Open Source vulnerability Management made easy. Prefetch related parameters/responses not yet in the schema.

API version: 2.38.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package defectdojo

import (
	"encoding/json"
)

// checks if the PatchedToolConfigurationRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PatchedToolConfigurationRequest{}

// PatchedToolConfigurationRequest struct for PatchedToolConfigurationRequest
type PatchedToolConfigurationRequest struct {
	Name *string `json:"name,omitempty"`
	Description NullableString `json:"description,omitempty"`
	Url NullableString `json:"url,omitempty"`
	// * `API` - API Key * `Password` - Username/Password * `SSH` - SSH
	AuthenticationType NullableString `json:"authentication_type,omitempty"`
	// Additional definitions that will be consumed by scanner
	Extras NullableString `json:"extras,omitempty"`
	Username NullableString `json:"username,omitempty"`
	Password NullableString `json:"password,omitempty"`
	AuthTitle NullableString `json:"auth_title,omitempty"`
	Ssh NullableString `json:"ssh,omitempty"`
	ApiKey NullableString `json:"api_key,omitempty"`
	ToolType *int32 `json:"tool_type,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PatchedToolConfigurationRequest PatchedToolConfigurationRequest

// NewPatchedToolConfigurationRequest instantiates a new PatchedToolConfigurationRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPatchedToolConfigurationRequest() *PatchedToolConfigurationRequest {
	this := PatchedToolConfigurationRequest{}
	return &this
}

// NewPatchedToolConfigurationRequestWithDefaults instantiates a new PatchedToolConfigurationRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatchedToolConfigurationRequestWithDefaults() *PatchedToolConfigurationRequest {
	this := PatchedToolConfigurationRequest{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PatchedToolConfigurationRequest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedToolConfigurationRequest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PatchedToolConfigurationRequest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PatchedToolConfigurationRequest) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchedToolConfigurationRequest) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchedToolConfigurationRequest) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *PatchedToolConfigurationRequest) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *PatchedToolConfigurationRequest) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *PatchedToolConfigurationRequest) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *PatchedToolConfigurationRequest) UnsetDescription() {
	o.Description.Unset()
}

// GetUrl returns the Url field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchedToolConfigurationRequest) GetUrl() string {
	if o == nil || IsNil(o.Url.Get()) {
		var ret string
		return ret
	}
	return *o.Url.Get()
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchedToolConfigurationRequest) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Url.Get(), o.Url.IsSet()
}

// HasUrl returns a boolean if a field has been set.
func (o *PatchedToolConfigurationRequest) HasUrl() bool {
	if o != nil && o.Url.IsSet() {
		return true
	}

	return false
}

// SetUrl gets a reference to the given NullableString and assigns it to the Url field.
func (o *PatchedToolConfigurationRequest) SetUrl(v string) {
	o.Url.Set(&v)
}
// SetUrlNil sets the value for Url to be an explicit nil
func (o *PatchedToolConfigurationRequest) SetUrlNil() {
	o.Url.Set(nil)
}

// UnsetUrl ensures that no value is present for Url, not even an explicit nil
func (o *PatchedToolConfigurationRequest) UnsetUrl() {
	o.Url.Unset()
}

// GetAuthenticationType returns the AuthenticationType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchedToolConfigurationRequest) GetAuthenticationType() string {
	if o == nil || IsNil(o.AuthenticationType.Get()) {
		var ret string
		return ret
	}
	return *o.AuthenticationType.Get()
}

// GetAuthenticationTypeOk returns a tuple with the AuthenticationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchedToolConfigurationRequest) GetAuthenticationTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AuthenticationType.Get(), o.AuthenticationType.IsSet()
}

// HasAuthenticationType returns a boolean if a field has been set.
func (o *PatchedToolConfigurationRequest) HasAuthenticationType() bool {
	if o != nil && o.AuthenticationType.IsSet() {
		return true
	}

	return false
}

// SetAuthenticationType gets a reference to the given NullableString and assigns it to the AuthenticationType field.
func (o *PatchedToolConfigurationRequest) SetAuthenticationType(v string) {
	o.AuthenticationType.Set(&v)
}
// SetAuthenticationTypeNil sets the value for AuthenticationType to be an explicit nil
func (o *PatchedToolConfigurationRequest) SetAuthenticationTypeNil() {
	o.AuthenticationType.Set(nil)
}

// UnsetAuthenticationType ensures that no value is present for AuthenticationType, not even an explicit nil
func (o *PatchedToolConfigurationRequest) UnsetAuthenticationType() {
	o.AuthenticationType.Unset()
}

// GetExtras returns the Extras field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchedToolConfigurationRequest) GetExtras() string {
	if o == nil || IsNil(o.Extras.Get()) {
		var ret string
		return ret
	}
	return *o.Extras.Get()
}

// GetExtrasOk returns a tuple with the Extras field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchedToolConfigurationRequest) GetExtrasOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Extras.Get(), o.Extras.IsSet()
}

// HasExtras returns a boolean if a field has been set.
func (o *PatchedToolConfigurationRequest) HasExtras() bool {
	if o != nil && o.Extras.IsSet() {
		return true
	}

	return false
}

// SetExtras gets a reference to the given NullableString and assigns it to the Extras field.
func (o *PatchedToolConfigurationRequest) SetExtras(v string) {
	o.Extras.Set(&v)
}
// SetExtrasNil sets the value for Extras to be an explicit nil
func (o *PatchedToolConfigurationRequest) SetExtrasNil() {
	o.Extras.Set(nil)
}

// UnsetExtras ensures that no value is present for Extras, not even an explicit nil
func (o *PatchedToolConfigurationRequest) UnsetExtras() {
	o.Extras.Unset()
}

// GetUsername returns the Username field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchedToolConfigurationRequest) GetUsername() string {
	if o == nil || IsNil(o.Username.Get()) {
		var ret string
		return ret
	}
	return *o.Username.Get()
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchedToolConfigurationRequest) GetUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Username.Get(), o.Username.IsSet()
}

// HasUsername returns a boolean if a field has been set.
func (o *PatchedToolConfigurationRequest) HasUsername() bool {
	if o != nil && o.Username.IsSet() {
		return true
	}

	return false
}

// SetUsername gets a reference to the given NullableString and assigns it to the Username field.
func (o *PatchedToolConfigurationRequest) SetUsername(v string) {
	o.Username.Set(&v)
}
// SetUsernameNil sets the value for Username to be an explicit nil
func (o *PatchedToolConfigurationRequest) SetUsernameNil() {
	o.Username.Set(nil)
}

// UnsetUsername ensures that no value is present for Username, not even an explicit nil
func (o *PatchedToolConfigurationRequest) UnsetUsername() {
	o.Username.Unset()
}

// GetPassword returns the Password field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchedToolConfigurationRequest) GetPassword() string {
	if o == nil || IsNil(o.Password.Get()) {
		var ret string
		return ret
	}
	return *o.Password.Get()
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchedToolConfigurationRequest) GetPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Password.Get(), o.Password.IsSet()
}

// HasPassword returns a boolean if a field has been set.
func (o *PatchedToolConfigurationRequest) HasPassword() bool {
	if o != nil && o.Password.IsSet() {
		return true
	}

	return false
}

// SetPassword gets a reference to the given NullableString and assigns it to the Password field.
func (o *PatchedToolConfigurationRequest) SetPassword(v string) {
	o.Password.Set(&v)
}
// SetPasswordNil sets the value for Password to be an explicit nil
func (o *PatchedToolConfigurationRequest) SetPasswordNil() {
	o.Password.Set(nil)
}

// UnsetPassword ensures that no value is present for Password, not even an explicit nil
func (o *PatchedToolConfigurationRequest) UnsetPassword() {
	o.Password.Unset()
}

// GetAuthTitle returns the AuthTitle field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchedToolConfigurationRequest) GetAuthTitle() string {
	if o == nil || IsNil(o.AuthTitle.Get()) {
		var ret string
		return ret
	}
	return *o.AuthTitle.Get()
}

// GetAuthTitleOk returns a tuple with the AuthTitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchedToolConfigurationRequest) GetAuthTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AuthTitle.Get(), o.AuthTitle.IsSet()
}

// HasAuthTitle returns a boolean if a field has been set.
func (o *PatchedToolConfigurationRequest) HasAuthTitle() bool {
	if o != nil && o.AuthTitle.IsSet() {
		return true
	}

	return false
}

// SetAuthTitle gets a reference to the given NullableString and assigns it to the AuthTitle field.
func (o *PatchedToolConfigurationRequest) SetAuthTitle(v string) {
	o.AuthTitle.Set(&v)
}
// SetAuthTitleNil sets the value for AuthTitle to be an explicit nil
func (o *PatchedToolConfigurationRequest) SetAuthTitleNil() {
	o.AuthTitle.Set(nil)
}

// UnsetAuthTitle ensures that no value is present for AuthTitle, not even an explicit nil
func (o *PatchedToolConfigurationRequest) UnsetAuthTitle() {
	o.AuthTitle.Unset()
}

// GetSsh returns the Ssh field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchedToolConfigurationRequest) GetSsh() string {
	if o == nil || IsNil(o.Ssh.Get()) {
		var ret string
		return ret
	}
	return *o.Ssh.Get()
}

// GetSshOk returns a tuple with the Ssh field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchedToolConfigurationRequest) GetSshOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Ssh.Get(), o.Ssh.IsSet()
}

// HasSsh returns a boolean if a field has been set.
func (o *PatchedToolConfigurationRequest) HasSsh() bool {
	if o != nil && o.Ssh.IsSet() {
		return true
	}

	return false
}

// SetSsh gets a reference to the given NullableString and assigns it to the Ssh field.
func (o *PatchedToolConfigurationRequest) SetSsh(v string) {
	o.Ssh.Set(&v)
}
// SetSshNil sets the value for Ssh to be an explicit nil
func (o *PatchedToolConfigurationRequest) SetSshNil() {
	o.Ssh.Set(nil)
}

// UnsetSsh ensures that no value is present for Ssh, not even an explicit nil
func (o *PatchedToolConfigurationRequest) UnsetSsh() {
	o.Ssh.Unset()
}

// GetApiKey returns the ApiKey field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchedToolConfigurationRequest) GetApiKey() string {
	if o == nil || IsNil(o.ApiKey.Get()) {
		var ret string
		return ret
	}
	return *o.ApiKey.Get()
}

// GetApiKeyOk returns a tuple with the ApiKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchedToolConfigurationRequest) GetApiKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ApiKey.Get(), o.ApiKey.IsSet()
}

// HasApiKey returns a boolean if a field has been set.
func (o *PatchedToolConfigurationRequest) HasApiKey() bool {
	if o != nil && o.ApiKey.IsSet() {
		return true
	}

	return false
}

// SetApiKey gets a reference to the given NullableString and assigns it to the ApiKey field.
func (o *PatchedToolConfigurationRequest) SetApiKey(v string) {
	o.ApiKey.Set(&v)
}
// SetApiKeyNil sets the value for ApiKey to be an explicit nil
func (o *PatchedToolConfigurationRequest) SetApiKeyNil() {
	o.ApiKey.Set(nil)
}

// UnsetApiKey ensures that no value is present for ApiKey, not even an explicit nil
func (o *PatchedToolConfigurationRequest) UnsetApiKey() {
	o.ApiKey.Unset()
}

// GetToolType returns the ToolType field value if set, zero value otherwise.
func (o *PatchedToolConfigurationRequest) GetToolType() int32 {
	if o == nil || IsNil(o.ToolType) {
		var ret int32
		return ret
	}
	return *o.ToolType
}

// GetToolTypeOk returns a tuple with the ToolType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedToolConfigurationRequest) GetToolTypeOk() (*int32, bool) {
	if o == nil || IsNil(o.ToolType) {
		return nil, false
	}
	return o.ToolType, true
}

// HasToolType returns a boolean if a field has been set.
func (o *PatchedToolConfigurationRequest) HasToolType() bool {
	if o != nil && !IsNil(o.ToolType) {
		return true
	}

	return false
}

// SetToolType gets a reference to the given int32 and assigns it to the ToolType field.
func (o *PatchedToolConfigurationRequest) SetToolType(v int32) {
	o.ToolType = &v
}

func (o PatchedToolConfigurationRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PatchedToolConfigurationRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.Url.IsSet() {
		toSerialize["url"] = o.Url.Get()
	}
	if o.AuthenticationType.IsSet() {
		toSerialize["authentication_type"] = o.AuthenticationType.Get()
	}
	if o.Extras.IsSet() {
		toSerialize["extras"] = o.Extras.Get()
	}
	if o.Username.IsSet() {
		toSerialize["username"] = o.Username.Get()
	}
	if o.Password.IsSet() {
		toSerialize["password"] = o.Password.Get()
	}
	if o.AuthTitle.IsSet() {
		toSerialize["auth_title"] = o.AuthTitle.Get()
	}
	if o.Ssh.IsSet() {
		toSerialize["ssh"] = o.Ssh.Get()
	}
	if o.ApiKey.IsSet() {
		toSerialize["api_key"] = o.ApiKey.Get()
	}
	if !IsNil(o.ToolType) {
		toSerialize["tool_type"] = o.ToolType
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PatchedToolConfigurationRequest) UnmarshalJSON(data []byte) (err error) {
	varPatchedToolConfigurationRequest := _PatchedToolConfigurationRequest{}

	err = json.Unmarshal(data, &varPatchedToolConfigurationRequest)

	if err != nil {
		return err
	}

	*o = PatchedToolConfigurationRequest(varPatchedToolConfigurationRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "description")
		delete(additionalProperties, "url")
		delete(additionalProperties, "authentication_type")
		delete(additionalProperties, "extras")
		delete(additionalProperties, "username")
		delete(additionalProperties, "password")
		delete(additionalProperties, "auth_title")
		delete(additionalProperties, "ssh")
		delete(additionalProperties, "api_key")
		delete(additionalProperties, "tool_type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePatchedToolConfigurationRequest struct {
	value *PatchedToolConfigurationRequest
	isSet bool
}

func (v NullablePatchedToolConfigurationRequest) Get() *PatchedToolConfigurationRequest {
	return v.value
}

func (v *NullablePatchedToolConfigurationRequest) Set(val *PatchedToolConfigurationRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchedToolConfigurationRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchedToolConfigurationRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchedToolConfigurationRequest(val *PatchedToolConfigurationRequest) *NullablePatchedToolConfigurationRequest {
	return &NullablePatchedToolConfigurationRequest{value: val, isSet: true}
}

func (v NullablePatchedToolConfigurationRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchedToolConfigurationRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


