/*
Defect Dojo API v2

Defect Dojo - Open Source vulnerability Management made easy. Prefetch related parameters/responses not yet in the schema.

API version: 2.38.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package defectdojo

import (
	"encoding/json"
	"fmt"
)

// checks if the FindingGroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FindingGroup{}

// FindingGroup struct for FindingGroup
type FindingGroup struct {
	Id int32 `json:"id"`
	Name string `json:"name"`
	Test int32 `json:"test"`
	JiraIssue NullableJIRAIssue `json:"jira_issue"`
	AdditionalProperties map[string]interface{}
}

type _FindingGroup FindingGroup

// NewFindingGroup instantiates a new FindingGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFindingGroup(id int32, name string, test int32, jiraIssue NullableJIRAIssue) *FindingGroup {
	this := FindingGroup{}
	this.Id = id
	this.Name = name
	this.Test = test
	this.JiraIssue = jiraIssue
	return &this
}

// NewFindingGroupWithDefaults instantiates a new FindingGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFindingGroupWithDefaults() *FindingGroup {
	this := FindingGroup{}
	return &this
}

// GetId returns the Id field value
func (o *FindingGroup) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *FindingGroup) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *FindingGroup) SetId(v int32) {
	o.Id = v
}


// GetName returns the Name field value
func (o *FindingGroup) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *FindingGroup) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *FindingGroup) SetName(v string) {
	o.Name = v
}


// GetTest returns the Test field value
func (o *FindingGroup) GetTest() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Test
}

// GetTestOk returns a tuple with the Test field value
// and a boolean to check if the value has been set.
func (o *FindingGroup) GetTestOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Test, true
}

// SetTest sets field value
func (o *FindingGroup) SetTest(v int32) {
	o.Test = v
}


// GetJiraIssue returns the JiraIssue field value
// If the value is explicit nil, the zero value for JIRAIssue will be returned
func (o *FindingGroup) GetJiraIssue() JIRAIssue {
	if o == nil || o.JiraIssue.Get() == nil {
		var ret JIRAIssue
		return ret
	}

	return *o.JiraIssue.Get()
}

// GetJiraIssueOk returns a tuple with the JiraIssue field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FindingGroup) GetJiraIssueOk() (*JIRAIssue, bool) {
	if o == nil {
		return nil, false
	}
	return o.JiraIssue.Get(), o.JiraIssue.IsSet()
}

// SetJiraIssue sets field value
func (o *FindingGroup) SetJiraIssue(v JIRAIssue) {
	o.JiraIssue.Set(&v)
}


func (o FindingGroup) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FindingGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["test"] = o.Test
	toSerialize["jira_issue"] = o.JiraIssue.Get()

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *FindingGroup) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"test",
		"jira_issue",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{} {
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == ""{
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil{
			return err
		}
	}
	varFindingGroup := _FindingGroup{}

	err = json.Unmarshal(data, &varFindingGroup)

	if err != nil {
		return err
	}

	*o = FindingGroup(varFindingGroup)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "test")
		delete(additionalProperties, "jira_issue")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableFindingGroup struct {
	value *FindingGroup
	isSet bool
}

func (v NullableFindingGroup) Get() *FindingGroup {
	return v.value
}

func (v *NullableFindingGroup) Set(val *FindingGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableFindingGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableFindingGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFindingGroup(val *FindingGroup) *NullableFindingGroup {
	return &NullableFindingGroup{value: val, isSet: true}
}

func (v NullableFindingGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFindingGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


