/*
Defect Dojo API v2

Defect Dojo - Open Source vulnerability Management made easy. Prefetch related parameters/responses not yet in the schema.

API version: 2.38.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package defectdojo

import (
	"encoding/json"
	"fmt"
)

// checks if the AppAnalysisRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AppAnalysisRequest{}

// AppAnalysisRequest struct for AppAnalysisRequest
type AppAnalysisRequest struct {
	Tags []string `json:"tags,omitempty"`
	Name string `json:"name"`
	Confidence NullableInt32 `json:"confidence,omitempty"`
	Version NullableString `json:"version,omitempty"`
	Icon NullableString `json:"icon,omitempty"`
	Website NullableString `json:"website,omitempty"`
	WebsiteFound NullableString `json:"website_found,omitempty"`
	Product int32 `json:"product"`
	User int32 `json:"user"`
	AdditionalProperties map[string]interface{}
}

type _AppAnalysisRequest AppAnalysisRequest

// NewAppAnalysisRequest instantiates a new AppAnalysisRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppAnalysisRequest(name string, product int32, user int32) *AppAnalysisRequest {
	this := AppAnalysisRequest{}
	this.Name = name
	this.Product = product
	this.User = user
	return &this
}

// NewAppAnalysisRequestWithDefaults instantiates a new AppAnalysisRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppAnalysisRequestWithDefaults() *AppAnalysisRequest {
	this := AppAnalysisRequest{}
	return &this
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *AppAnalysisRequest) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppAnalysisRequest) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *AppAnalysisRequest) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *AppAnalysisRequest) SetTags(v []string) {
	o.Tags = v
}

// GetName returns the Name field value
func (o *AppAnalysisRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *AppAnalysisRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *AppAnalysisRequest) SetName(v string) {
	o.Name = v
}


// GetConfidence returns the Confidence field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AppAnalysisRequest) GetConfidence() int32 {
	if o == nil || IsNil(o.Confidence.Get()) {
		var ret int32
		return ret
	}
	return *o.Confidence.Get()
}

// GetConfidenceOk returns a tuple with the Confidence field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AppAnalysisRequest) GetConfidenceOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Confidence.Get(), o.Confidence.IsSet()
}

// HasConfidence returns a boolean if a field has been set.
func (o *AppAnalysisRequest) HasConfidence() bool {
	if o != nil && o.Confidence.IsSet() {
		return true
	}

	return false
}

// SetConfidence gets a reference to the given NullableInt32 and assigns it to the Confidence field.
func (o *AppAnalysisRequest) SetConfidence(v int32) {
	o.Confidence.Set(&v)
}
// SetConfidenceNil sets the value for Confidence to be an explicit nil
func (o *AppAnalysisRequest) SetConfidenceNil() {
	o.Confidence.Set(nil)
}

// UnsetConfidence ensures that no value is present for Confidence, not even an explicit nil
func (o *AppAnalysisRequest) UnsetConfidence() {
	o.Confidence.Unset()
}

// GetVersion returns the Version field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AppAnalysisRequest) GetVersion() string {
	if o == nil || IsNil(o.Version.Get()) {
		var ret string
		return ret
	}
	return *o.Version.Get()
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AppAnalysisRequest) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Version.Get(), o.Version.IsSet()
}

// HasVersion returns a boolean if a field has been set.
func (o *AppAnalysisRequest) HasVersion() bool {
	if o != nil && o.Version.IsSet() {
		return true
	}

	return false
}

// SetVersion gets a reference to the given NullableString and assigns it to the Version field.
func (o *AppAnalysisRequest) SetVersion(v string) {
	o.Version.Set(&v)
}
// SetVersionNil sets the value for Version to be an explicit nil
func (o *AppAnalysisRequest) SetVersionNil() {
	o.Version.Set(nil)
}

// UnsetVersion ensures that no value is present for Version, not even an explicit nil
func (o *AppAnalysisRequest) UnsetVersion() {
	o.Version.Unset()
}

// GetIcon returns the Icon field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AppAnalysisRequest) GetIcon() string {
	if o == nil || IsNil(o.Icon.Get()) {
		var ret string
		return ret
	}
	return *o.Icon.Get()
}

// GetIconOk returns a tuple with the Icon field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AppAnalysisRequest) GetIconOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Icon.Get(), o.Icon.IsSet()
}

// HasIcon returns a boolean if a field has been set.
func (o *AppAnalysisRequest) HasIcon() bool {
	if o != nil && o.Icon.IsSet() {
		return true
	}

	return false
}

// SetIcon gets a reference to the given NullableString and assigns it to the Icon field.
func (o *AppAnalysisRequest) SetIcon(v string) {
	o.Icon.Set(&v)
}
// SetIconNil sets the value for Icon to be an explicit nil
func (o *AppAnalysisRequest) SetIconNil() {
	o.Icon.Set(nil)
}

// UnsetIcon ensures that no value is present for Icon, not even an explicit nil
func (o *AppAnalysisRequest) UnsetIcon() {
	o.Icon.Unset()
}

// GetWebsite returns the Website field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AppAnalysisRequest) GetWebsite() string {
	if o == nil || IsNil(o.Website.Get()) {
		var ret string
		return ret
	}
	return *o.Website.Get()
}

// GetWebsiteOk returns a tuple with the Website field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AppAnalysisRequest) GetWebsiteOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Website.Get(), o.Website.IsSet()
}

// HasWebsite returns a boolean if a field has been set.
func (o *AppAnalysisRequest) HasWebsite() bool {
	if o != nil && o.Website.IsSet() {
		return true
	}

	return false
}

// SetWebsite gets a reference to the given NullableString and assigns it to the Website field.
func (o *AppAnalysisRequest) SetWebsite(v string) {
	o.Website.Set(&v)
}
// SetWebsiteNil sets the value for Website to be an explicit nil
func (o *AppAnalysisRequest) SetWebsiteNil() {
	o.Website.Set(nil)
}

// UnsetWebsite ensures that no value is present for Website, not even an explicit nil
func (o *AppAnalysisRequest) UnsetWebsite() {
	o.Website.Unset()
}

// GetWebsiteFound returns the WebsiteFound field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AppAnalysisRequest) GetWebsiteFound() string {
	if o == nil || IsNil(o.WebsiteFound.Get()) {
		var ret string
		return ret
	}
	return *o.WebsiteFound.Get()
}

// GetWebsiteFoundOk returns a tuple with the WebsiteFound field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AppAnalysisRequest) GetWebsiteFoundOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.WebsiteFound.Get(), o.WebsiteFound.IsSet()
}

// HasWebsiteFound returns a boolean if a field has been set.
func (o *AppAnalysisRequest) HasWebsiteFound() bool {
	if o != nil && o.WebsiteFound.IsSet() {
		return true
	}

	return false
}

// SetWebsiteFound gets a reference to the given NullableString and assigns it to the WebsiteFound field.
func (o *AppAnalysisRequest) SetWebsiteFound(v string) {
	o.WebsiteFound.Set(&v)
}
// SetWebsiteFoundNil sets the value for WebsiteFound to be an explicit nil
func (o *AppAnalysisRequest) SetWebsiteFoundNil() {
	o.WebsiteFound.Set(nil)
}

// UnsetWebsiteFound ensures that no value is present for WebsiteFound, not even an explicit nil
func (o *AppAnalysisRequest) UnsetWebsiteFound() {
	o.WebsiteFound.Unset()
}

// GetProduct returns the Product field value
func (o *AppAnalysisRequest) GetProduct() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Product
}

// GetProductOk returns a tuple with the Product field value
// and a boolean to check if the value has been set.
func (o *AppAnalysisRequest) GetProductOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Product, true
}

// SetProduct sets field value
func (o *AppAnalysisRequest) SetProduct(v int32) {
	o.Product = v
}


// GetUser returns the User field value
func (o *AppAnalysisRequest) GetUser() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.User
}

// GetUserOk returns a tuple with the User field value
// and a boolean to check if the value has been set.
func (o *AppAnalysisRequest) GetUserOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.User, true
}

// SetUser sets field value
func (o *AppAnalysisRequest) SetUser(v int32) {
	o.User = v
}


func (o AppAnalysisRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AppAnalysisRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	toSerialize["name"] = o.Name
	if o.Confidence.IsSet() {
		toSerialize["confidence"] = o.Confidence.Get()
	}
	if o.Version.IsSet() {
		toSerialize["version"] = o.Version.Get()
	}
	if o.Icon.IsSet() {
		toSerialize["icon"] = o.Icon.Get()
	}
	if o.Website.IsSet() {
		toSerialize["website"] = o.Website.Get()
	}
	if o.WebsiteFound.IsSet() {
		toSerialize["website_found"] = o.WebsiteFound.Get()
	}
	toSerialize["product"] = o.Product
	toSerialize["user"] = o.User

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AppAnalysisRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"product",
		"user",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{} {
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == ""{
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil{
			return err
		}
	}
	varAppAnalysisRequest := _AppAnalysisRequest{}

	err = json.Unmarshal(data, &varAppAnalysisRequest)

	if err != nil {
		return err
	}

	*o = AppAnalysisRequest(varAppAnalysisRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "tags")
		delete(additionalProperties, "name")
		delete(additionalProperties, "confidence")
		delete(additionalProperties, "version")
		delete(additionalProperties, "icon")
		delete(additionalProperties, "website")
		delete(additionalProperties, "website_found")
		delete(additionalProperties, "product")
		delete(additionalProperties, "user")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAppAnalysisRequest struct {
	value *AppAnalysisRequest
	isSet bool
}

func (v NullableAppAnalysisRequest) Get() *AppAnalysisRequest {
	return v.value
}

func (v *NullableAppAnalysisRequest) Set(val *AppAnalysisRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAppAnalysisRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAppAnalysisRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppAnalysisRequest(val *AppAnalysisRequest) *NullableAppAnalysisRequest {
	return &NullableAppAnalysisRequest{value: val, isSet: true}
}

func (v NullableAppAnalysisRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppAnalysisRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


