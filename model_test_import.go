/*
Defect Dojo API v2

Defect Dojo - Open Source vulnerability Management made easy. Prefetch related parameters/responses not yet in the schema.

API version: 2.38.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package defectdojo

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the TestImport type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TestImport{}

// TestImport struct for TestImport
type TestImport struct {
	Id int32 `json:"id"`
	TestImportFindingActionSet []TestImportFindingAction `json:"test_import_finding_action_set"`
	Created time.Time `json:"created"`
	Modified time.Time `json:"modified"`
	ImportSettings interface{} `json:"import_settings,omitempty"`
	Type *string `json:"type,omitempty"`
	Version NullableString `json:"version,omitempty"`
	// Build ID that was tested, a reimport may update this field.
	BuildId NullableString `json:"build_id,omitempty"`
	// Commit hash tested, a reimport may update this field.
	CommitHash NullableString `json:"commit_hash,omitempty"`
	// Tag or branch that was tested, a reimport may update this field.
	BranchTag NullableString `json:"branch_tag,omitempty"`
	Test int32 `json:"test"`
	FindingsAffected []int32 `json:"findings_affected"`
	AdditionalProperties map[string]interface{}
}

type _TestImport TestImport

// NewTestImport instantiates a new TestImport object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTestImport(id int32, testImportFindingActionSet []TestImportFindingAction, created time.Time, modified time.Time, test int32, findingsAffected []int32) *TestImport {
	this := TestImport{}
	this.Id = id
	this.TestImportFindingActionSet = testImportFindingActionSet
	this.Created = created
	this.Modified = modified
	this.Test = test
	this.FindingsAffected = findingsAffected
	return &this
}

// NewTestImportWithDefaults instantiates a new TestImport object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTestImportWithDefaults() *TestImport {
	this := TestImport{}
	return &this
}

// GetId returns the Id field value
func (o *TestImport) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *TestImport) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *TestImport) SetId(v int32) {
	o.Id = v
}


// GetTestImportFindingActionSet returns the TestImportFindingActionSet field value
func (o *TestImport) GetTestImportFindingActionSet() []TestImportFindingAction {
	if o == nil {
		var ret []TestImportFindingAction
		return ret
	}

	return o.TestImportFindingActionSet
}

// GetTestImportFindingActionSetOk returns a tuple with the TestImportFindingActionSet field value
// and a boolean to check if the value has been set.
func (o *TestImport) GetTestImportFindingActionSetOk() ([]TestImportFindingAction, bool) {
	if o == nil {
		return nil, false
	}
	return o.TestImportFindingActionSet, true
}

// SetTestImportFindingActionSet sets field value
func (o *TestImport) SetTestImportFindingActionSet(v []TestImportFindingAction) {
	o.TestImportFindingActionSet = v
}


// GetCreated returns the Created field value
func (o *TestImport) GetCreated() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Created
}

// GetCreatedOk returns a tuple with the Created field value
// and a boolean to check if the value has been set.
func (o *TestImport) GetCreatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Created, true
}

// SetCreated sets field value
func (o *TestImport) SetCreated(v time.Time) {
	o.Created = v
}


// GetModified returns the Modified field value
func (o *TestImport) GetModified() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Modified
}

// GetModifiedOk returns a tuple with the Modified field value
// and a boolean to check if the value has been set.
func (o *TestImport) GetModifiedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Modified, true
}

// SetModified sets field value
func (o *TestImport) SetModified(v time.Time) {
	o.Modified = v
}


// GetImportSettings returns the ImportSettings field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestImport) GetImportSettings() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.ImportSettings
}

// GetImportSettingsOk returns a tuple with the ImportSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestImport) GetImportSettingsOk() (*interface{}, bool) {
	if o == nil || IsNil(o.ImportSettings) {
		return nil, false
	}
	return &o.ImportSettings, true
}

// HasImportSettings returns a boolean if a field has been set.
func (o *TestImport) HasImportSettings() bool {
	if o != nil && !IsNil(o.ImportSettings) {
		return true
	}

	return false
}

// SetImportSettings gets a reference to the given interface{} and assigns it to the ImportSettings field.
func (o *TestImport) SetImportSettings(v interface{}) {
	o.ImportSettings = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *TestImport) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TestImport) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *TestImport) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *TestImport) SetType(v string) {
	o.Type = &v
}

// GetVersion returns the Version field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestImport) GetVersion() string {
	if o == nil || IsNil(o.Version.Get()) {
		var ret string
		return ret
	}
	return *o.Version.Get()
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestImport) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Version.Get(), o.Version.IsSet()
}

// HasVersion returns a boolean if a field has been set.
func (o *TestImport) HasVersion() bool {
	if o != nil && o.Version.IsSet() {
		return true
	}

	return false
}

// SetVersion gets a reference to the given NullableString and assigns it to the Version field.
func (o *TestImport) SetVersion(v string) {
	o.Version.Set(&v)
}
// SetVersionNil sets the value for Version to be an explicit nil
func (o *TestImport) SetVersionNil() {
	o.Version.Set(nil)
}

// UnsetVersion ensures that no value is present for Version, not even an explicit nil
func (o *TestImport) UnsetVersion() {
	o.Version.Unset()
}

// GetBuildId returns the BuildId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestImport) GetBuildId() string {
	if o == nil || IsNil(o.BuildId.Get()) {
		var ret string
		return ret
	}
	return *o.BuildId.Get()
}

// GetBuildIdOk returns a tuple with the BuildId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestImport) GetBuildIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BuildId.Get(), o.BuildId.IsSet()
}

// HasBuildId returns a boolean if a field has been set.
func (o *TestImport) HasBuildId() bool {
	if o != nil && o.BuildId.IsSet() {
		return true
	}

	return false
}

// SetBuildId gets a reference to the given NullableString and assigns it to the BuildId field.
func (o *TestImport) SetBuildId(v string) {
	o.BuildId.Set(&v)
}
// SetBuildIdNil sets the value for BuildId to be an explicit nil
func (o *TestImport) SetBuildIdNil() {
	o.BuildId.Set(nil)
}

// UnsetBuildId ensures that no value is present for BuildId, not even an explicit nil
func (o *TestImport) UnsetBuildId() {
	o.BuildId.Unset()
}

// GetCommitHash returns the CommitHash field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestImport) GetCommitHash() string {
	if o == nil || IsNil(o.CommitHash.Get()) {
		var ret string
		return ret
	}
	return *o.CommitHash.Get()
}

// GetCommitHashOk returns a tuple with the CommitHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestImport) GetCommitHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CommitHash.Get(), o.CommitHash.IsSet()
}

// HasCommitHash returns a boolean if a field has been set.
func (o *TestImport) HasCommitHash() bool {
	if o != nil && o.CommitHash.IsSet() {
		return true
	}

	return false
}

// SetCommitHash gets a reference to the given NullableString and assigns it to the CommitHash field.
func (o *TestImport) SetCommitHash(v string) {
	o.CommitHash.Set(&v)
}
// SetCommitHashNil sets the value for CommitHash to be an explicit nil
func (o *TestImport) SetCommitHashNil() {
	o.CommitHash.Set(nil)
}

// UnsetCommitHash ensures that no value is present for CommitHash, not even an explicit nil
func (o *TestImport) UnsetCommitHash() {
	o.CommitHash.Unset()
}

// GetBranchTag returns the BranchTag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestImport) GetBranchTag() string {
	if o == nil || IsNil(o.BranchTag.Get()) {
		var ret string
		return ret
	}
	return *o.BranchTag.Get()
}

// GetBranchTagOk returns a tuple with the BranchTag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestImport) GetBranchTagOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BranchTag.Get(), o.BranchTag.IsSet()
}

// HasBranchTag returns a boolean if a field has been set.
func (o *TestImport) HasBranchTag() bool {
	if o != nil && o.BranchTag.IsSet() {
		return true
	}

	return false
}

// SetBranchTag gets a reference to the given NullableString and assigns it to the BranchTag field.
func (o *TestImport) SetBranchTag(v string) {
	o.BranchTag.Set(&v)
}
// SetBranchTagNil sets the value for BranchTag to be an explicit nil
func (o *TestImport) SetBranchTagNil() {
	o.BranchTag.Set(nil)
}

// UnsetBranchTag ensures that no value is present for BranchTag, not even an explicit nil
func (o *TestImport) UnsetBranchTag() {
	o.BranchTag.Unset()
}

// GetTest returns the Test field value
func (o *TestImport) GetTest() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Test
}

// GetTestOk returns a tuple with the Test field value
// and a boolean to check if the value has been set.
func (o *TestImport) GetTestOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Test, true
}

// SetTest sets field value
func (o *TestImport) SetTest(v int32) {
	o.Test = v
}


// GetFindingsAffected returns the FindingsAffected field value
func (o *TestImport) GetFindingsAffected() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}

	return o.FindingsAffected
}

// GetFindingsAffectedOk returns a tuple with the FindingsAffected field value
// and a boolean to check if the value has been set.
func (o *TestImport) GetFindingsAffectedOk() ([]int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.FindingsAffected, true
}

// SetFindingsAffected sets field value
func (o *TestImport) SetFindingsAffected(v []int32) {
	o.FindingsAffected = v
}


func (o TestImport) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TestImport) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["test_import_finding_action_set"] = o.TestImportFindingActionSet
	toSerialize["created"] = o.Created
	toSerialize["modified"] = o.Modified
	if o.ImportSettings != nil {
		toSerialize["import_settings"] = o.ImportSettings
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if o.Version.IsSet() {
		toSerialize["version"] = o.Version.Get()
	}
	if o.BuildId.IsSet() {
		toSerialize["build_id"] = o.BuildId.Get()
	}
	if o.CommitHash.IsSet() {
		toSerialize["commit_hash"] = o.CommitHash.Get()
	}
	if o.BranchTag.IsSet() {
		toSerialize["branch_tag"] = o.BranchTag.Get()
	}
	toSerialize["test"] = o.Test
	toSerialize["findings_affected"] = o.FindingsAffected

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TestImport) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"test_import_finding_action_set",
		"created",
		"modified",
		"test",
		"findings_affected",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{} {
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == ""{
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil{
			return err
		}
	}
	varTestImport := _TestImport{}

	err = json.Unmarshal(data, &varTestImport)

	if err != nil {
		return err
	}

	*o = TestImport(varTestImport)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "test_import_finding_action_set")
		delete(additionalProperties, "created")
		delete(additionalProperties, "modified")
		delete(additionalProperties, "import_settings")
		delete(additionalProperties, "type")
		delete(additionalProperties, "version")
		delete(additionalProperties, "build_id")
		delete(additionalProperties, "commit_hash")
		delete(additionalProperties, "branch_tag")
		delete(additionalProperties, "test")
		delete(additionalProperties, "findings_affected")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTestImport struct {
	value *TestImport
	isSet bool
}

func (v NullableTestImport) Get() *TestImport {
	return v.value
}

func (v *NullableTestImport) Set(val *TestImport) {
	v.value = val
	v.isSet = true
}

func (v NullableTestImport) IsSet() bool {
	return v.isSet
}

func (v *NullableTestImport) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestImport(val *TestImport) *NullableTestImport {
	return &NullableTestImport{value: val, isSet: true}
}

func (v NullableTestImport) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestImport) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


