/*
Defect Dojo API v2

Defect Dojo - Open Source vulnerability Management made easy. Prefetch related parameters/responses not yet in the schema.

API version: 2.33.5
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package defectdojo

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RegulationRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RegulationRequest{}

// RegulationRequest struct for RegulationRequest
type RegulationRequest struct {
	// The name of the regulation.
	Name string `json:"name"`
	// A shortened representation of the name.
	Acronym string `json:"acronym"`
	// The subject of the regulation.  * `privacy` - Privacy * `finance` - Finance * `education` - Education * `medical` - Medical * `corporate` - Corporate * `other` - Other
	Category string `json:"category"`
	// The territory over which the regulation applies.
	Jurisdiction string `json:"jurisdiction"`
	// Information about the regulation's purpose.
	Description *string `json:"description,omitempty"`
	// An external URL for more information.
	Reference *string `json:"reference,omitempty"`
}

type _RegulationRequest RegulationRequest

// NewRegulationRequest instantiates a new RegulationRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegulationRequest(name string, acronym string, category string, jurisdiction string) *RegulationRequest {
	this := RegulationRequest{}
	this.Name = name
	this.Acronym = acronym
	this.Category = category
	this.Jurisdiction = jurisdiction
	return &this
}

// NewRegulationRequestWithDefaults instantiates a new RegulationRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegulationRequestWithDefaults() *RegulationRequest {
	this := RegulationRequest{}
	return &this
}

// GetName returns the Name field value
func (o *RegulationRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *RegulationRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *RegulationRequest) SetName(v string) {
	o.Name = v
}

// GetAcronym returns the Acronym field value
func (o *RegulationRequest) GetAcronym() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Acronym
}

// GetAcronymOk returns a tuple with the Acronym field value
// and a boolean to check if the value has been set.
func (o *RegulationRequest) GetAcronymOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Acronym, true
}

// SetAcronym sets field value
func (o *RegulationRequest) SetAcronym(v string) {
	o.Acronym = v
}

// GetCategory returns the Category field value
func (o *RegulationRequest) GetCategory() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Category
}

// GetCategoryOk returns a tuple with the Category field value
// and a boolean to check if the value has been set.
func (o *RegulationRequest) GetCategoryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Category, true
}

// SetCategory sets field value
func (o *RegulationRequest) SetCategory(v string) {
	o.Category = v
}

// GetJurisdiction returns the Jurisdiction field value
func (o *RegulationRequest) GetJurisdiction() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Jurisdiction
}

// GetJurisdictionOk returns a tuple with the Jurisdiction field value
// and a boolean to check if the value has been set.
func (o *RegulationRequest) GetJurisdictionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Jurisdiction, true
}

// SetJurisdiction sets field value
func (o *RegulationRequest) SetJurisdiction(v string) {
	o.Jurisdiction = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *RegulationRequest) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegulationRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *RegulationRequest) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *RegulationRequest) SetDescription(v string) {
	o.Description = &v
}

// GetReference returns the Reference field value if set, zero value otherwise.
func (o *RegulationRequest) GetReference() string {
	if o == nil || IsNil(o.Reference) {
		var ret string
		return ret
	}
	return *o.Reference
}

// GetReferenceOk returns a tuple with the Reference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegulationRequest) GetReferenceOk() (*string, bool) {
	if o == nil || IsNil(o.Reference) {
		return nil, false
	}
	return o.Reference, true
}

// HasReference returns a boolean if a field has been set.
func (o *RegulationRequest) HasReference() bool {
	if o != nil && !IsNil(o.Reference) {
		return true
	}

	return false
}

// SetReference gets a reference to the given string and assigns it to the Reference field.
func (o *RegulationRequest) SetReference(v string) {
	o.Reference = &v
}

func (o RegulationRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RegulationRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["acronym"] = o.Acronym
	toSerialize["category"] = o.Category
	toSerialize["jurisdiction"] = o.Jurisdiction
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Reference) {
		toSerialize["reference"] = o.Reference
	}
	return toSerialize, nil
}

func (o *RegulationRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"acronym",
		"category",
		"jurisdiction",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRegulationRequest := _RegulationRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRegulationRequest)

	if err != nil {
		return err
	}

	*o = RegulationRequest(varRegulationRequest)

	return err
}

type NullableRegulationRequest struct {
	value *RegulationRequest
	isSet bool
}

func (v NullableRegulationRequest) Get() *RegulationRequest {
	return v.value
}

func (v *NullableRegulationRequest) Set(val *RegulationRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableRegulationRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableRegulationRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegulationRequest(val *RegulationRequest) *NullableRegulationRequest {
	return &NullableRegulationRequest{value: val, isSet: true}
}

func (v NullableRegulationRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegulationRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


