/*
Defect Dojo API v2

Defect Dojo - Open Source vulnerability Management made easy. Prefetch related parameters/responses not yet in the schema.

API version: 2.38.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package defectdojo

import (
	"encoding/json"
	"fmt"
)

// checks if the ProductTypeRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProductTypeRequest{}

// ProductTypeRequest struct for ProductTypeRequest
type ProductTypeRequest struct {
	Name string `json:"name"`
	Description NullableString `json:"description,omitempty"`
	CriticalProduct *bool `json:"critical_product,omitempty"`
	KeyProduct *bool `json:"key_product,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ProductTypeRequest ProductTypeRequest

// NewProductTypeRequest instantiates a new ProductTypeRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProductTypeRequest(name string) *ProductTypeRequest {
	this := ProductTypeRequest{}
	this.Name = name
	return &this
}

// NewProductTypeRequestWithDefaults instantiates a new ProductTypeRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProductTypeRequestWithDefaults() *ProductTypeRequest {
	this := ProductTypeRequest{}
	return &this
}

// GetName returns the Name field value
func (o *ProductTypeRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ProductTypeRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ProductTypeRequest) SetName(v string) {
	o.Name = v
}


// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProductTypeRequest) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProductTypeRequest) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *ProductTypeRequest) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *ProductTypeRequest) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *ProductTypeRequest) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *ProductTypeRequest) UnsetDescription() {
	o.Description.Unset()
}

// GetCriticalProduct returns the CriticalProduct field value if set, zero value otherwise.
func (o *ProductTypeRequest) GetCriticalProduct() bool {
	if o == nil || IsNil(o.CriticalProduct) {
		var ret bool
		return ret
	}
	return *o.CriticalProduct
}

// GetCriticalProductOk returns a tuple with the CriticalProduct field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductTypeRequest) GetCriticalProductOk() (*bool, bool) {
	if o == nil || IsNil(o.CriticalProduct) {
		return nil, false
	}
	return o.CriticalProduct, true
}

// HasCriticalProduct returns a boolean if a field has been set.
func (o *ProductTypeRequest) HasCriticalProduct() bool {
	if o != nil && !IsNil(o.CriticalProduct) {
		return true
	}

	return false
}

// SetCriticalProduct gets a reference to the given bool and assigns it to the CriticalProduct field.
func (o *ProductTypeRequest) SetCriticalProduct(v bool) {
	o.CriticalProduct = &v
}

// GetKeyProduct returns the KeyProduct field value if set, zero value otherwise.
func (o *ProductTypeRequest) GetKeyProduct() bool {
	if o == nil || IsNil(o.KeyProduct) {
		var ret bool
		return ret
	}
	return *o.KeyProduct
}

// GetKeyProductOk returns a tuple with the KeyProduct field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductTypeRequest) GetKeyProductOk() (*bool, bool) {
	if o == nil || IsNil(o.KeyProduct) {
		return nil, false
	}
	return o.KeyProduct, true
}

// HasKeyProduct returns a boolean if a field has been set.
func (o *ProductTypeRequest) HasKeyProduct() bool {
	if o != nil && !IsNil(o.KeyProduct) {
		return true
	}

	return false
}

// SetKeyProduct gets a reference to the given bool and assigns it to the KeyProduct field.
func (o *ProductTypeRequest) SetKeyProduct(v bool) {
	o.KeyProduct = &v
}

func (o ProductTypeRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProductTypeRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if !IsNil(o.CriticalProduct) {
		toSerialize["critical_product"] = o.CriticalProduct
	}
	if !IsNil(o.KeyProduct) {
		toSerialize["key_product"] = o.KeyProduct
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ProductTypeRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{} {
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == ""{
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil{
			return err
		}
	}
	varProductTypeRequest := _ProductTypeRequest{}

	err = json.Unmarshal(data, &varProductTypeRequest)

	if err != nil {
		return err
	}

	*o = ProductTypeRequest(varProductTypeRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "description")
		delete(additionalProperties, "critical_product")
		delete(additionalProperties, "key_product")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableProductTypeRequest struct {
	value *ProductTypeRequest
	isSet bool
}

func (v NullableProductTypeRequest) Get() *ProductTypeRequest {
	return v.value
}

func (v *NullableProductTypeRequest) Set(val *ProductTypeRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableProductTypeRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableProductTypeRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProductTypeRequest(val *ProductTypeRequest) *NullableProductTypeRequest {
	return &NullableProductTypeRequest{value: val, isSet: true}
}

func (v NullableProductTypeRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProductTypeRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


