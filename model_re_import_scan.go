/*
Defect Dojo API v2

Defect Dojo - Open Source vulnerability Management made easy. Prefetch related parameters/responses not yet in the schema.

API version: 2.38.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package defectdojo

import (
	"encoding/json"
	"fmt"
)

// checks if the ReImportScan type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReImportScan{}

// ReImportScan struct for ReImportScan
type ReImportScan struct {
	// Scan completion date will be used on all findings.
	ScanDate *string `json:"scan_date,omitempty"`
	// Minimum severity level to be imported  * `Info` - Info * `Low` - Low * `Medium` - Medium * `High` - High * `Critical` - Critical
	MinimumSeverity *string `json:"minimum_severity,omitempty"`
	// Override the active setting from the tool.
	Active bool `json:"active"`
	// Override the verified setting from the tool.
	Verified bool `json:"verified"`
	// Select if the import should ignore active findings from the report, useful for triage-less scanners. Will keep existing findings closed, without reactivating them. For more information check the docs.
	DoNotReactivate *bool `json:"do_not_reactivate,omitempty"`
	// * `Acunetix Scan` - Acunetix Scan * `Anchore Engine Scan` - Anchore Engine Scan * `Anchore Enterprise Policy Check` - Anchore Enterprise Policy Check * `Anchore Grype` - Anchore Grype * `AnchoreCTL Policies Report` - AnchoreCTL Policies Report * `AnchoreCTL Vuln Report` - AnchoreCTL Vuln Report * `AppCheck Web Application Scanner` - AppCheck Web Application Scanner * `AppSpider Scan` - AppSpider Scan * `Aqua Scan` - Aqua Scan * `Arachni Scan` - Arachni Scan * `AuditJS Scan` - AuditJS Scan * `AWS Prowler Scan` - AWS Prowler Scan * `AWS Prowler V3` - AWS Prowler V3 * `AWS Security Finding Format (ASFF) Scan` - AWS Security Finding Format (ASFF) Scan * `AWS Security Hub Scan` - AWS Security Hub Scan * `Azure Security Center Recommendations Scan` - Azure Security Center Recommendations Scan * `Bandit Scan` - Bandit Scan * `Bearer CLI` - Bearer CLI * `BlackDuck API` - BlackDuck API * `Blackduck Binary Analysis` - Blackduck Binary Analysis * `Blackduck Component Risk` - Blackduck Component Risk * `Blackduck Hub Scan` - Blackduck Hub Scan * `Brakeman Scan` - Brakeman Scan * `Bugcrowd API Import` - Bugcrowd API Import * `BugCrowd Scan` - BugCrowd Scan * `Bundler-Audit Scan` - Bundler-Audit Scan * `Burp Dastardly Scan` - Burp Dastardly Scan * `Burp Enterprise Scan` - Burp Enterprise Scan * `Burp GraphQL API` - Burp GraphQL API * `Burp REST API` - Burp REST API * `Burp Scan` - Burp Scan * `CargoAudit Scan` - CargoAudit Scan * `Checkmarx One Scan` - Checkmarx One Scan * `Checkmarx OSA` - Checkmarx OSA * `Checkmarx Scan` - Checkmarx Scan * `Checkmarx Scan detailed` - Checkmarx Scan detailed * `Checkov Scan` - Checkov Scan * `Chef Inspect Log` - Chef Inspect Log * `Clair Scan` - Clair Scan * `Cloudsploit Scan` - Cloudsploit Scan * `Cobalt.io API Import` - Cobalt.io API Import * `Cobalt.io Scan` - Cobalt.io Scan * `Codechecker Report native` - Codechecker Report native * `Contrast Scan` - Contrast Scan * `Coverity API` - Coverity API * `Coverity Scan JSON Report` - Coverity Scan JSON Report * `Crashtest Security JSON File` - Crashtest Security JSON File * `Crashtest Security XML File` - Crashtest Security XML File * `CredScan Scan` - CredScan Scan * `Crunch42 Scan` - Crunch42 Scan * `CycloneDX Scan` - CycloneDX Scan * `DawnScanner Scan` - DawnScanner Scan * `Deepfence Threatmapper Report` - Deepfence Threatmapper Report * `Dependency Check Scan` - Dependency Check Scan * `Dependency Track Finding Packaging Format (FPF) Export` - Dependency Track Finding Packaging Format (FPF) Export * `Detect-secrets Scan` - Detect-secrets Scan * `docker-bench-security Scan` - docker-bench-security Scan * `Dockle Scan` - Dockle Scan * `DrHeader JSON Importer` - DrHeader JSON Importer * `DSOP Scan` - DSOP Scan * `Edgescan Scan` - Edgescan Scan * `ESLint Scan` - ESLint Scan * `Fortify Scan` - Fortify Scan * `Generic Findings Import` - Generic Findings Import * `Ggshield Scan` - Ggshield Scan * `Github Vulnerability Scan` - Github Vulnerability Scan * `GitLab API Fuzzing Report Scan` - GitLab API Fuzzing Report Scan * `GitLab Container Scan` - GitLab Container Scan * `GitLab DAST Report` - GitLab DAST Report * `GitLab Dependency Scanning Report` - GitLab Dependency Scanning Report * `GitLab SAST Report` - GitLab SAST Report * `GitLab Secret Detection Report` - GitLab Secret Detection Report * `Gitleaks Scan` - Gitleaks Scan * `Google Cloud Artifact Vulnerability Scan` - Google Cloud Artifact Vulnerability Scan * `Gosec Scanner` - Gosec Scanner * `Govulncheck Scanner` - Govulncheck Scanner * `HackerOne Cases` - HackerOne Cases * `Hadolint Dockerfile check` - Hadolint Dockerfile check * `Harbor Vulnerability Scan` - Harbor Vulnerability Scan * `HCLAppScan XML` - HCLAppScan XML * `Horusec Scan` - Horusec Scan * `Humble Json Importer` - Humble Json Importer * `HuskyCI Report` - HuskyCI Report * `Hydra Scan` - Hydra Scan * `IBM AppScan DAST` - IBM AppScan DAST * `Immuniweb Scan` - Immuniweb Scan * `IntSights Report` - IntSights Report * `Invicti Scan` - Invicti Scan * `JFrog Xray API Summary Artifact Scan` - JFrog Xray API Summary Artifact Scan * `JFrog Xray On Demand Binary Scan` - JFrog Xray On Demand Binary Scan * `JFrog Xray Scan` - JFrog Xray Scan * `JFrog Xray Unified Scan` - JFrog Xray Unified Scan * `KICS Scan` - KICS Scan * `Kiuwan SCA Scan` - Kiuwan SCA Scan * `Kiuwan Scan` - Kiuwan Scan * `KrakenD Audit Scan` - KrakenD Audit Scan * `kube-bench Scan` - kube-bench Scan * `Kubeaudit Scan` - Kubeaudit Scan * `KubeHunter Scan` - KubeHunter Scan * `Kubescape JSON Importer` - Kubescape JSON Importer * `Legitify Scan` - Legitify Scan * `Mend Scan` - Mend Scan * `Meterian Scan` - Meterian Scan * `Microfocus Webinspect Scan` - Microfocus Webinspect Scan * `MobSF Scan` - MobSF Scan * `Mobsfscan Scan` - Mobsfscan Scan * `Mozilla Observatory Scan` - Mozilla Observatory Scan * `MSDefender Parser` - MSDefender Parser * `Nancy Scan` - Nancy Scan * `Netsparker Scan` - Netsparker Scan * `NeuVector (compliance)` - NeuVector (compliance) * `NeuVector (REST)` - NeuVector (REST) * `Nexpose Scan` - Nexpose Scan * `Nikto Scan` - Nikto Scan * `Nmap Scan` - Nmap Scan * `Node Security Platform Scan` - Node Security Platform Scan * `Nosey Parker Scan` - Nosey Parker Scan * `NPM Audit Scan` - NPM Audit Scan * `NPM Audit v7+ Scan` - NPM Audit v7+ Scan * `Nuclei Scan` - Nuclei Scan * `Openscap Vulnerability Scan` - Openscap Vulnerability Scan * `OpenVAS Parser` - OpenVAS Parser * `ORT evaluated model Importer` - ORT evaluated model Importer * `OssIndex Devaudit SCA Scan Importer` - OssIndex Devaudit SCA Scan Importer * `OSV Scan` - OSV Scan * `Outpost24 Scan` - Outpost24 Scan * `PHP Security Audit v2` - PHP Security Audit v2 * `PHP Symfony Security Check` - PHP Symfony Security Check * `pip-audit Scan` - pip-audit Scan * `PMD Scan` - PMD Scan * `Popeye Scan` - Popeye Scan * `Progpilot Scan` - Progpilot Scan * `PWN SAST` - PWN SAST * `Qualys Hacker Guardian Scan` - Qualys Hacker Guardian Scan * `Qualys Infrastructure Scan (WebGUI XML)` - Qualys Infrastructure Scan (WebGUI XML) * `Qualys Scan` - Qualys Scan * `Qualys Webapp Scan` - Qualys Webapp Scan * `Rapplex Scan` - Rapplex Scan * `Red Hat Satellite` - Red Hat Satellite * `Retire.js Scan` - Retire.js Scan * `Risk Recon API Importer` - Risk Recon API Importer * `Rubocop Scan` - Rubocop Scan * `Rusty Hog Scan` - Rusty Hog Scan * `SARIF` - SARIF * `Scantist Scan` - Scantist Scan * `Scout Suite Scan` - Scout Suite Scan * `Semgrep JSON Report` - Semgrep JSON Report * `SKF Scan` - SKF Scan * `Snyk Code Scan` - Snyk Code Scan * `Snyk Scan` - Snyk Scan * `Solar Appscreener Scan` - Solar Appscreener Scan * `SonarQube API Import` - SonarQube API Import * `SonarQube Scan` - SonarQube Scan * `SonarQube Scan detailed` - SonarQube Scan detailed * `Sonatype Application Scan` - Sonatype Application Scan * `SpotBugs Scan` - SpotBugs Scan * `SSH Audit Importer` - SSH Audit Importer * `SSL Labs Scan` - SSL Labs Scan * `Sslscan` - Sslscan * `Sslyze Scan` - Sslyze Scan * `SSLyze Scan (JSON)` - SSLyze Scan (JSON) * `StackHawk HawkScan` - StackHawk HawkScan * `Sysdig Vulnerability Report` - Sysdig Vulnerability Report * `Talisman Scan` - Talisman Scan * `Tenable Scan` - Tenable Scan * `Terrascan Scan` - Terrascan Scan * `Testssl Scan` - Testssl Scan * `TFSec Scan` - TFSec Scan * `Threagile risks report` - Threagile risks report * `ThreatComposer Scan` - ThreatComposer Scan * `Trivy Operator Scan` - Trivy Operator Scan * `Trivy Scan` - Trivy Scan * `Trufflehog Scan` - Trufflehog Scan * `Trufflehog3 Scan` - Trufflehog3 Scan * `Trustwave Fusion API Scan` - Trustwave Fusion API Scan * `Trustwave Scan (CSV)` - Trustwave Scan (CSV) * `Twistlock Image Scan` - Twistlock Image Scan * `VCG Scan` - VCG Scan * `Veracode Scan` - Veracode Scan * `Veracode SourceClear Scan` - Veracode SourceClear Scan * `Vulners` - Vulners * `Wapiti Scan` - Wapiti Scan * `Wazuh` - Wazuh * `WFuzz JSON report` - WFuzz JSON report * `Whispers Scan` - Whispers Scan * `WhiteHat Sentinel` - WhiteHat Sentinel * `Wiz Scan` - Wiz Scan * `Wizcli Dir Scan` - Wizcli Dir Scan * `Wizcli IaC Scan` - Wizcli IaC Scan * `Wizcli Img Scan` - Wizcli Img Scan * `Wpscan` - Wpscan * `Xanitizer Scan` - Xanitizer Scan * `Yarn Audit Scan` - Yarn Audit Scan * `ZAP Scan` - ZAP Scan
	ScanType string `json:"scan_type"`
	// Enter the ID of an Endpoint that is associated with the target Product. New Findings will be added to that Endpoint.
	EndpointToAdd *int32 `json:"endpoint_to_add,omitempty"`
	File *string `json:"file,omitempty"`
	ProductTypeName *string `json:"product_type_name,omitempty"`
	ProductName *string `json:"product_name,omitempty"`
	EngagementName *string `json:"engagement_name,omitempty"`
	// End Date for Engagement. Default is current time + 365 days. Required format year-month-day
	EngagementEndDate *string `json:"engagement_end_date,omitempty"`
	// Resource link to source code
	SourceCodeManagementUri *string `json:"source_code_management_uri,omitempty"`
	Test *int32 `json:"test,omitempty"`
	TestTitle *string `json:"test_title,omitempty"`
	AutoCreateContext *bool `json:"auto_create_context,omitempty"`
	DeduplicationOnEngagement *bool `json:"deduplication_on_engagement,omitempty"`
	PushToJira *bool `json:"push_to_jira,omitempty"`
	// Select if old findings no longer present in the report get closed as mitigated when importing.
	CloseOldFindings *bool `json:"close_old_findings,omitempty"`
	// Select if close_old_findings applies to all findings of the same type in the product. By default, it is false meaning that only old findings of the same type in the engagement are in scope. Note that this only applies on the first call to reimport-scan.
	CloseOldFindingsProductScope *bool `json:"close_old_findings_product_scope,omitempty"`
	// Version that will be set on existing Test object. Leave empty to leave existing value in place.
	Version *string `json:"version,omitempty"`
	// ID of the build that was scanned.
	BuildId *string `json:"build_id,omitempty"`
	// Branch or Tag that was scanned.
	BranchTag *string `json:"branch_tag,omitempty"`
	// Commit that was scanned.
	CommitHash *string `json:"commit_hash,omitempty"`
	ApiScanConfiguration NullableInt32 `json:"api_scan_configuration,omitempty"`
	// A service is a self-contained piece of functionality within a Product. This is an optional field which is used in deduplication and closing of old findings when set. This affects the whole engagement/product depending on your deduplication scope.
	Service *string `json:"service,omitempty"`
	Environment *string `json:"environment,omitempty"`
	Lead NullableInt32 `json:"lead,omitempty"`
	// Modify existing tags that help describe this scan. (Existing test tags will be overwritten)
	Tags []string `json:"tags,omitempty"`
	// Choose an option to automatically group new findings by the chosen option.  * `component_name` - Component Name * `component_name+component_version` - Component Name + Version * `file_path` - File path * `finding_title` - Finding Title
	GroupBy *string `json:"group_by,omitempty"`
	// If set to false, finding groups will only be created when there is more than one grouped finding
	CreateFindingGroupsForAllFindings *bool `json:"create_finding_groups_for_all_findings,omitempty"`
	TestId int32 `json:"test_id"`
	EngagementId int32 `json:"engagement_id"`
	ProductId int32 `json:"product_id"`
	ProductTypeId int32 `json:"product_type_id"`
	Statistics ImportStatistics `json:"statistics"`
	// If set to True, the tags will be applied to the findings
	ApplyTagsToFindings *bool `json:"apply_tags_to_findings,omitempty"`
	// If set to True, the tags will be applied to the endpoints
	ApplyTagsToEndpoints *bool `json:"apply_tags_to_endpoints,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ReImportScan ReImportScan

// NewReImportScan instantiates a new ReImportScan object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReImportScan(active bool, verified bool, scanType string, testId int32, engagementId int32, productId int32, productTypeId int32, statistics ImportStatistics) *ReImportScan {
	this := ReImportScan{}
	var minimumSeverity string = "Info"
	this.MinimumSeverity = &minimumSeverity
	this.Active = active
	this.Verified = verified
	var doNotReactivate bool = false
	this.DoNotReactivate = &doNotReactivate
	this.ScanType = scanType
	var pushToJira bool = false
	this.PushToJira = &pushToJira
	var closeOldFindings bool = true
	this.CloseOldFindings = &closeOldFindings
	var closeOldFindingsProductScope bool = false
	this.CloseOldFindingsProductScope = &closeOldFindingsProductScope
	var createFindingGroupsForAllFindings bool = true
	this.CreateFindingGroupsForAllFindings = &createFindingGroupsForAllFindings
	this.TestId = testId
	this.EngagementId = engagementId
	this.ProductId = productId
	this.ProductTypeId = productTypeId
	this.Statistics = statistics
	return &this
}

// NewReImportScanWithDefaults instantiates a new ReImportScan object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReImportScanWithDefaults() *ReImportScan {
	this := ReImportScan{}
	var minimumSeverity string = "Info"
	this.MinimumSeverity = &minimumSeverity
	var doNotReactivate bool = false
	this.DoNotReactivate = &doNotReactivate
	var pushToJira bool = false
	this.PushToJira = &pushToJira
	var closeOldFindings bool = true
	this.CloseOldFindings = &closeOldFindings
	var closeOldFindingsProductScope bool = false
	this.CloseOldFindingsProductScope = &closeOldFindingsProductScope
	var createFindingGroupsForAllFindings bool = true
	this.CreateFindingGroupsForAllFindings = &createFindingGroupsForAllFindings
	return &this
}

// GetScanDate returns the ScanDate field value if set, zero value otherwise.
func (o *ReImportScan) GetScanDate() string {
	if o == nil || IsNil(o.ScanDate) {
		var ret string
		return ret
	}
	return *o.ScanDate
}

// GetScanDateOk returns a tuple with the ScanDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReImportScan) GetScanDateOk() (*string, bool) {
	if o == nil || IsNil(o.ScanDate) {
		return nil, false
	}
	return o.ScanDate, true
}

// HasScanDate returns a boolean if a field has been set.
func (o *ReImportScan) HasScanDate() bool {
	if o != nil && !IsNil(o.ScanDate) {
		return true
	}

	return false
}

// SetScanDate gets a reference to the given string and assigns it to the ScanDate field.
func (o *ReImportScan) SetScanDate(v string) {
	o.ScanDate = &v
}

// GetMinimumSeverity returns the MinimumSeverity field value if set, zero value otherwise.
func (o *ReImportScan) GetMinimumSeverity() string {
	if o == nil || IsNil(o.MinimumSeverity) {
		var ret string
		return ret
	}
	return *o.MinimumSeverity
}

// GetMinimumSeverityOk returns a tuple with the MinimumSeverity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReImportScan) GetMinimumSeverityOk() (*string, bool) {
	if o == nil || IsNil(o.MinimumSeverity) {
		return nil, false
	}
	return o.MinimumSeverity, true
}

// HasMinimumSeverity returns a boolean if a field has been set.
func (o *ReImportScan) HasMinimumSeverity() bool {
	if o != nil && !IsNil(o.MinimumSeverity) {
		return true
	}

	return false
}

// SetMinimumSeverity gets a reference to the given string and assigns it to the MinimumSeverity field.
func (o *ReImportScan) SetMinimumSeverity(v string) {
	o.MinimumSeverity = &v
}

// GetActive returns the Active field value
func (o *ReImportScan) GetActive() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Active
}

// GetActiveOk returns a tuple with the Active field value
// and a boolean to check if the value has been set.
func (o *ReImportScan) GetActiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Active, true
}

// SetActive sets field value
func (o *ReImportScan) SetActive(v bool) {
	o.Active = v
}


// GetVerified returns the Verified field value
func (o *ReImportScan) GetVerified() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Verified
}

// GetVerifiedOk returns a tuple with the Verified field value
// and a boolean to check if the value has been set.
func (o *ReImportScan) GetVerifiedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Verified, true
}

// SetVerified sets field value
func (o *ReImportScan) SetVerified(v bool) {
	o.Verified = v
}


// GetDoNotReactivate returns the DoNotReactivate field value if set, zero value otherwise.
func (o *ReImportScan) GetDoNotReactivate() bool {
	if o == nil || IsNil(o.DoNotReactivate) {
		var ret bool
		return ret
	}
	return *o.DoNotReactivate
}

// GetDoNotReactivateOk returns a tuple with the DoNotReactivate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReImportScan) GetDoNotReactivateOk() (*bool, bool) {
	if o == nil || IsNil(o.DoNotReactivate) {
		return nil, false
	}
	return o.DoNotReactivate, true
}

// HasDoNotReactivate returns a boolean if a field has been set.
func (o *ReImportScan) HasDoNotReactivate() bool {
	if o != nil && !IsNil(o.DoNotReactivate) {
		return true
	}

	return false
}

// SetDoNotReactivate gets a reference to the given bool and assigns it to the DoNotReactivate field.
func (o *ReImportScan) SetDoNotReactivate(v bool) {
	o.DoNotReactivate = &v
}

// GetScanType returns the ScanType field value
func (o *ReImportScan) GetScanType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ScanType
}

// GetScanTypeOk returns a tuple with the ScanType field value
// and a boolean to check if the value has been set.
func (o *ReImportScan) GetScanTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ScanType, true
}

// SetScanType sets field value
func (o *ReImportScan) SetScanType(v string) {
	o.ScanType = v
}


// GetEndpointToAdd returns the EndpointToAdd field value if set, zero value otherwise.
func (o *ReImportScan) GetEndpointToAdd() int32 {
	if o == nil || IsNil(o.EndpointToAdd) {
		var ret int32
		return ret
	}
	return *o.EndpointToAdd
}

// GetEndpointToAddOk returns a tuple with the EndpointToAdd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReImportScan) GetEndpointToAddOk() (*int32, bool) {
	if o == nil || IsNil(o.EndpointToAdd) {
		return nil, false
	}
	return o.EndpointToAdd, true
}

// HasEndpointToAdd returns a boolean if a field has been set.
func (o *ReImportScan) HasEndpointToAdd() bool {
	if o != nil && !IsNil(o.EndpointToAdd) {
		return true
	}

	return false
}

// SetEndpointToAdd gets a reference to the given int32 and assigns it to the EndpointToAdd field.
func (o *ReImportScan) SetEndpointToAdd(v int32) {
	o.EndpointToAdd = &v
}

// GetFile returns the File field value if set, zero value otherwise.
func (o *ReImportScan) GetFile() string {
	if o == nil || IsNil(o.File) {
		var ret string
		return ret
	}
	return *o.File
}

// GetFileOk returns a tuple with the File field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReImportScan) GetFileOk() (*string, bool) {
	if o == nil || IsNil(o.File) {
		return nil, false
	}
	return o.File, true
}

// HasFile returns a boolean if a field has been set.
func (o *ReImportScan) HasFile() bool {
	if o != nil && !IsNil(o.File) {
		return true
	}

	return false
}

// SetFile gets a reference to the given string and assigns it to the File field.
func (o *ReImportScan) SetFile(v string) {
	o.File = &v
}

// GetProductTypeName returns the ProductTypeName field value if set, zero value otherwise.
func (o *ReImportScan) GetProductTypeName() string {
	if o == nil || IsNil(o.ProductTypeName) {
		var ret string
		return ret
	}
	return *o.ProductTypeName
}

// GetProductTypeNameOk returns a tuple with the ProductTypeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReImportScan) GetProductTypeNameOk() (*string, bool) {
	if o == nil || IsNil(o.ProductTypeName) {
		return nil, false
	}
	return o.ProductTypeName, true
}

// HasProductTypeName returns a boolean if a field has been set.
func (o *ReImportScan) HasProductTypeName() bool {
	if o != nil && !IsNil(o.ProductTypeName) {
		return true
	}

	return false
}

// SetProductTypeName gets a reference to the given string and assigns it to the ProductTypeName field.
func (o *ReImportScan) SetProductTypeName(v string) {
	o.ProductTypeName = &v
}

// GetProductName returns the ProductName field value if set, zero value otherwise.
func (o *ReImportScan) GetProductName() string {
	if o == nil || IsNil(o.ProductName) {
		var ret string
		return ret
	}
	return *o.ProductName
}

// GetProductNameOk returns a tuple with the ProductName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReImportScan) GetProductNameOk() (*string, bool) {
	if o == nil || IsNil(o.ProductName) {
		return nil, false
	}
	return o.ProductName, true
}

// HasProductName returns a boolean if a field has been set.
func (o *ReImportScan) HasProductName() bool {
	if o != nil && !IsNil(o.ProductName) {
		return true
	}

	return false
}

// SetProductName gets a reference to the given string and assigns it to the ProductName field.
func (o *ReImportScan) SetProductName(v string) {
	o.ProductName = &v
}

// GetEngagementName returns the EngagementName field value if set, zero value otherwise.
func (o *ReImportScan) GetEngagementName() string {
	if o == nil || IsNil(o.EngagementName) {
		var ret string
		return ret
	}
	return *o.EngagementName
}

// GetEngagementNameOk returns a tuple with the EngagementName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReImportScan) GetEngagementNameOk() (*string, bool) {
	if o == nil || IsNil(o.EngagementName) {
		return nil, false
	}
	return o.EngagementName, true
}

// HasEngagementName returns a boolean if a field has been set.
func (o *ReImportScan) HasEngagementName() bool {
	if o != nil && !IsNil(o.EngagementName) {
		return true
	}

	return false
}

// SetEngagementName gets a reference to the given string and assigns it to the EngagementName field.
func (o *ReImportScan) SetEngagementName(v string) {
	o.EngagementName = &v
}

// GetEngagementEndDate returns the EngagementEndDate field value if set, zero value otherwise.
func (o *ReImportScan) GetEngagementEndDate() string {
	if o == nil || IsNil(o.EngagementEndDate) {
		var ret string
		return ret
	}
	return *o.EngagementEndDate
}

// GetEngagementEndDateOk returns a tuple with the EngagementEndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReImportScan) GetEngagementEndDateOk() (*string, bool) {
	if o == nil || IsNil(o.EngagementEndDate) {
		return nil, false
	}
	return o.EngagementEndDate, true
}

// HasEngagementEndDate returns a boolean if a field has been set.
func (o *ReImportScan) HasEngagementEndDate() bool {
	if o != nil && !IsNil(o.EngagementEndDate) {
		return true
	}

	return false
}

// SetEngagementEndDate gets a reference to the given string and assigns it to the EngagementEndDate field.
func (o *ReImportScan) SetEngagementEndDate(v string) {
	o.EngagementEndDate = &v
}

// GetSourceCodeManagementUri returns the SourceCodeManagementUri field value if set, zero value otherwise.
func (o *ReImportScan) GetSourceCodeManagementUri() string {
	if o == nil || IsNil(o.SourceCodeManagementUri) {
		var ret string
		return ret
	}
	return *o.SourceCodeManagementUri
}

// GetSourceCodeManagementUriOk returns a tuple with the SourceCodeManagementUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReImportScan) GetSourceCodeManagementUriOk() (*string, bool) {
	if o == nil || IsNil(o.SourceCodeManagementUri) {
		return nil, false
	}
	return o.SourceCodeManagementUri, true
}

// HasSourceCodeManagementUri returns a boolean if a field has been set.
func (o *ReImportScan) HasSourceCodeManagementUri() bool {
	if o != nil && !IsNil(o.SourceCodeManagementUri) {
		return true
	}

	return false
}

// SetSourceCodeManagementUri gets a reference to the given string and assigns it to the SourceCodeManagementUri field.
func (o *ReImportScan) SetSourceCodeManagementUri(v string) {
	o.SourceCodeManagementUri = &v
}

// GetTest returns the Test field value if set, zero value otherwise.
func (o *ReImportScan) GetTest() int32 {
	if o == nil || IsNil(o.Test) {
		var ret int32
		return ret
	}
	return *o.Test
}

// GetTestOk returns a tuple with the Test field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReImportScan) GetTestOk() (*int32, bool) {
	if o == nil || IsNil(o.Test) {
		return nil, false
	}
	return o.Test, true
}

// HasTest returns a boolean if a field has been set.
func (o *ReImportScan) HasTest() bool {
	if o != nil && !IsNil(o.Test) {
		return true
	}

	return false
}

// SetTest gets a reference to the given int32 and assigns it to the Test field.
func (o *ReImportScan) SetTest(v int32) {
	o.Test = &v
}

// GetTestTitle returns the TestTitle field value if set, zero value otherwise.
func (o *ReImportScan) GetTestTitle() string {
	if o == nil || IsNil(o.TestTitle) {
		var ret string
		return ret
	}
	return *o.TestTitle
}

// GetTestTitleOk returns a tuple with the TestTitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReImportScan) GetTestTitleOk() (*string, bool) {
	if o == nil || IsNil(o.TestTitle) {
		return nil, false
	}
	return o.TestTitle, true
}

// HasTestTitle returns a boolean if a field has been set.
func (o *ReImportScan) HasTestTitle() bool {
	if o != nil && !IsNil(o.TestTitle) {
		return true
	}

	return false
}

// SetTestTitle gets a reference to the given string and assigns it to the TestTitle field.
func (o *ReImportScan) SetTestTitle(v string) {
	o.TestTitle = &v
}

// GetAutoCreateContext returns the AutoCreateContext field value if set, zero value otherwise.
func (o *ReImportScan) GetAutoCreateContext() bool {
	if o == nil || IsNil(o.AutoCreateContext) {
		var ret bool
		return ret
	}
	return *o.AutoCreateContext
}

// GetAutoCreateContextOk returns a tuple with the AutoCreateContext field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReImportScan) GetAutoCreateContextOk() (*bool, bool) {
	if o == nil || IsNil(o.AutoCreateContext) {
		return nil, false
	}
	return o.AutoCreateContext, true
}

// HasAutoCreateContext returns a boolean if a field has been set.
func (o *ReImportScan) HasAutoCreateContext() bool {
	if o != nil && !IsNil(o.AutoCreateContext) {
		return true
	}

	return false
}

// SetAutoCreateContext gets a reference to the given bool and assigns it to the AutoCreateContext field.
func (o *ReImportScan) SetAutoCreateContext(v bool) {
	o.AutoCreateContext = &v
}

// GetDeduplicationOnEngagement returns the DeduplicationOnEngagement field value if set, zero value otherwise.
func (o *ReImportScan) GetDeduplicationOnEngagement() bool {
	if o == nil || IsNil(o.DeduplicationOnEngagement) {
		var ret bool
		return ret
	}
	return *o.DeduplicationOnEngagement
}

// GetDeduplicationOnEngagementOk returns a tuple with the DeduplicationOnEngagement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReImportScan) GetDeduplicationOnEngagementOk() (*bool, bool) {
	if o == nil || IsNil(o.DeduplicationOnEngagement) {
		return nil, false
	}
	return o.DeduplicationOnEngagement, true
}

// HasDeduplicationOnEngagement returns a boolean if a field has been set.
func (o *ReImportScan) HasDeduplicationOnEngagement() bool {
	if o != nil && !IsNil(o.DeduplicationOnEngagement) {
		return true
	}

	return false
}

// SetDeduplicationOnEngagement gets a reference to the given bool and assigns it to the DeduplicationOnEngagement field.
func (o *ReImportScan) SetDeduplicationOnEngagement(v bool) {
	o.DeduplicationOnEngagement = &v
}

// GetPushToJira returns the PushToJira field value if set, zero value otherwise.
func (o *ReImportScan) GetPushToJira() bool {
	if o == nil || IsNil(o.PushToJira) {
		var ret bool
		return ret
	}
	return *o.PushToJira
}

// GetPushToJiraOk returns a tuple with the PushToJira field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReImportScan) GetPushToJiraOk() (*bool, bool) {
	if o == nil || IsNil(o.PushToJira) {
		return nil, false
	}
	return o.PushToJira, true
}

// HasPushToJira returns a boolean if a field has been set.
func (o *ReImportScan) HasPushToJira() bool {
	if o != nil && !IsNil(o.PushToJira) {
		return true
	}

	return false
}

// SetPushToJira gets a reference to the given bool and assigns it to the PushToJira field.
func (o *ReImportScan) SetPushToJira(v bool) {
	o.PushToJira = &v
}

// GetCloseOldFindings returns the CloseOldFindings field value if set, zero value otherwise.
func (o *ReImportScan) GetCloseOldFindings() bool {
	if o == nil || IsNil(o.CloseOldFindings) {
		var ret bool
		return ret
	}
	return *o.CloseOldFindings
}

// GetCloseOldFindingsOk returns a tuple with the CloseOldFindings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReImportScan) GetCloseOldFindingsOk() (*bool, bool) {
	if o == nil || IsNil(o.CloseOldFindings) {
		return nil, false
	}
	return o.CloseOldFindings, true
}

// HasCloseOldFindings returns a boolean if a field has been set.
func (o *ReImportScan) HasCloseOldFindings() bool {
	if o != nil && !IsNil(o.CloseOldFindings) {
		return true
	}

	return false
}

// SetCloseOldFindings gets a reference to the given bool and assigns it to the CloseOldFindings field.
func (o *ReImportScan) SetCloseOldFindings(v bool) {
	o.CloseOldFindings = &v
}

// GetCloseOldFindingsProductScope returns the CloseOldFindingsProductScope field value if set, zero value otherwise.
func (o *ReImportScan) GetCloseOldFindingsProductScope() bool {
	if o == nil || IsNil(o.CloseOldFindingsProductScope) {
		var ret bool
		return ret
	}
	return *o.CloseOldFindingsProductScope
}

// GetCloseOldFindingsProductScopeOk returns a tuple with the CloseOldFindingsProductScope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReImportScan) GetCloseOldFindingsProductScopeOk() (*bool, bool) {
	if o == nil || IsNil(o.CloseOldFindingsProductScope) {
		return nil, false
	}
	return o.CloseOldFindingsProductScope, true
}

// HasCloseOldFindingsProductScope returns a boolean if a field has been set.
func (o *ReImportScan) HasCloseOldFindingsProductScope() bool {
	if o != nil && !IsNil(o.CloseOldFindingsProductScope) {
		return true
	}

	return false
}

// SetCloseOldFindingsProductScope gets a reference to the given bool and assigns it to the CloseOldFindingsProductScope field.
func (o *ReImportScan) SetCloseOldFindingsProductScope(v bool) {
	o.CloseOldFindingsProductScope = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *ReImportScan) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReImportScan) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *ReImportScan) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *ReImportScan) SetVersion(v string) {
	o.Version = &v
}

// GetBuildId returns the BuildId field value if set, zero value otherwise.
func (o *ReImportScan) GetBuildId() string {
	if o == nil || IsNil(o.BuildId) {
		var ret string
		return ret
	}
	return *o.BuildId
}

// GetBuildIdOk returns a tuple with the BuildId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReImportScan) GetBuildIdOk() (*string, bool) {
	if o == nil || IsNil(o.BuildId) {
		return nil, false
	}
	return o.BuildId, true
}

// HasBuildId returns a boolean if a field has been set.
func (o *ReImportScan) HasBuildId() bool {
	if o != nil && !IsNil(o.BuildId) {
		return true
	}

	return false
}

// SetBuildId gets a reference to the given string and assigns it to the BuildId field.
func (o *ReImportScan) SetBuildId(v string) {
	o.BuildId = &v
}

// GetBranchTag returns the BranchTag field value if set, zero value otherwise.
func (o *ReImportScan) GetBranchTag() string {
	if o == nil || IsNil(o.BranchTag) {
		var ret string
		return ret
	}
	return *o.BranchTag
}

// GetBranchTagOk returns a tuple with the BranchTag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReImportScan) GetBranchTagOk() (*string, bool) {
	if o == nil || IsNil(o.BranchTag) {
		return nil, false
	}
	return o.BranchTag, true
}

// HasBranchTag returns a boolean if a field has been set.
func (o *ReImportScan) HasBranchTag() bool {
	if o != nil && !IsNil(o.BranchTag) {
		return true
	}

	return false
}

// SetBranchTag gets a reference to the given string and assigns it to the BranchTag field.
func (o *ReImportScan) SetBranchTag(v string) {
	o.BranchTag = &v
}

// GetCommitHash returns the CommitHash field value if set, zero value otherwise.
func (o *ReImportScan) GetCommitHash() string {
	if o == nil || IsNil(o.CommitHash) {
		var ret string
		return ret
	}
	return *o.CommitHash
}

// GetCommitHashOk returns a tuple with the CommitHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReImportScan) GetCommitHashOk() (*string, bool) {
	if o == nil || IsNil(o.CommitHash) {
		return nil, false
	}
	return o.CommitHash, true
}

// HasCommitHash returns a boolean if a field has been set.
func (o *ReImportScan) HasCommitHash() bool {
	if o != nil && !IsNil(o.CommitHash) {
		return true
	}

	return false
}

// SetCommitHash gets a reference to the given string and assigns it to the CommitHash field.
func (o *ReImportScan) SetCommitHash(v string) {
	o.CommitHash = &v
}

// GetApiScanConfiguration returns the ApiScanConfiguration field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReImportScan) GetApiScanConfiguration() int32 {
	if o == nil || IsNil(o.ApiScanConfiguration.Get()) {
		var ret int32
		return ret
	}
	return *o.ApiScanConfiguration.Get()
}

// GetApiScanConfigurationOk returns a tuple with the ApiScanConfiguration field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReImportScan) GetApiScanConfigurationOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ApiScanConfiguration.Get(), o.ApiScanConfiguration.IsSet()
}

// HasApiScanConfiguration returns a boolean if a field has been set.
func (o *ReImportScan) HasApiScanConfiguration() bool {
	if o != nil && o.ApiScanConfiguration.IsSet() {
		return true
	}

	return false
}

// SetApiScanConfiguration gets a reference to the given NullableInt32 and assigns it to the ApiScanConfiguration field.
func (o *ReImportScan) SetApiScanConfiguration(v int32) {
	o.ApiScanConfiguration.Set(&v)
}
// SetApiScanConfigurationNil sets the value for ApiScanConfiguration to be an explicit nil
func (o *ReImportScan) SetApiScanConfigurationNil() {
	o.ApiScanConfiguration.Set(nil)
}

// UnsetApiScanConfiguration ensures that no value is present for ApiScanConfiguration, not even an explicit nil
func (o *ReImportScan) UnsetApiScanConfiguration() {
	o.ApiScanConfiguration.Unset()
}

// GetService returns the Service field value if set, zero value otherwise.
func (o *ReImportScan) GetService() string {
	if o == nil || IsNil(o.Service) {
		var ret string
		return ret
	}
	return *o.Service
}

// GetServiceOk returns a tuple with the Service field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReImportScan) GetServiceOk() (*string, bool) {
	if o == nil || IsNil(o.Service) {
		return nil, false
	}
	return o.Service, true
}

// HasService returns a boolean if a field has been set.
func (o *ReImportScan) HasService() bool {
	if o != nil && !IsNil(o.Service) {
		return true
	}

	return false
}

// SetService gets a reference to the given string and assigns it to the Service field.
func (o *ReImportScan) SetService(v string) {
	o.Service = &v
}

// GetEnvironment returns the Environment field value if set, zero value otherwise.
func (o *ReImportScan) GetEnvironment() string {
	if o == nil || IsNil(o.Environment) {
		var ret string
		return ret
	}
	return *o.Environment
}

// GetEnvironmentOk returns a tuple with the Environment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReImportScan) GetEnvironmentOk() (*string, bool) {
	if o == nil || IsNil(o.Environment) {
		return nil, false
	}
	return o.Environment, true
}

// HasEnvironment returns a boolean if a field has been set.
func (o *ReImportScan) HasEnvironment() bool {
	if o != nil && !IsNil(o.Environment) {
		return true
	}

	return false
}

// SetEnvironment gets a reference to the given string and assigns it to the Environment field.
func (o *ReImportScan) SetEnvironment(v string) {
	o.Environment = &v
}

// GetLead returns the Lead field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReImportScan) GetLead() int32 {
	if o == nil || IsNil(o.Lead.Get()) {
		var ret int32
		return ret
	}
	return *o.Lead.Get()
}

// GetLeadOk returns a tuple with the Lead field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReImportScan) GetLeadOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Lead.Get(), o.Lead.IsSet()
}

// HasLead returns a boolean if a field has been set.
func (o *ReImportScan) HasLead() bool {
	if o != nil && o.Lead.IsSet() {
		return true
	}

	return false
}

// SetLead gets a reference to the given NullableInt32 and assigns it to the Lead field.
func (o *ReImportScan) SetLead(v int32) {
	o.Lead.Set(&v)
}
// SetLeadNil sets the value for Lead to be an explicit nil
func (o *ReImportScan) SetLeadNil() {
	o.Lead.Set(nil)
}

// UnsetLead ensures that no value is present for Lead, not even an explicit nil
func (o *ReImportScan) UnsetLead() {
	o.Lead.Unset()
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *ReImportScan) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReImportScan) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *ReImportScan) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *ReImportScan) SetTags(v []string) {
	o.Tags = v
}

// GetGroupBy returns the GroupBy field value if set, zero value otherwise.
func (o *ReImportScan) GetGroupBy() string {
	if o == nil || IsNil(o.GroupBy) {
		var ret string
		return ret
	}
	return *o.GroupBy
}

// GetGroupByOk returns a tuple with the GroupBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReImportScan) GetGroupByOk() (*string, bool) {
	if o == nil || IsNil(o.GroupBy) {
		return nil, false
	}
	return o.GroupBy, true
}

// HasGroupBy returns a boolean if a field has been set.
func (o *ReImportScan) HasGroupBy() bool {
	if o != nil && !IsNil(o.GroupBy) {
		return true
	}

	return false
}

// SetGroupBy gets a reference to the given string and assigns it to the GroupBy field.
func (o *ReImportScan) SetGroupBy(v string) {
	o.GroupBy = &v
}

// GetCreateFindingGroupsForAllFindings returns the CreateFindingGroupsForAllFindings field value if set, zero value otherwise.
func (o *ReImportScan) GetCreateFindingGroupsForAllFindings() bool {
	if o == nil || IsNil(o.CreateFindingGroupsForAllFindings) {
		var ret bool
		return ret
	}
	return *o.CreateFindingGroupsForAllFindings
}

// GetCreateFindingGroupsForAllFindingsOk returns a tuple with the CreateFindingGroupsForAllFindings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReImportScan) GetCreateFindingGroupsForAllFindingsOk() (*bool, bool) {
	if o == nil || IsNil(o.CreateFindingGroupsForAllFindings) {
		return nil, false
	}
	return o.CreateFindingGroupsForAllFindings, true
}

// HasCreateFindingGroupsForAllFindings returns a boolean if a field has been set.
func (o *ReImportScan) HasCreateFindingGroupsForAllFindings() bool {
	if o != nil && !IsNil(o.CreateFindingGroupsForAllFindings) {
		return true
	}

	return false
}

// SetCreateFindingGroupsForAllFindings gets a reference to the given bool and assigns it to the CreateFindingGroupsForAllFindings field.
func (o *ReImportScan) SetCreateFindingGroupsForAllFindings(v bool) {
	o.CreateFindingGroupsForAllFindings = &v
}

// GetTestId returns the TestId field value
func (o *ReImportScan) GetTestId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TestId
}

// GetTestIdOk returns a tuple with the TestId field value
// and a boolean to check if the value has been set.
func (o *ReImportScan) GetTestIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TestId, true
}

// SetTestId sets field value
func (o *ReImportScan) SetTestId(v int32) {
	o.TestId = v
}


// GetEngagementId returns the EngagementId field value
func (o *ReImportScan) GetEngagementId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.EngagementId
}

// GetEngagementIdOk returns a tuple with the EngagementId field value
// and a boolean to check if the value has been set.
func (o *ReImportScan) GetEngagementIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EngagementId, true
}

// SetEngagementId sets field value
func (o *ReImportScan) SetEngagementId(v int32) {
	o.EngagementId = v
}


// GetProductId returns the ProductId field value
func (o *ReImportScan) GetProductId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ProductId
}

// GetProductIdOk returns a tuple with the ProductId field value
// and a boolean to check if the value has been set.
func (o *ReImportScan) GetProductIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProductId, true
}

// SetProductId sets field value
func (o *ReImportScan) SetProductId(v int32) {
	o.ProductId = v
}


// GetProductTypeId returns the ProductTypeId field value
func (o *ReImportScan) GetProductTypeId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ProductTypeId
}

// GetProductTypeIdOk returns a tuple with the ProductTypeId field value
// and a boolean to check if the value has been set.
func (o *ReImportScan) GetProductTypeIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProductTypeId, true
}

// SetProductTypeId sets field value
func (o *ReImportScan) SetProductTypeId(v int32) {
	o.ProductTypeId = v
}


// GetStatistics returns the Statistics field value
func (o *ReImportScan) GetStatistics() ImportStatistics {
	if o == nil {
		var ret ImportStatistics
		return ret
	}

	return o.Statistics
}

// GetStatisticsOk returns a tuple with the Statistics field value
// and a boolean to check if the value has been set.
func (o *ReImportScan) GetStatisticsOk() (*ImportStatistics, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Statistics, true
}

// SetStatistics sets field value
func (o *ReImportScan) SetStatistics(v ImportStatistics) {
	o.Statistics = v
}


// GetApplyTagsToFindings returns the ApplyTagsToFindings field value if set, zero value otherwise.
func (o *ReImportScan) GetApplyTagsToFindings() bool {
	if o == nil || IsNil(o.ApplyTagsToFindings) {
		var ret bool
		return ret
	}
	return *o.ApplyTagsToFindings
}

// GetApplyTagsToFindingsOk returns a tuple with the ApplyTagsToFindings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReImportScan) GetApplyTagsToFindingsOk() (*bool, bool) {
	if o == nil || IsNil(o.ApplyTagsToFindings) {
		return nil, false
	}
	return o.ApplyTagsToFindings, true
}

// HasApplyTagsToFindings returns a boolean if a field has been set.
func (o *ReImportScan) HasApplyTagsToFindings() bool {
	if o != nil && !IsNil(o.ApplyTagsToFindings) {
		return true
	}

	return false
}

// SetApplyTagsToFindings gets a reference to the given bool and assigns it to the ApplyTagsToFindings field.
func (o *ReImportScan) SetApplyTagsToFindings(v bool) {
	o.ApplyTagsToFindings = &v
}

// GetApplyTagsToEndpoints returns the ApplyTagsToEndpoints field value if set, zero value otherwise.
func (o *ReImportScan) GetApplyTagsToEndpoints() bool {
	if o == nil || IsNil(o.ApplyTagsToEndpoints) {
		var ret bool
		return ret
	}
	return *o.ApplyTagsToEndpoints
}

// GetApplyTagsToEndpointsOk returns a tuple with the ApplyTagsToEndpoints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReImportScan) GetApplyTagsToEndpointsOk() (*bool, bool) {
	if o == nil || IsNil(o.ApplyTagsToEndpoints) {
		return nil, false
	}
	return o.ApplyTagsToEndpoints, true
}

// HasApplyTagsToEndpoints returns a boolean if a field has been set.
func (o *ReImportScan) HasApplyTagsToEndpoints() bool {
	if o != nil && !IsNil(o.ApplyTagsToEndpoints) {
		return true
	}

	return false
}

// SetApplyTagsToEndpoints gets a reference to the given bool and assigns it to the ApplyTagsToEndpoints field.
func (o *ReImportScan) SetApplyTagsToEndpoints(v bool) {
	o.ApplyTagsToEndpoints = &v
}

func (o ReImportScan) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReImportScan) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ScanDate) {
		toSerialize["scan_date"] = o.ScanDate
	}
	if !IsNil(o.MinimumSeverity) {
		toSerialize["minimum_severity"] = o.MinimumSeverity
	}
	toSerialize["active"] = o.Active
	toSerialize["verified"] = o.Verified
	if !IsNil(o.DoNotReactivate) {
		toSerialize["do_not_reactivate"] = o.DoNotReactivate
	}
	toSerialize["scan_type"] = o.ScanType
	if !IsNil(o.EndpointToAdd) {
		toSerialize["endpoint_to_add"] = o.EndpointToAdd
	}
	if !IsNil(o.File) {
		toSerialize["file"] = o.File
	}
	if !IsNil(o.ProductTypeName) {
		toSerialize["product_type_name"] = o.ProductTypeName
	}
	if !IsNil(o.ProductName) {
		toSerialize["product_name"] = o.ProductName
	}
	if !IsNil(o.EngagementName) {
		toSerialize["engagement_name"] = o.EngagementName
	}
	if !IsNil(o.EngagementEndDate) {
		toSerialize["engagement_end_date"] = o.EngagementEndDate
	}
	if !IsNil(o.SourceCodeManagementUri) {
		toSerialize["source_code_management_uri"] = o.SourceCodeManagementUri
	}
	if !IsNil(o.Test) {
		toSerialize["test"] = o.Test
	}
	if !IsNil(o.TestTitle) {
		toSerialize["test_title"] = o.TestTitle
	}
	if !IsNil(o.AutoCreateContext) {
		toSerialize["auto_create_context"] = o.AutoCreateContext
	}
	if !IsNil(o.DeduplicationOnEngagement) {
		toSerialize["deduplication_on_engagement"] = o.DeduplicationOnEngagement
	}
	if !IsNil(o.PushToJira) {
		toSerialize["push_to_jira"] = o.PushToJira
	}
	if !IsNil(o.CloseOldFindings) {
		toSerialize["close_old_findings"] = o.CloseOldFindings
	}
	if !IsNil(o.CloseOldFindingsProductScope) {
		toSerialize["close_old_findings_product_scope"] = o.CloseOldFindingsProductScope
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !IsNil(o.BuildId) {
		toSerialize["build_id"] = o.BuildId
	}
	if !IsNil(o.BranchTag) {
		toSerialize["branch_tag"] = o.BranchTag
	}
	if !IsNil(o.CommitHash) {
		toSerialize["commit_hash"] = o.CommitHash
	}
	if o.ApiScanConfiguration.IsSet() {
		toSerialize["api_scan_configuration"] = o.ApiScanConfiguration.Get()
	}
	if !IsNil(o.Service) {
		toSerialize["service"] = o.Service
	}
	if !IsNil(o.Environment) {
		toSerialize["environment"] = o.Environment
	}
	if o.Lead.IsSet() {
		toSerialize["lead"] = o.Lead.Get()
	}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.GroupBy) {
		toSerialize["group_by"] = o.GroupBy
	}
	if !IsNil(o.CreateFindingGroupsForAllFindings) {
		toSerialize["create_finding_groups_for_all_findings"] = o.CreateFindingGroupsForAllFindings
	}
	toSerialize["test_id"] = o.TestId
	toSerialize["engagement_id"] = o.EngagementId
	toSerialize["product_id"] = o.ProductId
	toSerialize["product_type_id"] = o.ProductTypeId
	toSerialize["statistics"] = o.Statistics
	if !IsNil(o.ApplyTagsToFindings) {
		toSerialize["apply_tags_to_findings"] = o.ApplyTagsToFindings
	}
	if !IsNil(o.ApplyTagsToEndpoints) {
		toSerialize["apply_tags_to_endpoints"] = o.ApplyTagsToEndpoints
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ReImportScan) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"active",
		"verified",
		"scan_type",
		"test_id",
		"engagement_id",
		"product_id",
		"product_type_id",
		"statistics",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{} {
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == ""{
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil{
			return err
		}
	}
	varReImportScan := _ReImportScan{}

	err = json.Unmarshal(data, &varReImportScan)

	if err != nil {
		return err
	}

	*o = ReImportScan(varReImportScan)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "scan_date")
		delete(additionalProperties, "minimum_severity")
		delete(additionalProperties, "active")
		delete(additionalProperties, "verified")
		delete(additionalProperties, "do_not_reactivate")
		delete(additionalProperties, "scan_type")
		delete(additionalProperties, "endpoint_to_add")
		delete(additionalProperties, "file")
		delete(additionalProperties, "product_type_name")
		delete(additionalProperties, "product_name")
		delete(additionalProperties, "engagement_name")
		delete(additionalProperties, "engagement_end_date")
		delete(additionalProperties, "source_code_management_uri")
		delete(additionalProperties, "test")
		delete(additionalProperties, "test_title")
		delete(additionalProperties, "auto_create_context")
		delete(additionalProperties, "deduplication_on_engagement")
		delete(additionalProperties, "push_to_jira")
		delete(additionalProperties, "close_old_findings")
		delete(additionalProperties, "close_old_findings_product_scope")
		delete(additionalProperties, "version")
		delete(additionalProperties, "build_id")
		delete(additionalProperties, "branch_tag")
		delete(additionalProperties, "commit_hash")
		delete(additionalProperties, "api_scan_configuration")
		delete(additionalProperties, "service")
		delete(additionalProperties, "environment")
		delete(additionalProperties, "lead")
		delete(additionalProperties, "tags")
		delete(additionalProperties, "group_by")
		delete(additionalProperties, "create_finding_groups_for_all_findings")
		delete(additionalProperties, "test_id")
		delete(additionalProperties, "engagement_id")
		delete(additionalProperties, "product_id")
		delete(additionalProperties, "product_type_id")
		delete(additionalProperties, "statistics")
		delete(additionalProperties, "apply_tags_to_findings")
		delete(additionalProperties, "apply_tags_to_endpoints")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableReImportScan struct {
	value *ReImportScan
	isSet bool
}

func (v NullableReImportScan) Get() *ReImportScan {
	return v.value
}

func (v *NullableReImportScan) Set(val *ReImportScan) {
	v.value = val
	v.isSet = true
}

func (v NullableReImportScan) IsSet() bool {
	return v.isSet
}

func (v *NullableReImportScan) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReImportScan(val *ReImportScan) *NullableReImportScan {
	return &NullableReImportScan{value: val, isSet: true}
}

func (v NullableReImportScan) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReImportScan) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


