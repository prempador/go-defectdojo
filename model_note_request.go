/*
Defect Dojo API v2

Defect Dojo - Open Source vulnerability Management made easy. Prefetch related parameters/responses not yet in the schema.

API version: 2.38.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package defectdojo

import (
	"encoding/json"
	"fmt"
)

// checks if the NoteRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NoteRequest{}

// NoteRequest struct for NoteRequest
type NoteRequest struct {
	Entry string `json:"entry"`
	Private *bool `json:"private,omitempty"`
	Edited *bool `json:"edited,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _NoteRequest NoteRequest

// NewNoteRequest instantiates a new NoteRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNoteRequest(entry string) *NoteRequest {
	this := NoteRequest{}
	this.Entry = entry
	return &this
}

// NewNoteRequestWithDefaults instantiates a new NoteRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNoteRequestWithDefaults() *NoteRequest {
	this := NoteRequest{}
	return &this
}

// GetEntry returns the Entry field value
func (o *NoteRequest) GetEntry() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Entry
}

// GetEntryOk returns a tuple with the Entry field value
// and a boolean to check if the value has been set.
func (o *NoteRequest) GetEntryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Entry, true
}

// SetEntry sets field value
func (o *NoteRequest) SetEntry(v string) {
	o.Entry = v
}


// GetPrivate returns the Private field value if set, zero value otherwise.
func (o *NoteRequest) GetPrivate() bool {
	if o == nil || IsNil(o.Private) {
		var ret bool
		return ret
	}
	return *o.Private
}

// GetPrivateOk returns a tuple with the Private field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NoteRequest) GetPrivateOk() (*bool, bool) {
	if o == nil || IsNil(o.Private) {
		return nil, false
	}
	return o.Private, true
}

// HasPrivate returns a boolean if a field has been set.
func (o *NoteRequest) HasPrivate() bool {
	if o != nil && !IsNil(o.Private) {
		return true
	}

	return false
}

// SetPrivate gets a reference to the given bool and assigns it to the Private field.
func (o *NoteRequest) SetPrivate(v bool) {
	o.Private = &v
}

// GetEdited returns the Edited field value if set, zero value otherwise.
func (o *NoteRequest) GetEdited() bool {
	if o == nil || IsNil(o.Edited) {
		var ret bool
		return ret
	}
	return *o.Edited
}

// GetEditedOk returns a tuple with the Edited field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NoteRequest) GetEditedOk() (*bool, bool) {
	if o == nil || IsNil(o.Edited) {
		return nil, false
	}
	return o.Edited, true
}

// HasEdited returns a boolean if a field has been set.
func (o *NoteRequest) HasEdited() bool {
	if o != nil && !IsNil(o.Edited) {
		return true
	}

	return false
}

// SetEdited gets a reference to the given bool and assigns it to the Edited field.
func (o *NoteRequest) SetEdited(v bool) {
	o.Edited = &v
}

func (o NoteRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NoteRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["entry"] = o.Entry
	if !IsNil(o.Private) {
		toSerialize["private"] = o.Private
	}
	if !IsNil(o.Edited) {
		toSerialize["edited"] = o.Edited
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *NoteRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"entry",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{} {
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == ""{
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil{
			return err
		}
	}
	varNoteRequest := _NoteRequest{}

	err = json.Unmarshal(data, &varNoteRequest)

	if err != nil {
		return err
	}

	*o = NoteRequest(varNoteRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "entry")
		delete(additionalProperties, "private")
		delete(additionalProperties, "edited")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableNoteRequest struct {
	value *NoteRequest
	isSet bool
}

func (v NullableNoteRequest) Get() *NoteRequest {
	return v.value
}

func (v *NullableNoteRequest) Set(val *NoteRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableNoteRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableNoteRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNoteRequest(val *NoteRequest) *NullableNoteRequest {
	return &NullableNoteRequest{value: val, isSet: true}
}

func (v NullableNoteRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNoteRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


