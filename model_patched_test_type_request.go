/*
Defect Dojo API v2

Defect Dojo - Open Source vulnerability Management made easy. Prefetch related parameters/responses not yet in the schema.

API version: 2.33.5
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package defectdojo

import (
	"encoding/json"
)

// checks if the PatchedTestTypeRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PatchedTestTypeRequest{}

// PatchedTestTypeRequest struct for PatchedTestTypeRequest
type PatchedTestTypeRequest struct {
	Tags []string `json:"tags,omitempty"`
	Name *string `json:"name,omitempty"`
	StaticTool *bool `json:"static_tool,omitempty"`
	DynamicTool *bool `json:"dynamic_tool,omitempty"`
	Active *bool `json:"active,omitempty"`
}

// NewPatchedTestTypeRequest instantiates a new PatchedTestTypeRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPatchedTestTypeRequest() *PatchedTestTypeRequest {
	this := PatchedTestTypeRequest{}
	return &this
}

// NewPatchedTestTypeRequestWithDefaults instantiates a new PatchedTestTypeRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatchedTestTypeRequestWithDefaults() *PatchedTestTypeRequest {
	this := PatchedTestTypeRequest{}
	return &this
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *PatchedTestTypeRequest) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedTestTypeRequest) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *PatchedTestTypeRequest) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *PatchedTestTypeRequest) SetTags(v []string) {
	o.Tags = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PatchedTestTypeRequest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedTestTypeRequest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PatchedTestTypeRequest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PatchedTestTypeRequest) SetName(v string) {
	o.Name = &v
}

// GetStaticTool returns the StaticTool field value if set, zero value otherwise.
func (o *PatchedTestTypeRequest) GetStaticTool() bool {
	if o == nil || IsNil(o.StaticTool) {
		var ret bool
		return ret
	}
	return *o.StaticTool
}

// GetStaticToolOk returns a tuple with the StaticTool field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedTestTypeRequest) GetStaticToolOk() (*bool, bool) {
	if o == nil || IsNil(o.StaticTool) {
		return nil, false
	}
	return o.StaticTool, true
}

// HasStaticTool returns a boolean if a field has been set.
func (o *PatchedTestTypeRequest) HasStaticTool() bool {
	if o != nil && !IsNil(o.StaticTool) {
		return true
	}

	return false
}

// SetStaticTool gets a reference to the given bool and assigns it to the StaticTool field.
func (o *PatchedTestTypeRequest) SetStaticTool(v bool) {
	o.StaticTool = &v
}

// GetDynamicTool returns the DynamicTool field value if set, zero value otherwise.
func (o *PatchedTestTypeRequest) GetDynamicTool() bool {
	if o == nil || IsNil(o.DynamicTool) {
		var ret bool
		return ret
	}
	return *o.DynamicTool
}

// GetDynamicToolOk returns a tuple with the DynamicTool field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedTestTypeRequest) GetDynamicToolOk() (*bool, bool) {
	if o == nil || IsNil(o.DynamicTool) {
		return nil, false
	}
	return o.DynamicTool, true
}

// HasDynamicTool returns a boolean if a field has been set.
func (o *PatchedTestTypeRequest) HasDynamicTool() bool {
	if o != nil && !IsNil(o.DynamicTool) {
		return true
	}

	return false
}

// SetDynamicTool gets a reference to the given bool and assigns it to the DynamicTool field.
func (o *PatchedTestTypeRequest) SetDynamicTool(v bool) {
	o.DynamicTool = &v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *PatchedTestTypeRequest) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedTestTypeRequest) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *PatchedTestTypeRequest) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *PatchedTestTypeRequest) SetActive(v bool) {
	o.Active = &v
}

func (o PatchedTestTypeRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PatchedTestTypeRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.StaticTool) {
		toSerialize["static_tool"] = o.StaticTool
	}
	if !IsNil(o.DynamicTool) {
		toSerialize["dynamic_tool"] = o.DynamicTool
	}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	return toSerialize, nil
}

type NullablePatchedTestTypeRequest struct {
	value *PatchedTestTypeRequest
	isSet bool
}

func (v NullablePatchedTestTypeRequest) Get() *PatchedTestTypeRequest {
	return v.value
}

func (v *NullablePatchedTestTypeRequest) Set(val *PatchedTestTypeRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchedTestTypeRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchedTestTypeRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchedTestTypeRequest(val *PatchedTestTypeRequest) *NullablePatchedTestTypeRequest {
	return &NullablePatchedTestTypeRequest{value: val, isSet: true}
}

func (v NullablePatchedTestTypeRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchedTestTypeRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


