/*
Defect Dojo API v2

Defect Dojo - Open Source vulnerability Management made easy. Prefetch related parameters/responses not yet in the schema.

API version: 2.30.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package defectdojo

import (
	"encoding/json"
)

// checks if the MetaPrefetch type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MetaPrefetch{}

// MetaPrefetch struct for MetaPrefetch
type MetaPrefetch struct {
	Endpoint *map[string]Endpoint `json:"endpoint,omitempty"`
	Finding *map[string]Finding `json:"finding,omitempty"`
	Product *map[string]Product `json:"product,omitempty"`
}

// NewMetaPrefetch instantiates a new MetaPrefetch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetaPrefetch() *MetaPrefetch {
	this := MetaPrefetch{}
	return &this
}

// NewMetaPrefetchWithDefaults instantiates a new MetaPrefetch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetaPrefetchWithDefaults() *MetaPrefetch {
	this := MetaPrefetch{}
	return &this
}

// GetEndpoint returns the Endpoint field value if set, zero value otherwise.
func (o *MetaPrefetch) GetEndpoint() map[string]Endpoint {
	if o == nil || IsNil(o.Endpoint) {
		var ret map[string]Endpoint
		return ret
	}
	return *o.Endpoint
}

// GetEndpointOk returns a tuple with the Endpoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaPrefetch) GetEndpointOk() (*map[string]Endpoint, bool) {
	if o == nil || IsNil(o.Endpoint) {
		return nil, false
	}
	return o.Endpoint, true
}

// HasEndpoint returns a boolean if a field has been set.
func (o *MetaPrefetch) HasEndpoint() bool {
	if o != nil && !IsNil(o.Endpoint) {
		return true
	}

	return false
}

// SetEndpoint gets a reference to the given map[string]Endpoint and assigns it to the Endpoint field.
func (o *MetaPrefetch) SetEndpoint(v map[string]Endpoint) {
	o.Endpoint = &v
}

// GetFinding returns the Finding field value if set, zero value otherwise.
func (o *MetaPrefetch) GetFinding() map[string]Finding {
	if o == nil || IsNil(o.Finding) {
		var ret map[string]Finding
		return ret
	}
	return *o.Finding
}

// GetFindingOk returns a tuple with the Finding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaPrefetch) GetFindingOk() (*map[string]Finding, bool) {
	if o == nil || IsNil(o.Finding) {
		return nil, false
	}
	return o.Finding, true
}

// HasFinding returns a boolean if a field has been set.
func (o *MetaPrefetch) HasFinding() bool {
	if o != nil && !IsNil(o.Finding) {
		return true
	}

	return false
}

// SetFinding gets a reference to the given map[string]Finding and assigns it to the Finding field.
func (o *MetaPrefetch) SetFinding(v map[string]Finding) {
	o.Finding = &v
}

// GetProduct returns the Product field value if set, zero value otherwise.
func (o *MetaPrefetch) GetProduct() map[string]Product {
	if o == nil || IsNil(o.Product) {
		var ret map[string]Product
		return ret
	}
	return *o.Product
}

// GetProductOk returns a tuple with the Product field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetaPrefetch) GetProductOk() (*map[string]Product, bool) {
	if o == nil || IsNil(o.Product) {
		return nil, false
	}
	return o.Product, true
}

// HasProduct returns a boolean if a field has been set.
func (o *MetaPrefetch) HasProduct() bool {
	if o != nil && !IsNil(o.Product) {
		return true
	}

	return false
}

// SetProduct gets a reference to the given map[string]Product and assigns it to the Product field.
func (o *MetaPrefetch) SetProduct(v map[string]Product) {
	o.Product = &v
}

func (o MetaPrefetch) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MetaPrefetch) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Endpoint) {
		toSerialize["endpoint"] = o.Endpoint
	}
	if !IsNil(o.Finding) {
		toSerialize["finding"] = o.Finding
	}
	if !IsNil(o.Product) {
		toSerialize["product"] = o.Product
	}
	return toSerialize, nil
}

type NullableMetaPrefetch struct {
	value *MetaPrefetch
	isSet bool
}

func (v NullableMetaPrefetch) Get() *MetaPrefetch {
	return v.value
}

func (v *NullableMetaPrefetch) Set(val *MetaPrefetch) {
	v.value = val
	v.isSet = true
}

func (v NullableMetaPrefetch) IsSet() bool {
	return v.isSet
}

func (v *NullableMetaPrefetch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetaPrefetch(val *MetaPrefetch) *NullableMetaPrefetch {
	return &NullableMetaPrefetch{value: val, isSet: true}
}

func (v NullableMetaPrefetch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetaPrefetch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


