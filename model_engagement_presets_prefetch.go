/*
Defect Dojo API v2

Defect Dojo - Open Source vulnerability Management made easy. Prefetch related parameters/responses not yet in the schema.

API version: 2.38.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package defectdojo

import (
	"encoding/json"
)

// checks if the EngagementPresetsPrefetch type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EngagementPresetsPrefetch{}

// EngagementPresetsPrefetch struct for EngagementPresetsPrefetch
type EngagementPresetsPrefetch struct {
	NetworkLocations *map[string]NetworkLocations `json:"network_locations,omitempty"`
	Product *map[string]Product `json:"product,omitempty"`
	TestType *map[string]TestType `json:"test_type,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _EngagementPresetsPrefetch EngagementPresetsPrefetch

// NewEngagementPresetsPrefetch instantiates a new EngagementPresetsPrefetch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEngagementPresetsPrefetch() *EngagementPresetsPrefetch {
	this := EngagementPresetsPrefetch{}
	return &this
}

// NewEngagementPresetsPrefetchWithDefaults instantiates a new EngagementPresetsPrefetch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEngagementPresetsPrefetchWithDefaults() *EngagementPresetsPrefetch {
	this := EngagementPresetsPrefetch{}
	return &this
}

// GetNetworkLocations returns the NetworkLocations field value if set, zero value otherwise.
func (o *EngagementPresetsPrefetch) GetNetworkLocations() map[string]NetworkLocations {
	if o == nil || IsNil(o.NetworkLocations) {
		var ret map[string]NetworkLocations
		return ret
	}
	return *o.NetworkLocations
}

// GetNetworkLocationsOk returns a tuple with the NetworkLocations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EngagementPresetsPrefetch) GetNetworkLocationsOk() (*map[string]NetworkLocations, bool) {
	if o == nil || IsNil(o.NetworkLocations) {
		return nil, false
	}
	return o.NetworkLocations, true
}

// HasNetworkLocations returns a boolean if a field has been set.
func (o *EngagementPresetsPrefetch) HasNetworkLocations() bool {
	if o != nil && !IsNil(o.NetworkLocations) {
		return true
	}

	return false
}

// SetNetworkLocations gets a reference to the given map[string]NetworkLocations and assigns it to the NetworkLocations field.
func (o *EngagementPresetsPrefetch) SetNetworkLocations(v map[string]NetworkLocations) {
	o.NetworkLocations = &v
}

// GetProduct returns the Product field value if set, zero value otherwise.
func (o *EngagementPresetsPrefetch) GetProduct() map[string]Product {
	if o == nil || IsNil(o.Product) {
		var ret map[string]Product
		return ret
	}
	return *o.Product
}

// GetProductOk returns a tuple with the Product field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EngagementPresetsPrefetch) GetProductOk() (*map[string]Product, bool) {
	if o == nil || IsNil(o.Product) {
		return nil, false
	}
	return o.Product, true
}

// HasProduct returns a boolean if a field has been set.
func (o *EngagementPresetsPrefetch) HasProduct() bool {
	if o != nil && !IsNil(o.Product) {
		return true
	}

	return false
}

// SetProduct gets a reference to the given map[string]Product and assigns it to the Product field.
func (o *EngagementPresetsPrefetch) SetProduct(v map[string]Product) {
	o.Product = &v
}

// GetTestType returns the TestType field value if set, zero value otherwise.
func (o *EngagementPresetsPrefetch) GetTestType() map[string]TestType {
	if o == nil || IsNil(o.TestType) {
		var ret map[string]TestType
		return ret
	}
	return *o.TestType
}

// GetTestTypeOk returns a tuple with the TestType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EngagementPresetsPrefetch) GetTestTypeOk() (*map[string]TestType, bool) {
	if o == nil || IsNil(o.TestType) {
		return nil, false
	}
	return o.TestType, true
}

// HasTestType returns a boolean if a field has been set.
func (o *EngagementPresetsPrefetch) HasTestType() bool {
	if o != nil && !IsNil(o.TestType) {
		return true
	}

	return false
}

// SetTestType gets a reference to the given map[string]TestType and assigns it to the TestType field.
func (o *EngagementPresetsPrefetch) SetTestType(v map[string]TestType) {
	o.TestType = &v
}

func (o EngagementPresetsPrefetch) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EngagementPresetsPrefetch) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.NetworkLocations) {
		toSerialize["network_locations"] = o.NetworkLocations
	}
	if !IsNil(o.Product) {
		toSerialize["product"] = o.Product
	}
	if !IsNil(o.TestType) {
		toSerialize["test_type"] = o.TestType
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EngagementPresetsPrefetch) UnmarshalJSON(data []byte) (err error) {
	varEngagementPresetsPrefetch := _EngagementPresetsPrefetch{}

	err = json.Unmarshal(data, &varEngagementPresetsPrefetch)

	if err != nil {
		return err
	}

	*o = EngagementPresetsPrefetch(varEngagementPresetsPrefetch)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "network_locations")
		delete(additionalProperties, "product")
		delete(additionalProperties, "test_type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEngagementPresetsPrefetch struct {
	value *EngagementPresetsPrefetch
	isSet bool
}

func (v NullableEngagementPresetsPrefetch) Get() *EngagementPresetsPrefetch {
	return v.value
}

func (v *NullableEngagementPresetsPrefetch) Set(val *EngagementPresetsPrefetch) {
	v.value = val
	v.isSet = true
}

func (v NullableEngagementPresetsPrefetch) IsSet() bool {
	return v.isSet
}

func (v *NullableEngagementPresetsPrefetch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEngagementPresetsPrefetch(val *EngagementPresetsPrefetch) *NullableEngagementPresetsPrefetch {
	return &NullableEngagementPresetsPrefetch{value: val, isSet: true}
}

func (v NullableEngagementPresetsPrefetch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEngagementPresetsPrefetch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


