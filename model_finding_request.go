/*
Defect Dojo API v2

Defect Dojo - Open Source vulnerability Management made easy. Prefetch related parameters/responses not yet in the schema.

API version: 2.38.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package defectdojo

import (
	"encoding/json"
	"fmt"
)

// checks if the FindingRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FindingRequest{}

// FindingRequest struct for FindingRequest
type FindingRequest struct {
	Tags []string `json:"tags,omitempty"`
	PushToJira *bool `json:"push_to_jira,omitempty"`
	VulnerabilityIds []VulnerabilityIdRequest `json:"vulnerability_ids,omitempty"`
	Reporter *int32 `json:"reporter,omitempty"`
	// A short description of the flaw.
	Title string `json:"title"`
	// The date the flaw was discovered.
	Date *string `json:"date,omitempty"`
	// (readonly)The date used as start date for SLA calculation. Set by expiring risk acceptances. Empty by default, causing a fallback to 'date'.
	SlaStartDate NullableString `json:"sla_start_date,omitempty"`
	// (readonly)The date SLA expires for this finding. Empty by default, causing a fallback to 'date'.
	SlaExpirationDate NullableString `json:"sla_expiration_date,omitempty"`
	// The CWE number associated with this flaw.
	Cwe NullableInt32 `json:"cwe,omitempty"`
	// EPSS score for the CVE. Describes how likely it is the vulnerability will be exploited in the next 30 days.
	EpssScore NullableFloat64 `json:"epss_score,omitempty"`
	// EPSS percentile for the CVE. Describes how many CVEs are scored at or below this one.
	EpssPercentile NullableFloat64 `json:"epss_percentile,omitempty"`
	// Common Vulnerability Scoring System version 3 (CVSSv3) score associated with this flaw.
	Cvssv3 NullableString `json:"cvssv3,omitempty" validate:"regexp=^AV:[NALP]|AC:[LH]|PR:[UNLH]|UI:[NR]|S:[UC]|[CIA]:[NLH]"`
	// Numerical CVSSv3 score for the vulnerability. If the vector is given, the score is updated while saving the finding. The value must be between 0-10.
	Cvssv3Score NullableFloat64 `json:"cvssv3_score,omitempty"`
	// The severity level of this flaw (Critical, High, Medium, Low, Info).
	Severity string `json:"severity"`
	// Longer more descriptive information about the flaw.
	Description string `json:"description"`
	// Text describing how to best fix the flaw.
	Mitigation NullableString `json:"mitigation,omitempty"`
	// Text describing the impact this flaw has on systems, products, enterprise, etc.
	Impact NullableString `json:"impact,omitempty"`
	// Text describing the steps that must be followed in order to reproduce the flaw / bug.
	StepsToReproduce NullableString `json:"steps_to_reproduce,omitempty"`
	// Text describing why a certain severity was associated with this flaw.
	SeverityJustification NullableString `json:"severity_justification,omitempty"`
	// The external documentation available for this flaw.
	References NullableString `json:"references,omitempty"`
	// Denotes if this flaw is active or not.
	Active *bool `json:"active,omitempty"`
	// Denotes if this flaw has been manually verified by the tester.
	Verified *bool `json:"verified,omitempty"`
	// Denotes if this flaw has been deemed a false positive by the tester.
	FalseP *bool `json:"false_p,omitempty"`
	// Denotes if this flaw is a duplicate of other flaws reported.
	Duplicate *bool `json:"duplicate,omitempty"`
	// Denotes if this flaw falls outside the scope of the test and/or engagement.
	OutOfScope *bool `json:"out_of_scope,omitempty"`
	// Denotes if this finding has been marked as an accepted risk.
	RiskAccepted *bool `json:"risk_accepted,omitempty"`
	// Denotes is this flaw is currently being reviewed.
	UnderReview *bool `json:"under_review,omitempty"`
	// Denotes if this finding is under defect review.
	UnderDefectReview *bool `json:"under_defect_review,omitempty"`
	// Denotes if this flaw has been fixed.
	IsMitigated *bool `json:"is_mitigated,omitempty"`
	// The numerical representation of the severity (S0, S1, S2, S3, S4).
	NumericalSeverity string `json:"numerical_severity"`
	// Source line number of the attack vector.
	Line NullableInt32 `json:"line,omitempty"`
	// Identified file(s) containing the flaw.
	FilePath NullableString `json:"file_path,omitempty"`
	// Name of the affected component (library name, part of a system, ...).
	ComponentName NullableString `json:"component_name,omitempty"`
	// Version of the affected component.
	ComponentVersion NullableString `json:"component_version,omitempty"`
	// Flaw has been detected from a Static Application Security Testing tool (SAST).
	StaticFinding *bool `json:"static_finding,omitempty"`
	// Flaw has been detected from a Dynamic Application Security Testing tool (DAST).
	DynamicFinding *bool `json:"dynamic_finding,omitempty"`
	// Vulnerability technical id from the source tool. Allows to track unique vulnerabilities.
	UniqueIdFromTool NullableString `json:"unique_id_from_tool,omitempty"`
	// Non-unique technical id from the source tool associated with the vulnerability type.
	VulnIdFromTool NullableString `json:"vuln_id_from_tool,omitempty"`
	// Source object (variable, function...) of the attack vector.
	SastSourceObject NullableString `json:"sast_source_object,omitempty"`
	// Sink object (variable, function...) of the attack vector.
	SastSinkObject NullableString `json:"sast_sink_object,omitempty"`
	// Source line number of the attack vector.
	SastSourceLine NullableInt32 `json:"sast_source_line,omitempty"`
	// Source file path of the attack vector.
	SastSourceFilePath NullableString `json:"sast_source_file_path,omitempty"`
	// Number of occurences in the source tool when several vulnerabilites were found and aggregated by the scanner.
	NbOccurences NullableInt32 `json:"nb_occurences,omitempty"`
	// Date when this vulnerability was made publicly available.
	PublishDate NullableString `json:"publish_date,omitempty"`
	// A service is a self-contained piece of functionality within a Product. This is an optional field which is used in deduplication of findings when set.
	Service NullableString `json:"service,omitempty"`
	// The date the flaw is expected to be remediated.
	PlannedRemediationDate NullableString `json:"planned_remediation_date,omitempty"`
	// The target version when the vulnerability should be fixed / remediated
	PlannedRemediationVersion NullableString `json:"planned_remediation_version,omitempty"`
	// Effort for fixing / remediating the vulnerability (Low, Medium, High)
	EffortForFixing NullableString `json:"effort_for_fixing,omitempty"`
	// Documents who requested a review for this finding.
	ReviewRequestedBy NullableInt32 `json:"review_requested_by,omitempty"`
	// Documents who requested a defect review for this flaw.
	DefectReviewRequestedBy NullableInt32 `json:"defect_review_requested_by,omitempty"`
	// The SonarQube issue associated with this finding.
	SonarqubeIssue NullableInt32 `json:"sonarqube_issue,omitempty"`
	// Documents who reviewed the flaw.
	Reviewers []int32 `json:"reviewers,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _FindingRequest FindingRequest

// NewFindingRequest instantiates a new FindingRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFindingRequest(title string, severity string, description string, numericalSeverity string) *FindingRequest {
	this := FindingRequest{}
	var pushToJira bool = false
	this.PushToJira = &pushToJira
	this.Title = title
	this.Severity = severity
	this.Description = description
	this.NumericalSeverity = numericalSeverity
	return &this
}

// NewFindingRequestWithDefaults instantiates a new FindingRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFindingRequestWithDefaults() *FindingRequest {
	this := FindingRequest{}
	var pushToJira bool = false
	this.PushToJira = &pushToJira
	return &this
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *FindingRequest) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FindingRequest) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *FindingRequest) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *FindingRequest) SetTags(v []string) {
	o.Tags = v
}

// GetPushToJira returns the PushToJira field value if set, zero value otherwise.
func (o *FindingRequest) GetPushToJira() bool {
	if o == nil || IsNil(o.PushToJira) {
		var ret bool
		return ret
	}
	return *o.PushToJira
}

// GetPushToJiraOk returns a tuple with the PushToJira field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FindingRequest) GetPushToJiraOk() (*bool, bool) {
	if o == nil || IsNil(o.PushToJira) {
		return nil, false
	}
	return o.PushToJira, true
}

// HasPushToJira returns a boolean if a field has been set.
func (o *FindingRequest) HasPushToJira() bool {
	if o != nil && !IsNil(o.PushToJira) {
		return true
	}

	return false
}

// SetPushToJira gets a reference to the given bool and assigns it to the PushToJira field.
func (o *FindingRequest) SetPushToJira(v bool) {
	o.PushToJira = &v
}

// GetVulnerabilityIds returns the VulnerabilityIds field value if set, zero value otherwise.
func (o *FindingRequest) GetVulnerabilityIds() []VulnerabilityIdRequest {
	if o == nil || IsNil(o.VulnerabilityIds) {
		var ret []VulnerabilityIdRequest
		return ret
	}
	return o.VulnerabilityIds
}

// GetVulnerabilityIdsOk returns a tuple with the VulnerabilityIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FindingRequest) GetVulnerabilityIdsOk() ([]VulnerabilityIdRequest, bool) {
	if o == nil || IsNil(o.VulnerabilityIds) {
		return nil, false
	}
	return o.VulnerabilityIds, true
}

// HasVulnerabilityIds returns a boolean if a field has been set.
func (o *FindingRequest) HasVulnerabilityIds() bool {
	if o != nil && !IsNil(o.VulnerabilityIds) {
		return true
	}

	return false
}

// SetVulnerabilityIds gets a reference to the given []VulnerabilityIdRequest and assigns it to the VulnerabilityIds field.
func (o *FindingRequest) SetVulnerabilityIds(v []VulnerabilityIdRequest) {
	o.VulnerabilityIds = v
}

// GetReporter returns the Reporter field value if set, zero value otherwise.
func (o *FindingRequest) GetReporter() int32 {
	if o == nil || IsNil(o.Reporter) {
		var ret int32
		return ret
	}
	return *o.Reporter
}

// GetReporterOk returns a tuple with the Reporter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FindingRequest) GetReporterOk() (*int32, bool) {
	if o == nil || IsNil(o.Reporter) {
		return nil, false
	}
	return o.Reporter, true
}

// HasReporter returns a boolean if a field has been set.
func (o *FindingRequest) HasReporter() bool {
	if o != nil && !IsNil(o.Reporter) {
		return true
	}

	return false
}

// SetReporter gets a reference to the given int32 and assigns it to the Reporter field.
func (o *FindingRequest) SetReporter(v int32) {
	o.Reporter = &v
}

// GetTitle returns the Title field value
func (o *FindingRequest) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *FindingRequest) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *FindingRequest) SetTitle(v string) {
	o.Title = v
}


// GetDate returns the Date field value if set, zero value otherwise.
func (o *FindingRequest) GetDate() string {
	if o == nil || IsNil(o.Date) {
		var ret string
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FindingRequest) GetDateOk() (*string, bool) {
	if o == nil || IsNil(o.Date) {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *FindingRequest) HasDate() bool {
	if o != nil && !IsNil(o.Date) {
		return true
	}

	return false
}

// SetDate gets a reference to the given string and assigns it to the Date field.
func (o *FindingRequest) SetDate(v string) {
	o.Date = &v
}

// GetSlaStartDate returns the SlaStartDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FindingRequest) GetSlaStartDate() string {
	if o == nil || IsNil(o.SlaStartDate.Get()) {
		var ret string
		return ret
	}
	return *o.SlaStartDate.Get()
}

// GetSlaStartDateOk returns a tuple with the SlaStartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FindingRequest) GetSlaStartDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SlaStartDate.Get(), o.SlaStartDate.IsSet()
}

// HasSlaStartDate returns a boolean if a field has been set.
func (o *FindingRequest) HasSlaStartDate() bool {
	if o != nil && o.SlaStartDate.IsSet() {
		return true
	}

	return false
}

// SetSlaStartDate gets a reference to the given NullableString and assigns it to the SlaStartDate field.
func (o *FindingRequest) SetSlaStartDate(v string) {
	o.SlaStartDate.Set(&v)
}
// SetSlaStartDateNil sets the value for SlaStartDate to be an explicit nil
func (o *FindingRequest) SetSlaStartDateNil() {
	o.SlaStartDate.Set(nil)
}

// UnsetSlaStartDate ensures that no value is present for SlaStartDate, not even an explicit nil
func (o *FindingRequest) UnsetSlaStartDate() {
	o.SlaStartDate.Unset()
}

// GetSlaExpirationDate returns the SlaExpirationDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FindingRequest) GetSlaExpirationDate() string {
	if o == nil || IsNil(o.SlaExpirationDate.Get()) {
		var ret string
		return ret
	}
	return *o.SlaExpirationDate.Get()
}

// GetSlaExpirationDateOk returns a tuple with the SlaExpirationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FindingRequest) GetSlaExpirationDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SlaExpirationDate.Get(), o.SlaExpirationDate.IsSet()
}

// HasSlaExpirationDate returns a boolean if a field has been set.
func (o *FindingRequest) HasSlaExpirationDate() bool {
	if o != nil && o.SlaExpirationDate.IsSet() {
		return true
	}

	return false
}

// SetSlaExpirationDate gets a reference to the given NullableString and assigns it to the SlaExpirationDate field.
func (o *FindingRequest) SetSlaExpirationDate(v string) {
	o.SlaExpirationDate.Set(&v)
}
// SetSlaExpirationDateNil sets the value for SlaExpirationDate to be an explicit nil
func (o *FindingRequest) SetSlaExpirationDateNil() {
	o.SlaExpirationDate.Set(nil)
}

// UnsetSlaExpirationDate ensures that no value is present for SlaExpirationDate, not even an explicit nil
func (o *FindingRequest) UnsetSlaExpirationDate() {
	o.SlaExpirationDate.Unset()
}

// GetCwe returns the Cwe field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FindingRequest) GetCwe() int32 {
	if o == nil || IsNil(o.Cwe.Get()) {
		var ret int32
		return ret
	}
	return *o.Cwe.Get()
}

// GetCweOk returns a tuple with the Cwe field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FindingRequest) GetCweOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Cwe.Get(), o.Cwe.IsSet()
}

// HasCwe returns a boolean if a field has been set.
func (o *FindingRequest) HasCwe() bool {
	if o != nil && o.Cwe.IsSet() {
		return true
	}

	return false
}

// SetCwe gets a reference to the given NullableInt32 and assigns it to the Cwe field.
func (o *FindingRequest) SetCwe(v int32) {
	o.Cwe.Set(&v)
}
// SetCweNil sets the value for Cwe to be an explicit nil
func (o *FindingRequest) SetCweNil() {
	o.Cwe.Set(nil)
}

// UnsetCwe ensures that no value is present for Cwe, not even an explicit nil
func (o *FindingRequest) UnsetCwe() {
	o.Cwe.Unset()
}

// GetEpssScore returns the EpssScore field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FindingRequest) GetEpssScore() float64 {
	if o == nil || IsNil(o.EpssScore.Get()) {
		var ret float64
		return ret
	}
	return *o.EpssScore.Get()
}

// GetEpssScoreOk returns a tuple with the EpssScore field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FindingRequest) GetEpssScoreOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.EpssScore.Get(), o.EpssScore.IsSet()
}

// HasEpssScore returns a boolean if a field has been set.
func (o *FindingRequest) HasEpssScore() bool {
	if o != nil && o.EpssScore.IsSet() {
		return true
	}

	return false
}

// SetEpssScore gets a reference to the given NullableFloat64 and assigns it to the EpssScore field.
func (o *FindingRequest) SetEpssScore(v float64) {
	o.EpssScore.Set(&v)
}
// SetEpssScoreNil sets the value for EpssScore to be an explicit nil
func (o *FindingRequest) SetEpssScoreNil() {
	o.EpssScore.Set(nil)
}

// UnsetEpssScore ensures that no value is present for EpssScore, not even an explicit nil
func (o *FindingRequest) UnsetEpssScore() {
	o.EpssScore.Unset()
}

// GetEpssPercentile returns the EpssPercentile field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FindingRequest) GetEpssPercentile() float64 {
	if o == nil || IsNil(o.EpssPercentile.Get()) {
		var ret float64
		return ret
	}
	return *o.EpssPercentile.Get()
}

// GetEpssPercentileOk returns a tuple with the EpssPercentile field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FindingRequest) GetEpssPercentileOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.EpssPercentile.Get(), o.EpssPercentile.IsSet()
}

// HasEpssPercentile returns a boolean if a field has been set.
func (o *FindingRequest) HasEpssPercentile() bool {
	if o != nil && o.EpssPercentile.IsSet() {
		return true
	}

	return false
}

// SetEpssPercentile gets a reference to the given NullableFloat64 and assigns it to the EpssPercentile field.
func (o *FindingRequest) SetEpssPercentile(v float64) {
	o.EpssPercentile.Set(&v)
}
// SetEpssPercentileNil sets the value for EpssPercentile to be an explicit nil
func (o *FindingRequest) SetEpssPercentileNil() {
	o.EpssPercentile.Set(nil)
}

// UnsetEpssPercentile ensures that no value is present for EpssPercentile, not even an explicit nil
func (o *FindingRequest) UnsetEpssPercentile() {
	o.EpssPercentile.Unset()
}

// GetCvssv3 returns the Cvssv3 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FindingRequest) GetCvssv3() string {
	if o == nil || IsNil(o.Cvssv3.Get()) {
		var ret string
		return ret
	}
	return *o.Cvssv3.Get()
}

// GetCvssv3Ok returns a tuple with the Cvssv3 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FindingRequest) GetCvssv3Ok() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Cvssv3.Get(), o.Cvssv3.IsSet()
}

// HasCvssv3 returns a boolean if a field has been set.
func (o *FindingRequest) HasCvssv3() bool {
	if o != nil && o.Cvssv3.IsSet() {
		return true
	}

	return false
}

// SetCvssv3 gets a reference to the given NullableString and assigns it to the Cvssv3 field.
func (o *FindingRequest) SetCvssv3(v string) {
	o.Cvssv3.Set(&v)
}
// SetCvssv3Nil sets the value for Cvssv3 to be an explicit nil
func (o *FindingRequest) SetCvssv3Nil() {
	o.Cvssv3.Set(nil)
}

// UnsetCvssv3 ensures that no value is present for Cvssv3, not even an explicit nil
func (o *FindingRequest) UnsetCvssv3() {
	o.Cvssv3.Unset()
}

// GetCvssv3Score returns the Cvssv3Score field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FindingRequest) GetCvssv3Score() float64 {
	if o == nil || IsNil(o.Cvssv3Score.Get()) {
		var ret float64
		return ret
	}
	return *o.Cvssv3Score.Get()
}

// GetCvssv3ScoreOk returns a tuple with the Cvssv3Score field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FindingRequest) GetCvssv3ScoreOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Cvssv3Score.Get(), o.Cvssv3Score.IsSet()
}

// HasCvssv3Score returns a boolean if a field has been set.
func (o *FindingRequest) HasCvssv3Score() bool {
	if o != nil && o.Cvssv3Score.IsSet() {
		return true
	}

	return false
}

// SetCvssv3Score gets a reference to the given NullableFloat64 and assigns it to the Cvssv3Score field.
func (o *FindingRequest) SetCvssv3Score(v float64) {
	o.Cvssv3Score.Set(&v)
}
// SetCvssv3ScoreNil sets the value for Cvssv3Score to be an explicit nil
func (o *FindingRequest) SetCvssv3ScoreNil() {
	o.Cvssv3Score.Set(nil)
}

// UnsetCvssv3Score ensures that no value is present for Cvssv3Score, not even an explicit nil
func (o *FindingRequest) UnsetCvssv3Score() {
	o.Cvssv3Score.Unset()
}

// GetSeverity returns the Severity field value
func (o *FindingRequest) GetSeverity() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Severity
}

// GetSeverityOk returns a tuple with the Severity field value
// and a boolean to check if the value has been set.
func (o *FindingRequest) GetSeverityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Severity, true
}

// SetSeverity sets field value
func (o *FindingRequest) SetSeverity(v string) {
	o.Severity = v
}


// GetDescription returns the Description field value
func (o *FindingRequest) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *FindingRequest) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *FindingRequest) SetDescription(v string) {
	o.Description = v
}


// GetMitigation returns the Mitigation field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FindingRequest) GetMitigation() string {
	if o == nil || IsNil(o.Mitigation.Get()) {
		var ret string
		return ret
	}
	return *o.Mitigation.Get()
}

// GetMitigationOk returns a tuple with the Mitigation field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FindingRequest) GetMitigationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Mitigation.Get(), o.Mitigation.IsSet()
}

// HasMitigation returns a boolean if a field has been set.
func (o *FindingRequest) HasMitigation() bool {
	if o != nil && o.Mitigation.IsSet() {
		return true
	}

	return false
}

// SetMitigation gets a reference to the given NullableString and assigns it to the Mitigation field.
func (o *FindingRequest) SetMitigation(v string) {
	o.Mitigation.Set(&v)
}
// SetMitigationNil sets the value for Mitigation to be an explicit nil
func (o *FindingRequest) SetMitigationNil() {
	o.Mitigation.Set(nil)
}

// UnsetMitigation ensures that no value is present for Mitigation, not even an explicit nil
func (o *FindingRequest) UnsetMitigation() {
	o.Mitigation.Unset()
}

// GetImpact returns the Impact field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FindingRequest) GetImpact() string {
	if o == nil || IsNil(o.Impact.Get()) {
		var ret string
		return ret
	}
	return *o.Impact.Get()
}

// GetImpactOk returns a tuple with the Impact field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FindingRequest) GetImpactOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Impact.Get(), o.Impact.IsSet()
}

// HasImpact returns a boolean if a field has been set.
func (o *FindingRequest) HasImpact() bool {
	if o != nil && o.Impact.IsSet() {
		return true
	}

	return false
}

// SetImpact gets a reference to the given NullableString and assigns it to the Impact field.
func (o *FindingRequest) SetImpact(v string) {
	o.Impact.Set(&v)
}
// SetImpactNil sets the value for Impact to be an explicit nil
func (o *FindingRequest) SetImpactNil() {
	o.Impact.Set(nil)
}

// UnsetImpact ensures that no value is present for Impact, not even an explicit nil
func (o *FindingRequest) UnsetImpact() {
	o.Impact.Unset()
}

// GetStepsToReproduce returns the StepsToReproduce field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FindingRequest) GetStepsToReproduce() string {
	if o == nil || IsNil(o.StepsToReproduce.Get()) {
		var ret string
		return ret
	}
	return *o.StepsToReproduce.Get()
}

// GetStepsToReproduceOk returns a tuple with the StepsToReproduce field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FindingRequest) GetStepsToReproduceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.StepsToReproduce.Get(), o.StepsToReproduce.IsSet()
}

// HasStepsToReproduce returns a boolean if a field has been set.
func (o *FindingRequest) HasStepsToReproduce() bool {
	if o != nil && o.StepsToReproduce.IsSet() {
		return true
	}

	return false
}

// SetStepsToReproduce gets a reference to the given NullableString and assigns it to the StepsToReproduce field.
func (o *FindingRequest) SetStepsToReproduce(v string) {
	o.StepsToReproduce.Set(&v)
}
// SetStepsToReproduceNil sets the value for StepsToReproduce to be an explicit nil
func (o *FindingRequest) SetStepsToReproduceNil() {
	o.StepsToReproduce.Set(nil)
}

// UnsetStepsToReproduce ensures that no value is present for StepsToReproduce, not even an explicit nil
func (o *FindingRequest) UnsetStepsToReproduce() {
	o.StepsToReproduce.Unset()
}

// GetSeverityJustification returns the SeverityJustification field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FindingRequest) GetSeverityJustification() string {
	if o == nil || IsNil(o.SeverityJustification.Get()) {
		var ret string
		return ret
	}
	return *o.SeverityJustification.Get()
}

// GetSeverityJustificationOk returns a tuple with the SeverityJustification field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FindingRequest) GetSeverityJustificationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SeverityJustification.Get(), o.SeverityJustification.IsSet()
}

// HasSeverityJustification returns a boolean if a field has been set.
func (o *FindingRequest) HasSeverityJustification() bool {
	if o != nil && o.SeverityJustification.IsSet() {
		return true
	}

	return false
}

// SetSeverityJustification gets a reference to the given NullableString and assigns it to the SeverityJustification field.
func (o *FindingRequest) SetSeverityJustification(v string) {
	o.SeverityJustification.Set(&v)
}
// SetSeverityJustificationNil sets the value for SeverityJustification to be an explicit nil
func (o *FindingRequest) SetSeverityJustificationNil() {
	o.SeverityJustification.Set(nil)
}

// UnsetSeverityJustification ensures that no value is present for SeverityJustification, not even an explicit nil
func (o *FindingRequest) UnsetSeverityJustification() {
	o.SeverityJustification.Unset()
}

// GetReferences returns the References field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FindingRequest) GetReferences() string {
	if o == nil || IsNil(o.References.Get()) {
		var ret string
		return ret
	}
	return *o.References.Get()
}

// GetReferencesOk returns a tuple with the References field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FindingRequest) GetReferencesOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.References.Get(), o.References.IsSet()
}

// HasReferences returns a boolean if a field has been set.
func (o *FindingRequest) HasReferences() bool {
	if o != nil && o.References.IsSet() {
		return true
	}

	return false
}

// SetReferences gets a reference to the given NullableString and assigns it to the References field.
func (o *FindingRequest) SetReferences(v string) {
	o.References.Set(&v)
}
// SetReferencesNil sets the value for References to be an explicit nil
func (o *FindingRequest) SetReferencesNil() {
	o.References.Set(nil)
}

// UnsetReferences ensures that no value is present for References, not even an explicit nil
func (o *FindingRequest) UnsetReferences() {
	o.References.Unset()
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *FindingRequest) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FindingRequest) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *FindingRequest) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *FindingRequest) SetActive(v bool) {
	o.Active = &v
}

// GetVerified returns the Verified field value if set, zero value otherwise.
func (o *FindingRequest) GetVerified() bool {
	if o == nil || IsNil(o.Verified) {
		var ret bool
		return ret
	}
	return *o.Verified
}

// GetVerifiedOk returns a tuple with the Verified field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FindingRequest) GetVerifiedOk() (*bool, bool) {
	if o == nil || IsNil(o.Verified) {
		return nil, false
	}
	return o.Verified, true
}

// HasVerified returns a boolean if a field has been set.
func (o *FindingRequest) HasVerified() bool {
	if o != nil && !IsNil(o.Verified) {
		return true
	}

	return false
}

// SetVerified gets a reference to the given bool and assigns it to the Verified field.
func (o *FindingRequest) SetVerified(v bool) {
	o.Verified = &v
}

// GetFalseP returns the FalseP field value if set, zero value otherwise.
func (o *FindingRequest) GetFalseP() bool {
	if o == nil || IsNil(o.FalseP) {
		var ret bool
		return ret
	}
	return *o.FalseP
}

// GetFalsePOk returns a tuple with the FalseP field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FindingRequest) GetFalsePOk() (*bool, bool) {
	if o == nil || IsNil(o.FalseP) {
		return nil, false
	}
	return o.FalseP, true
}

// HasFalseP returns a boolean if a field has been set.
func (o *FindingRequest) HasFalseP() bool {
	if o != nil && !IsNil(o.FalseP) {
		return true
	}

	return false
}

// SetFalseP gets a reference to the given bool and assigns it to the FalseP field.
func (o *FindingRequest) SetFalseP(v bool) {
	o.FalseP = &v
}

// GetDuplicate returns the Duplicate field value if set, zero value otherwise.
func (o *FindingRequest) GetDuplicate() bool {
	if o == nil || IsNil(o.Duplicate) {
		var ret bool
		return ret
	}
	return *o.Duplicate
}

// GetDuplicateOk returns a tuple with the Duplicate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FindingRequest) GetDuplicateOk() (*bool, bool) {
	if o == nil || IsNil(o.Duplicate) {
		return nil, false
	}
	return o.Duplicate, true
}

// HasDuplicate returns a boolean if a field has been set.
func (o *FindingRequest) HasDuplicate() bool {
	if o != nil && !IsNil(o.Duplicate) {
		return true
	}

	return false
}

// SetDuplicate gets a reference to the given bool and assigns it to the Duplicate field.
func (o *FindingRequest) SetDuplicate(v bool) {
	o.Duplicate = &v
}

// GetOutOfScope returns the OutOfScope field value if set, zero value otherwise.
func (o *FindingRequest) GetOutOfScope() bool {
	if o == nil || IsNil(o.OutOfScope) {
		var ret bool
		return ret
	}
	return *o.OutOfScope
}

// GetOutOfScopeOk returns a tuple with the OutOfScope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FindingRequest) GetOutOfScopeOk() (*bool, bool) {
	if o == nil || IsNil(o.OutOfScope) {
		return nil, false
	}
	return o.OutOfScope, true
}

// HasOutOfScope returns a boolean if a field has been set.
func (o *FindingRequest) HasOutOfScope() bool {
	if o != nil && !IsNil(o.OutOfScope) {
		return true
	}

	return false
}

// SetOutOfScope gets a reference to the given bool and assigns it to the OutOfScope field.
func (o *FindingRequest) SetOutOfScope(v bool) {
	o.OutOfScope = &v
}

// GetRiskAccepted returns the RiskAccepted field value if set, zero value otherwise.
func (o *FindingRequest) GetRiskAccepted() bool {
	if o == nil || IsNil(o.RiskAccepted) {
		var ret bool
		return ret
	}
	return *o.RiskAccepted
}

// GetRiskAcceptedOk returns a tuple with the RiskAccepted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FindingRequest) GetRiskAcceptedOk() (*bool, bool) {
	if o == nil || IsNil(o.RiskAccepted) {
		return nil, false
	}
	return o.RiskAccepted, true
}

// HasRiskAccepted returns a boolean if a field has been set.
func (o *FindingRequest) HasRiskAccepted() bool {
	if o != nil && !IsNil(o.RiskAccepted) {
		return true
	}

	return false
}

// SetRiskAccepted gets a reference to the given bool and assigns it to the RiskAccepted field.
func (o *FindingRequest) SetRiskAccepted(v bool) {
	o.RiskAccepted = &v
}

// GetUnderReview returns the UnderReview field value if set, zero value otherwise.
func (o *FindingRequest) GetUnderReview() bool {
	if o == nil || IsNil(o.UnderReview) {
		var ret bool
		return ret
	}
	return *o.UnderReview
}

// GetUnderReviewOk returns a tuple with the UnderReview field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FindingRequest) GetUnderReviewOk() (*bool, bool) {
	if o == nil || IsNil(o.UnderReview) {
		return nil, false
	}
	return o.UnderReview, true
}

// HasUnderReview returns a boolean if a field has been set.
func (o *FindingRequest) HasUnderReview() bool {
	if o != nil && !IsNil(o.UnderReview) {
		return true
	}

	return false
}

// SetUnderReview gets a reference to the given bool and assigns it to the UnderReview field.
func (o *FindingRequest) SetUnderReview(v bool) {
	o.UnderReview = &v
}

// GetUnderDefectReview returns the UnderDefectReview field value if set, zero value otherwise.
func (o *FindingRequest) GetUnderDefectReview() bool {
	if o == nil || IsNil(o.UnderDefectReview) {
		var ret bool
		return ret
	}
	return *o.UnderDefectReview
}

// GetUnderDefectReviewOk returns a tuple with the UnderDefectReview field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FindingRequest) GetUnderDefectReviewOk() (*bool, bool) {
	if o == nil || IsNil(o.UnderDefectReview) {
		return nil, false
	}
	return o.UnderDefectReview, true
}

// HasUnderDefectReview returns a boolean if a field has been set.
func (o *FindingRequest) HasUnderDefectReview() bool {
	if o != nil && !IsNil(o.UnderDefectReview) {
		return true
	}

	return false
}

// SetUnderDefectReview gets a reference to the given bool and assigns it to the UnderDefectReview field.
func (o *FindingRequest) SetUnderDefectReview(v bool) {
	o.UnderDefectReview = &v
}

// GetIsMitigated returns the IsMitigated field value if set, zero value otherwise.
func (o *FindingRequest) GetIsMitigated() bool {
	if o == nil || IsNil(o.IsMitigated) {
		var ret bool
		return ret
	}
	return *o.IsMitigated
}

// GetIsMitigatedOk returns a tuple with the IsMitigated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FindingRequest) GetIsMitigatedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsMitigated) {
		return nil, false
	}
	return o.IsMitigated, true
}

// HasIsMitigated returns a boolean if a field has been set.
func (o *FindingRequest) HasIsMitigated() bool {
	if o != nil && !IsNil(o.IsMitigated) {
		return true
	}

	return false
}

// SetIsMitigated gets a reference to the given bool and assigns it to the IsMitigated field.
func (o *FindingRequest) SetIsMitigated(v bool) {
	o.IsMitigated = &v
}

// GetNumericalSeverity returns the NumericalSeverity field value
func (o *FindingRequest) GetNumericalSeverity() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NumericalSeverity
}

// GetNumericalSeverityOk returns a tuple with the NumericalSeverity field value
// and a boolean to check if the value has been set.
func (o *FindingRequest) GetNumericalSeverityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NumericalSeverity, true
}

// SetNumericalSeverity sets field value
func (o *FindingRequest) SetNumericalSeverity(v string) {
	o.NumericalSeverity = v
}


// GetLine returns the Line field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FindingRequest) GetLine() int32 {
	if o == nil || IsNil(o.Line.Get()) {
		var ret int32
		return ret
	}
	return *o.Line.Get()
}

// GetLineOk returns a tuple with the Line field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FindingRequest) GetLineOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Line.Get(), o.Line.IsSet()
}

// HasLine returns a boolean if a field has been set.
func (o *FindingRequest) HasLine() bool {
	if o != nil && o.Line.IsSet() {
		return true
	}

	return false
}

// SetLine gets a reference to the given NullableInt32 and assigns it to the Line field.
func (o *FindingRequest) SetLine(v int32) {
	o.Line.Set(&v)
}
// SetLineNil sets the value for Line to be an explicit nil
func (o *FindingRequest) SetLineNil() {
	o.Line.Set(nil)
}

// UnsetLine ensures that no value is present for Line, not even an explicit nil
func (o *FindingRequest) UnsetLine() {
	o.Line.Unset()
}

// GetFilePath returns the FilePath field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FindingRequest) GetFilePath() string {
	if o == nil || IsNil(o.FilePath.Get()) {
		var ret string
		return ret
	}
	return *o.FilePath.Get()
}

// GetFilePathOk returns a tuple with the FilePath field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FindingRequest) GetFilePathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FilePath.Get(), o.FilePath.IsSet()
}

// HasFilePath returns a boolean if a field has been set.
func (o *FindingRequest) HasFilePath() bool {
	if o != nil && o.FilePath.IsSet() {
		return true
	}

	return false
}

// SetFilePath gets a reference to the given NullableString and assigns it to the FilePath field.
func (o *FindingRequest) SetFilePath(v string) {
	o.FilePath.Set(&v)
}
// SetFilePathNil sets the value for FilePath to be an explicit nil
func (o *FindingRequest) SetFilePathNil() {
	o.FilePath.Set(nil)
}

// UnsetFilePath ensures that no value is present for FilePath, not even an explicit nil
func (o *FindingRequest) UnsetFilePath() {
	o.FilePath.Unset()
}

// GetComponentName returns the ComponentName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FindingRequest) GetComponentName() string {
	if o == nil || IsNil(o.ComponentName.Get()) {
		var ret string
		return ret
	}
	return *o.ComponentName.Get()
}

// GetComponentNameOk returns a tuple with the ComponentName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FindingRequest) GetComponentNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ComponentName.Get(), o.ComponentName.IsSet()
}

// HasComponentName returns a boolean if a field has been set.
func (o *FindingRequest) HasComponentName() bool {
	if o != nil && o.ComponentName.IsSet() {
		return true
	}

	return false
}

// SetComponentName gets a reference to the given NullableString and assigns it to the ComponentName field.
func (o *FindingRequest) SetComponentName(v string) {
	o.ComponentName.Set(&v)
}
// SetComponentNameNil sets the value for ComponentName to be an explicit nil
func (o *FindingRequest) SetComponentNameNil() {
	o.ComponentName.Set(nil)
}

// UnsetComponentName ensures that no value is present for ComponentName, not even an explicit nil
func (o *FindingRequest) UnsetComponentName() {
	o.ComponentName.Unset()
}

// GetComponentVersion returns the ComponentVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FindingRequest) GetComponentVersion() string {
	if o == nil || IsNil(o.ComponentVersion.Get()) {
		var ret string
		return ret
	}
	return *o.ComponentVersion.Get()
}

// GetComponentVersionOk returns a tuple with the ComponentVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FindingRequest) GetComponentVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ComponentVersion.Get(), o.ComponentVersion.IsSet()
}

// HasComponentVersion returns a boolean if a field has been set.
func (o *FindingRequest) HasComponentVersion() bool {
	if o != nil && o.ComponentVersion.IsSet() {
		return true
	}

	return false
}

// SetComponentVersion gets a reference to the given NullableString and assigns it to the ComponentVersion field.
func (o *FindingRequest) SetComponentVersion(v string) {
	o.ComponentVersion.Set(&v)
}
// SetComponentVersionNil sets the value for ComponentVersion to be an explicit nil
func (o *FindingRequest) SetComponentVersionNil() {
	o.ComponentVersion.Set(nil)
}

// UnsetComponentVersion ensures that no value is present for ComponentVersion, not even an explicit nil
func (o *FindingRequest) UnsetComponentVersion() {
	o.ComponentVersion.Unset()
}

// GetStaticFinding returns the StaticFinding field value if set, zero value otherwise.
func (o *FindingRequest) GetStaticFinding() bool {
	if o == nil || IsNil(o.StaticFinding) {
		var ret bool
		return ret
	}
	return *o.StaticFinding
}

// GetStaticFindingOk returns a tuple with the StaticFinding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FindingRequest) GetStaticFindingOk() (*bool, bool) {
	if o == nil || IsNil(o.StaticFinding) {
		return nil, false
	}
	return o.StaticFinding, true
}

// HasStaticFinding returns a boolean if a field has been set.
func (o *FindingRequest) HasStaticFinding() bool {
	if o != nil && !IsNil(o.StaticFinding) {
		return true
	}

	return false
}

// SetStaticFinding gets a reference to the given bool and assigns it to the StaticFinding field.
func (o *FindingRequest) SetStaticFinding(v bool) {
	o.StaticFinding = &v
}

// GetDynamicFinding returns the DynamicFinding field value if set, zero value otherwise.
func (o *FindingRequest) GetDynamicFinding() bool {
	if o == nil || IsNil(o.DynamicFinding) {
		var ret bool
		return ret
	}
	return *o.DynamicFinding
}

// GetDynamicFindingOk returns a tuple with the DynamicFinding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FindingRequest) GetDynamicFindingOk() (*bool, bool) {
	if o == nil || IsNil(o.DynamicFinding) {
		return nil, false
	}
	return o.DynamicFinding, true
}

// HasDynamicFinding returns a boolean if a field has been set.
func (o *FindingRequest) HasDynamicFinding() bool {
	if o != nil && !IsNil(o.DynamicFinding) {
		return true
	}

	return false
}

// SetDynamicFinding gets a reference to the given bool and assigns it to the DynamicFinding field.
func (o *FindingRequest) SetDynamicFinding(v bool) {
	o.DynamicFinding = &v
}

// GetUniqueIdFromTool returns the UniqueIdFromTool field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FindingRequest) GetUniqueIdFromTool() string {
	if o == nil || IsNil(o.UniqueIdFromTool.Get()) {
		var ret string
		return ret
	}
	return *o.UniqueIdFromTool.Get()
}

// GetUniqueIdFromToolOk returns a tuple with the UniqueIdFromTool field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FindingRequest) GetUniqueIdFromToolOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.UniqueIdFromTool.Get(), o.UniqueIdFromTool.IsSet()
}

// HasUniqueIdFromTool returns a boolean if a field has been set.
func (o *FindingRequest) HasUniqueIdFromTool() bool {
	if o != nil && o.UniqueIdFromTool.IsSet() {
		return true
	}

	return false
}

// SetUniqueIdFromTool gets a reference to the given NullableString and assigns it to the UniqueIdFromTool field.
func (o *FindingRequest) SetUniqueIdFromTool(v string) {
	o.UniqueIdFromTool.Set(&v)
}
// SetUniqueIdFromToolNil sets the value for UniqueIdFromTool to be an explicit nil
func (o *FindingRequest) SetUniqueIdFromToolNil() {
	o.UniqueIdFromTool.Set(nil)
}

// UnsetUniqueIdFromTool ensures that no value is present for UniqueIdFromTool, not even an explicit nil
func (o *FindingRequest) UnsetUniqueIdFromTool() {
	o.UniqueIdFromTool.Unset()
}

// GetVulnIdFromTool returns the VulnIdFromTool field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FindingRequest) GetVulnIdFromTool() string {
	if o == nil || IsNil(o.VulnIdFromTool.Get()) {
		var ret string
		return ret
	}
	return *o.VulnIdFromTool.Get()
}

// GetVulnIdFromToolOk returns a tuple with the VulnIdFromTool field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FindingRequest) GetVulnIdFromToolOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.VulnIdFromTool.Get(), o.VulnIdFromTool.IsSet()
}

// HasVulnIdFromTool returns a boolean if a field has been set.
func (o *FindingRequest) HasVulnIdFromTool() bool {
	if o != nil && o.VulnIdFromTool.IsSet() {
		return true
	}

	return false
}

// SetVulnIdFromTool gets a reference to the given NullableString and assigns it to the VulnIdFromTool field.
func (o *FindingRequest) SetVulnIdFromTool(v string) {
	o.VulnIdFromTool.Set(&v)
}
// SetVulnIdFromToolNil sets the value for VulnIdFromTool to be an explicit nil
func (o *FindingRequest) SetVulnIdFromToolNil() {
	o.VulnIdFromTool.Set(nil)
}

// UnsetVulnIdFromTool ensures that no value is present for VulnIdFromTool, not even an explicit nil
func (o *FindingRequest) UnsetVulnIdFromTool() {
	o.VulnIdFromTool.Unset()
}

// GetSastSourceObject returns the SastSourceObject field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FindingRequest) GetSastSourceObject() string {
	if o == nil || IsNil(o.SastSourceObject.Get()) {
		var ret string
		return ret
	}
	return *o.SastSourceObject.Get()
}

// GetSastSourceObjectOk returns a tuple with the SastSourceObject field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FindingRequest) GetSastSourceObjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SastSourceObject.Get(), o.SastSourceObject.IsSet()
}

// HasSastSourceObject returns a boolean if a field has been set.
func (o *FindingRequest) HasSastSourceObject() bool {
	if o != nil && o.SastSourceObject.IsSet() {
		return true
	}

	return false
}

// SetSastSourceObject gets a reference to the given NullableString and assigns it to the SastSourceObject field.
func (o *FindingRequest) SetSastSourceObject(v string) {
	o.SastSourceObject.Set(&v)
}
// SetSastSourceObjectNil sets the value for SastSourceObject to be an explicit nil
func (o *FindingRequest) SetSastSourceObjectNil() {
	o.SastSourceObject.Set(nil)
}

// UnsetSastSourceObject ensures that no value is present for SastSourceObject, not even an explicit nil
func (o *FindingRequest) UnsetSastSourceObject() {
	o.SastSourceObject.Unset()
}

// GetSastSinkObject returns the SastSinkObject field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FindingRequest) GetSastSinkObject() string {
	if o == nil || IsNil(o.SastSinkObject.Get()) {
		var ret string
		return ret
	}
	return *o.SastSinkObject.Get()
}

// GetSastSinkObjectOk returns a tuple with the SastSinkObject field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FindingRequest) GetSastSinkObjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SastSinkObject.Get(), o.SastSinkObject.IsSet()
}

// HasSastSinkObject returns a boolean if a field has been set.
func (o *FindingRequest) HasSastSinkObject() bool {
	if o != nil && o.SastSinkObject.IsSet() {
		return true
	}

	return false
}

// SetSastSinkObject gets a reference to the given NullableString and assigns it to the SastSinkObject field.
func (o *FindingRequest) SetSastSinkObject(v string) {
	o.SastSinkObject.Set(&v)
}
// SetSastSinkObjectNil sets the value for SastSinkObject to be an explicit nil
func (o *FindingRequest) SetSastSinkObjectNil() {
	o.SastSinkObject.Set(nil)
}

// UnsetSastSinkObject ensures that no value is present for SastSinkObject, not even an explicit nil
func (o *FindingRequest) UnsetSastSinkObject() {
	o.SastSinkObject.Unset()
}

// GetSastSourceLine returns the SastSourceLine field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FindingRequest) GetSastSourceLine() int32 {
	if o == nil || IsNil(o.SastSourceLine.Get()) {
		var ret int32
		return ret
	}
	return *o.SastSourceLine.Get()
}

// GetSastSourceLineOk returns a tuple with the SastSourceLine field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FindingRequest) GetSastSourceLineOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.SastSourceLine.Get(), o.SastSourceLine.IsSet()
}

// HasSastSourceLine returns a boolean if a field has been set.
func (o *FindingRequest) HasSastSourceLine() bool {
	if o != nil && o.SastSourceLine.IsSet() {
		return true
	}

	return false
}

// SetSastSourceLine gets a reference to the given NullableInt32 and assigns it to the SastSourceLine field.
func (o *FindingRequest) SetSastSourceLine(v int32) {
	o.SastSourceLine.Set(&v)
}
// SetSastSourceLineNil sets the value for SastSourceLine to be an explicit nil
func (o *FindingRequest) SetSastSourceLineNil() {
	o.SastSourceLine.Set(nil)
}

// UnsetSastSourceLine ensures that no value is present for SastSourceLine, not even an explicit nil
func (o *FindingRequest) UnsetSastSourceLine() {
	o.SastSourceLine.Unset()
}

// GetSastSourceFilePath returns the SastSourceFilePath field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FindingRequest) GetSastSourceFilePath() string {
	if o == nil || IsNil(o.SastSourceFilePath.Get()) {
		var ret string
		return ret
	}
	return *o.SastSourceFilePath.Get()
}

// GetSastSourceFilePathOk returns a tuple with the SastSourceFilePath field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FindingRequest) GetSastSourceFilePathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SastSourceFilePath.Get(), o.SastSourceFilePath.IsSet()
}

// HasSastSourceFilePath returns a boolean if a field has been set.
func (o *FindingRequest) HasSastSourceFilePath() bool {
	if o != nil && o.SastSourceFilePath.IsSet() {
		return true
	}

	return false
}

// SetSastSourceFilePath gets a reference to the given NullableString and assigns it to the SastSourceFilePath field.
func (o *FindingRequest) SetSastSourceFilePath(v string) {
	o.SastSourceFilePath.Set(&v)
}
// SetSastSourceFilePathNil sets the value for SastSourceFilePath to be an explicit nil
func (o *FindingRequest) SetSastSourceFilePathNil() {
	o.SastSourceFilePath.Set(nil)
}

// UnsetSastSourceFilePath ensures that no value is present for SastSourceFilePath, not even an explicit nil
func (o *FindingRequest) UnsetSastSourceFilePath() {
	o.SastSourceFilePath.Unset()
}

// GetNbOccurences returns the NbOccurences field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FindingRequest) GetNbOccurences() int32 {
	if o == nil || IsNil(o.NbOccurences.Get()) {
		var ret int32
		return ret
	}
	return *o.NbOccurences.Get()
}

// GetNbOccurencesOk returns a tuple with the NbOccurences field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FindingRequest) GetNbOccurencesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.NbOccurences.Get(), o.NbOccurences.IsSet()
}

// HasNbOccurences returns a boolean if a field has been set.
func (o *FindingRequest) HasNbOccurences() bool {
	if o != nil && o.NbOccurences.IsSet() {
		return true
	}

	return false
}

// SetNbOccurences gets a reference to the given NullableInt32 and assigns it to the NbOccurences field.
func (o *FindingRequest) SetNbOccurences(v int32) {
	o.NbOccurences.Set(&v)
}
// SetNbOccurencesNil sets the value for NbOccurences to be an explicit nil
func (o *FindingRequest) SetNbOccurencesNil() {
	o.NbOccurences.Set(nil)
}

// UnsetNbOccurences ensures that no value is present for NbOccurences, not even an explicit nil
func (o *FindingRequest) UnsetNbOccurences() {
	o.NbOccurences.Unset()
}

// GetPublishDate returns the PublishDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FindingRequest) GetPublishDate() string {
	if o == nil || IsNil(o.PublishDate.Get()) {
		var ret string
		return ret
	}
	return *o.PublishDate.Get()
}

// GetPublishDateOk returns a tuple with the PublishDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FindingRequest) GetPublishDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PublishDate.Get(), o.PublishDate.IsSet()
}

// HasPublishDate returns a boolean if a field has been set.
func (o *FindingRequest) HasPublishDate() bool {
	if o != nil && o.PublishDate.IsSet() {
		return true
	}

	return false
}

// SetPublishDate gets a reference to the given NullableString and assigns it to the PublishDate field.
func (o *FindingRequest) SetPublishDate(v string) {
	o.PublishDate.Set(&v)
}
// SetPublishDateNil sets the value for PublishDate to be an explicit nil
func (o *FindingRequest) SetPublishDateNil() {
	o.PublishDate.Set(nil)
}

// UnsetPublishDate ensures that no value is present for PublishDate, not even an explicit nil
func (o *FindingRequest) UnsetPublishDate() {
	o.PublishDate.Unset()
}

// GetService returns the Service field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FindingRequest) GetService() string {
	if o == nil || IsNil(o.Service.Get()) {
		var ret string
		return ret
	}
	return *o.Service.Get()
}

// GetServiceOk returns a tuple with the Service field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FindingRequest) GetServiceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Service.Get(), o.Service.IsSet()
}

// HasService returns a boolean if a field has been set.
func (o *FindingRequest) HasService() bool {
	if o != nil && o.Service.IsSet() {
		return true
	}

	return false
}

// SetService gets a reference to the given NullableString and assigns it to the Service field.
func (o *FindingRequest) SetService(v string) {
	o.Service.Set(&v)
}
// SetServiceNil sets the value for Service to be an explicit nil
func (o *FindingRequest) SetServiceNil() {
	o.Service.Set(nil)
}

// UnsetService ensures that no value is present for Service, not even an explicit nil
func (o *FindingRequest) UnsetService() {
	o.Service.Unset()
}

// GetPlannedRemediationDate returns the PlannedRemediationDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FindingRequest) GetPlannedRemediationDate() string {
	if o == nil || IsNil(o.PlannedRemediationDate.Get()) {
		var ret string
		return ret
	}
	return *o.PlannedRemediationDate.Get()
}

// GetPlannedRemediationDateOk returns a tuple with the PlannedRemediationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FindingRequest) GetPlannedRemediationDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PlannedRemediationDate.Get(), o.PlannedRemediationDate.IsSet()
}

// HasPlannedRemediationDate returns a boolean if a field has been set.
func (o *FindingRequest) HasPlannedRemediationDate() bool {
	if o != nil && o.PlannedRemediationDate.IsSet() {
		return true
	}

	return false
}

// SetPlannedRemediationDate gets a reference to the given NullableString and assigns it to the PlannedRemediationDate field.
func (o *FindingRequest) SetPlannedRemediationDate(v string) {
	o.PlannedRemediationDate.Set(&v)
}
// SetPlannedRemediationDateNil sets the value for PlannedRemediationDate to be an explicit nil
func (o *FindingRequest) SetPlannedRemediationDateNil() {
	o.PlannedRemediationDate.Set(nil)
}

// UnsetPlannedRemediationDate ensures that no value is present for PlannedRemediationDate, not even an explicit nil
func (o *FindingRequest) UnsetPlannedRemediationDate() {
	o.PlannedRemediationDate.Unset()
}

// GetPlannedRemediationVersion returns the PlannedRemediationVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FindingRequest) GetPlannedRemediationVersion() string {
	if o == nil || IsNil(o.PlannedRemediationVersion.Get()) {
		var ret string
		return ret
	}
	return *o.PlannedRemediationVersion.Get()
}

// GetPlannedRemediationVersionOk returns a tuple with the PlannedRemediationVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FindingRequest) GetPlannedRemediationVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PlannedRemediationVersion.Get(), o.PlannedRemediationVersion.IsSet()
}

// HasPlannedRemediationVersion returns a boolean if a field has been set.
func (o *FindingRequest) HasPlannedRemediationVersion() bool {
	if o != nil && o.PlannedRemediationVersion.IsSet() {
		return true
	}

	return false
}

// SetPlannedRemediationVersion gets a reference to the given NullableString and assigns it to the PlannedRemediationVersion field.
func (o *FindingRequest) SetPlannedRemediationVersion(v string) {
	o.PlannedRemediationVersion.Set(&v)
}
// SetPlannedRemediationVersionNil sets the value for PlannedRemediationVersion to be an explicit nil
func (o *FindingRequest) SetPlannedRemediationVersionNil() {
	o.PlannedRemediationVersion.Set(nil)
}

// UnsetPlannedRemediationVersion ensures that no value is present for PlannedRemediationVersion, not even an explicit nil
func (o *FindingRequest) UnsetPlannedRemediationVersion() {
	o.PlannedRemediationVersion.Unset()
}

// GetEffortForFixing returns the EffortForFixing field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FindingRequest) GetEffortForFixing() string {
	if o == nil || IsNil(o.EffortForFixing.Get()) {
		var ret string
		return ret
	}
	return *o.EffortForFixing.Get()
}

// GetEffortForFixingOk returns a tuple with the EffortForFixing field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FindingRequest) GetEffortForFixingOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EffortForFixing.Get(), o.EffortForFixing.IsSet()
}

// HasEffortForFixing returns a boolean if a field has been set.
func (o *FindingRequest) HasEffortForFixing() bool {
	if o != nil && o.EffortForFixing.IsSet() {
		return true
	}

	return false
}

// SetEffortForFixing gets a reference to the given NullableString and assigns it to the EffortForFixing field.
func (o *FindingRequest) SetEffortForFixing(v string) {
	o.EffortForFixing.Set(&v)
}
// SetEffortForFixingNil sets the value for EffortForFixing to be an explicit nil
func (o *FindingRequest) SetEffortForFixingNil() {
	o.EffortForFixing.Set(nil)
}

// UnsetEffortForFixing ensures that no value is present for EffortForFixing, not even an explicit nil
func (o *FindingRequest) UnsetEffortForFixing() {
	o.EffortForFixing.Unset()
}

// GetReviewRequestedBy returns the ReviewRequestedBy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FindingRequest) GetReviewRequestedBy() int32 {
	if o == nil || IsNil(o.ReviewRequestedBy.Get()) {
		var ret int32
		return ret
	}
	return *o.ReviewRequestedBy.Get()
}

// GetReviewRequestedByOk returns a tuple with the ReviewRequestedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FindingRequest) GetReviewRequestedByOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ReviewRequestedBy.Get(), o.ReviewRequestedBy.IsSet()
}

// HasReviewRequestedBy returns a boolean if a field has been set.
func (o *FindingRequest) HasReviewRequestedBy() bool {
	if o != nil && o.ReviewRequestedBy.IsSet() {
		return true
	}

	return false
}

// SetReviewRequestedBy gets a reference to the given NullableInt32 and assigns it to the ReviewRequestedBy field.
func (o *FindingRequest) SetReviewRequestedBy(v int32) {
	o.ReviewRequestedBy.Set(&v)
}
// SetReviewRequestedByNil sets the value for ReviewRequestedBy to be an explicit nil
func (o *FindingRequest) SetReviewRequestedByNil() {
	o.ReviewRequestedBy.Set(nil)
}

// UnsetReviewRequestedBy ensures that no value is present for ReviewRequestedBy, not even an explicit nil
func (o *FindingRequest) UnsetReviewRequestedBy() {
	o.ReviewRequestedBy.Unset()
}

// GetDefectReviewRequestedBy returns the DefectReviewRequestedBy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FindingRequest) GetDefectReviewRequestedBy() int32 {
	if o == nil || IsNil(o.DefectReviewRequestedBy.Get()) {
		var ret int32
		return ret
	}
	return *o.DefectReviewRequestedBy.Get()
}

// GetDefectReviewRequestedByOk returns a tuple with the DefectReviewRequestedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FindingRequest) GetDefectReviewRequestedByOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.DefectReviewRequestedBy.Get(), o.DefectReviewRequestedBy.IsSet()
}

// HasDefectReviewRequestedBy returns a boolean if a field has been set.
func (o *FindingRequest) HasDefectReviewRequestedBy() bool {
	if o != nil && o.DefectReviewRequestedBy.IsSet() {
		return true
	}

	return false
}

// SetDefectReviewRequestedBy gets a reference to the given NullableInt32 and assigns it to the DefectReviewRequestedBy field.
func (o *FindingRequest) SetDefectReviewRequestedBy(v int32) {
	o.DefectReviewRequestedBy.Set(&v)
}
// SetDefectReviewRequestedByNil sets the value for DefectReviewRequestedBy to be an explicit nil
func (o *FindingRequest) SetDefectReviewRequestedByNil() {
	o.DefectReviewRequestedBy.Set(nil)
}

// UnsetDefectReviewRequestedBy ensures that no value is present for DefectReviewRequestedBy, not even an explicit nil
func (o *FindingRequest) UnsetDefectReviewRequestedBy() {
	o.DefectReviewRequestedBy.Unset()
}

// GetSonarqubeIssue returns the SonarqubeIssue field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FindingRequest) GetSonarqubeIssue() int32 {
	if o == nil || IsNil(o.SonarqubeIssue.Get()) {
		var ret int32
		return ret
	}
	return *o.SonarqubeIssue.Get()
}

// GetSonarqubeIssueOk returns a tuple with the SonarqubeIssue field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FindingRequest) GetSonarqubeIssueOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.SonarqubeIssue.Get(), o.SonarqubeIssue.IsSet()
}

// HasSonarqubeIssue returns a boolean if a field has been set.
func (o *FindingRequest) HasSonarqubeIssue() bool {
	if o != nil && o.SonarqubeIssue.IsSet() {
		return true
	}

	return false
}

// SetSonarqubeIssue gets a reference to the given NullableInt32 and assigns it to the SonarqubeIssue field.
func (o *FindingRequest) SetSonarqubeIssue(v int32) {
	o.SonarqubeIssue.Set(&v)
}
// SetSonarqubeIssueNil sets the value for SonarqubeIssue to be an explicit nil
func (o *FindingRequest) SetSonarqubeIssueNil() {
	o.SonarqubeIssue.Set(nil)
}

// UnsetSonarqubeIssue ensures that no value is present for SonarqubeIssue, not even an explicit nil
func (o *FindingRequest) UnsetSonarqubeIssue() {
	o.SonarqubeIssue.Unset()
}

// GetReviewers returns the Reviewers field value if set, zero value otherwise.
func (o *FindingRequest) GetReviewers() []int32 {
	if o == nil || IsNil(o.Reviewers) {
		var ret []int32
		return ret
	}
	return o.Reviewers
}

// GetReviewersOk returns a tuple with the Reviewers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FindingRequest) GetReviewersOk() ([]int32, bool) {
	if o == nil || IsNil(o.Reviewers) {
		return nil, false
	}
	return o.Reviewers, true
}

// HasReviewers returns a boolean if a field has been set.
func (o *FindingRequest) HasReviewers() bool {
	if o != nil && !IsNil(o.Reviewers) {
		return true
	}

	return false
}

// SetReviewers gets a reference to the given []int32 and assigns it to the Reviewers field.
func (o *FindingRequest) SetReviewers(v []int32) {
	o.Reviewers = v
}

func (o FindingRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FindingRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.PushToJira) {
		toSerialize["push_to_jira"] = o.PushToJira
	}
	if !IsNil(o.VulnerabilityIds) {
		toSerialize["vulnerability_ids"] = o.VulnerabilityIds
	}
	if !IsNil(o.Reporter) {
		toSerialize["reporter"] = o.Reporter
	}
	toSerialize["title"] = o.Title
	if !IsNil(o.Date) {
		toSerialize["date"] = o.Date
	}
	if o.SlaStartDate.IsSet() {
		toSerialize["sla_start_date"] = o.SlaStartDate.Get()
	}
	if o.SlaExpirationDate.IsSet() {
		toSerialize["sla_expiration_date"] = o.SlaExpirationDate.Get()
	}
	if o.Cwe.IsSet() {
		toSerialize["cwe"] = o.Cwe.Get()
	}
	if o.EpssScore.IsSet() {
		toSerialize["epss_score"] = o.EpssScore.Get()
	}
	if o.EpssPercentile.IsSet() {
		toSerialize["epss_percentile"] = o.EpssPercentile.Get()
	}
	if o.Cvssv3.IsSet() {
		toSerialize["cvssv3"] = o.Cvssv3.Get()
	}
	if o.Cvssv3Score.IsSet() {
		toSerialize["cvssv3_score"] = o.Cvssv3Score.Get()
	}
	toSerialize["severity"] = o.Severity
	toSerialize["description"] = o.Description
	if o.Mitigation.IsSet() {
		toSerialize["mitigation"] = o.Mitigation.Get()
	}
	if o.Impact.IsSet() {
		toSerialize["impact"] = o.Impact.Get()
	}
	if o.StepsToReproduce.IsSet() {
		toSerialize["steps_to_reproduce"] = o.StepsToReproduce.Get()
	}
	if o.SeverityJustification.IsSet() {
		toSerialize["severity_justification"] = o.SeverityJustification.Get()
	}
	if o.References.IsSet() {
		toSerialize["references"] = o.References.Get()
	}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !IsNil(o.Verified) {
		toSerialize["verified"] = o.Verified
	}
	if !IsNil(o.FalseP) {
		toSerialize["false_p"] = o.FalseP
	}
	if !IsNil(o.Duplicate) {
		toSerialize["duplicate"] = o.Duplicate
	}
	if !IsNil(o.OutOfScope) {
		toSerialize["out_of_scope"] = o.OutOfScope
	}
	if !IsNil(o.RiskAccepted) {
		toSerialize["risk_accepted"] = o.RiskAccepted
	}
	if !IsNil(o.UnderReview) {
		toSerialize["under_review"] = o.UnderReview
	}
	if !IsNil(o.UnderDefectReview) {
		toSerialize["under_defect_review"] = o.UnderDefectReview
	}
	if !IsNil(o.IsMitigated) {
		toSerialize["is_mitigated"] = o.IsMitigated
	}
	toSerialize["numerical_severity"] = o.NumericalSeverity
	if o.Line.IsSet() {
		toSerialize["line"] = o.Line.Get()
	}
	if o.FilePath.IsSet() {
		toSerialize["file_path"] = o.FilePath.Get()
	}
	if o.ComponentName.IsSet() {
		toSerialize["component_name"] = o.ComponentName.Get()
	}
	if o.ComponentVersion.IsSet() {
		toSerialize["component_version"] = o.ComponentVersion.Get()
	}
	if !IsNil(o.StaticFinding) {
		toSerialize["static_finding"] = o.StaticFinding
	}
	if !IsNil(o.DynamicFinding) {
		toSerialize["dynamic_finding"] = o.DynamicFinding
	}
	if o.UniqueIdFromTool.IsSet() {
		toSerialize["unique_id_from_tool"] = o.UniqueIdFromTool.Get()
	}
	if o.VulnIdFromTool.IsSet() {
		toSerialize["vuln_id_from_tool"] = o.VulnIdFromTool.Get()
	}
	if o.SastSourceObject.IsSet() {
		toSerialize["sast_source_object"] = o.SastSourceObject.Get()
	}
	if o.SastSinkObject.IsSet() {
		toSerialize["sast_sink_object"] = o.SastSinkObject.Get()
	}
	if o.SastSourceLine.IsSet() {
		toSerialize["sast_source_line"] = o.SastSourceLine.Get()
	}
	if o.SastSourceFilePath.IsSet() {
		toSerialize["sast_source_file_path"] = o.SastSourceFilePath.Get()
	}
	if o.NbOccurences.IsSet() {
		toSerialize["nb_occurences"] = o.NbOccurences.Get()
	}
	if o.PublishDate.IsSet() {
		toSerialize["publish_date"] = o.PublishDate.Get()
	}
	if o.Service.IsSet() {
		toSerialize["service"] = o.Service.Get()
	}
	if o.PlannedRemediationDate.IsSet() {
		toSerialize["planned_remediation_date"] = o.PlannedRemediationDate.Get()
	}
	if o.PlannedRemediationVersion.IsSet() {
		toSerialize["planned_remediation_version"] = o.PlannedRemediationVersion.Get()
	}
	if o.EffortForFixing.IsSet() {
		toSerialize["effort_for_fixing"] = o.EffortForFixing.Get()
	}
	if o.ReviewRequestedBy.IsSet() {
		toSerialize["review_requested_by"] = o.ReviewRequestedBy.Get()
	}
	if o.DefectReviewRequestedBy.IsSet() {
		toSerialize["defect_review_requested_by"] = o.DefectReviewRequestedBy.Get()
	}
	if o.SonarqubeIssue.IsSet() {
		toSerialize["sonarqube_issue"] = o.SonarqubeIssue.Get()
	}
	if !IsNil(o.Reviewers) {
		toSerialize["reviewers"] = o.Reviewers
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *FindingRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"title",
		"severity",
		"description",
		"numerical_severity",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{} {
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == ""{
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil{
			return err
		}
	}
	varFindingRequest := _FindingRequest{}

	err = json.Unmarshal(data, &varFindingRequest)

	if err != nil {
		return err
	}

	*o = FindingRequest(varFindingRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "tags")
		delete(additionalProperties, "push_to_jira")
		delete(additionalProperties, "vulnerability_ids")
		delete(additionalProperties, "reporter")
		delete(additionalProperties, "title")
		delete(additionalProperties, "date")
		delete(additionalProperties, "sla_start_date")
		delete(additionalProperties, "sla_expiration_date")
		delete(additionalProperties, "cwe")
		delete(additionalProperties, "epss_score")
		delete(additionalProperties, "epss_percentile")
		delete(additionalProperties, "cvssv3")
		delete(additionalProperties, "cvssv3_score")
		delete(additionalProperties, "severity")
		delete(additionalProperties, "description")
		delete(additionalProperties, "mitigation")
		delete(additionalProperties, "impact")
		delete(additionalProperties, "steps_to_reproduce")
		delete(additionalProperties, "severity_justification")
		delete(additionalProperties, "references")
		delete(additionalProperties, "active")
		delete(additionalProperties, "verified")
		delete(additionalProperties, "false_p")
		delete(additionalProperties, "duplicate")
		delete(additionalProperties, "out_of_scope")
		delete(additionalProperties, "risk_accepted")
		delete(additionalProperties, "under_review")
		delete(additionalProperties, "under_defect_review")
		delete(additionalProperties, "is_mitigated")
		delete(additionalProperties, "numerical_severity")
		delete(additionalProperties, "line")
		delete(additionalProperties, "file_path")
		delete(additionalProperties, "component_name")
		delete(additionalProperties, "component_version")
		delete(additionalProperties, "static_finding")
		delete(additionalProperties, "dynamic_finding")
		delete(additionalProperties, "unique_id_from_tool")
		delete(additionalProperties, "vuln_id_from_tool")
		delete(additionalProperties, "sast_source_object")
		delete(additionalProperties, "sast_sink_object")
		delete(additionalProperties, "sast_source_line")
		delete(additionalProperties, "sast_source_file_path")
		delete(additionalProperties, "nb_occurences")
		delete(additionalProperties, "publish_date")
		delete(additionalProperties, "service")
		delete(additionalProperties, "planned_remediation_date")
		delete(additionalProperties, "planned_remediation_version")
		delete(additionalProperties, "effort_for_fixing")
		delete(additionalProperties, "review_requested_by")
		delete(additionalProperties, "defect_review_requested_by")
		delete(additionalProperties, "sonarqube_issue")
		delete(additionalProperties, "reviewers")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableFindingRequest struct {
	value *FindingRequest
	isSet bool
}

func (v NullableFindingRequest) Get() *FindingRequest {
	return v.value
}

func (v *NullableFindingRequest) Set(val *FindingRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableFindingRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableFindingRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFindingRequest(val *FindingRequest) *NullableFindingRequest {
	return &NullableFindingRequest{value: val, isSet: true}
}

func (v NullableFindingRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFindingRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


