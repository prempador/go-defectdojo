/*
Defect Dojo API v2

Defect Dojo - Open Source vulnerability Management made easy. Prefetch related parameters/responses not yet in the schema.

API version: 2.33.5
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package defectdojo

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the QuestionnaireAnswer type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QuestionnaireAnswer{}

// QuestionnaireAnswer struct for QuestionnaireAnswer
type QuestionnaireAnswer struct {
	Id int32 `json:"id"`
	Created time.Time `json:"created"`
	Modified time.Time `json:"modified"`
	Question int32 `json:"question"`
	AnsweredSurvey int32 `json:"answered_survey"`
}

type _QuestionnaireAnswer QuestionnaireAnswer

// NewQuestionnaireAnswer instantiates a new QuestionnaireAnswer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQuestionnaireAnswer(id int32, created time.Time, modified time.Time, question int32, answeredSurvey int32) *QuestionnaireAnswer {
	this := QuestionnaireAnswer{}
	this.Id = id
	this.Created = created
	this.Modified = modified
	this.Question = question
	this.AnsweredSurvey = answeredSurvey
	return &this
}

// NewQuestionnaireAnswerWithDefaults instantiates a new QuestionnaireAnswer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQuestionnaireAnswerWithDefaults() *QuestionnaireAnswer {
	this := QuestionnaireAnswer{}
	return &this
}

// GetId returns the Id field value
func (o *QuestionnaireAnswer) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *QuestionnaireAnswer) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *QuestionnaireAnswer) SetId(v int32) {
	o.Id = v
}

// GetCreated returns the Created field value
func (o *QuestionnaireAnswer) GetCreated() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Created
}

// GetCreatedOk returns a tuple with the Created field value
// and a boolean to check if the value has been set.
func (o *QuestionnaireAnswer) GetCreatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Created, true
}

// SetCreated sets field value
func (o *QuestionnaireAnswer) SetCreated(v time.Time) {
	o.Created = v
}

// GetModified returns the Modified field value
func (o *QuestionnaireAnswer) GetModified() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Modified
}

// GetModifiedOk returns a tuple with the Modified field value
// and a boolean to check if the value has been set.
func (o *QuestionnaireAnswer) GetModifiedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Modified, true
}

// SetModified sets field value
func (o *QuestionnaireAnswer) SetModified(v time.Time) {
	o.Modified = v
}

// GetQuestion returns the Question field value
func (o *QuestionnaireAnswer) GetQuestion() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Question
}

// GetQuestionOk returns a tuple with the Question field value
// and a boolean to check if the value has been set.
func (o *QuestionnaireAnswer) GetQuestionOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Question, true
}

// SetQuestion sets field value
func (o *QuestionnaireAnswer) SetQuestion(v int32) {
	o.Question = v
}

// GetAnsweredSurvey returns the AnsweredSurvey field value
func (o *QuestionnaireAnswer) GetAnsweredSurvey() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.AnsweredSurvey
}

// GetAnsweredSurveyOk returns a tuple with the AnsweredSurvey field value
// and a boolean to check if the value has been set.
func (o *QuestionnaireAnswer) GetAnsweredSurveyOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AnsweredSurvey, true
}

// SetAnsweredSurvey sets field value
func (o *QuestionnaireAnswer) SetAnsweredSurvey(v int32) {
	o.AnsweredSurvey = v
}

func (o QuestionnaireAnswer) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QuestionnaireAnswer) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["created"] = o.Created
	toSerialize["modified"] = o.Modified
	toSerialize["question"] = o.Question
	toSerialize["answered_survey"] = o.AnsweredSurvey
	return toSerialize, nil
}

func (o *QuestionnaireAnswer) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"created",
		"modified",
		"question",
		"answered_survey",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varQuestionnaireAnswer := _QuestionnaireAnswer{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varQuestionnaireAnswer)

	if err != nil {
		return err
	}

	*o = QuestionnaireAnswer(varQuestionnaireAnswer)

	return err
}

type NullableQuestionnaireAnswer struct {
	value *QuestionnaireAnswer
	isSet bool
}

func (v NullableQuestionnaireAnswer) Get() *QuestionnaireAnswer {
	return v.value
}

func (v *NullableQuestionnaireAnswer) Set(val *QuestionnaireAnswer) {
	v.value = val
	v.isSet = true
}

func (v NullableQuestionnaireAnswer) IsSet() bool {
	return v.isSet
}

func (v *NullableQuestionnaireAnswer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQuestionnaireAnswer(val *QuestionnaireAnswer) *NullableQuestionnaireAnswer {
	return &NullableQuestionnaireAnswer{value: val, isSet: true}
}

func (v NullableQuestionnaireAnswer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQuestionnaireAnswer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


