/*
Defect Dojo API v2

Defect Dojo - Open Source vulnerability Management made easy. Prefetch related parameters/responses not yet in the schema.

API version: 2.38.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package defectdojo

import (
	"encoding/json"
)

// checks if the DojoGroupMemberPrefetch type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DojoGroupMemberPrefetch{}

// DojoGroupMemberPrefetch struct for DojoGroupMemberPrefetch
type DojoGroupMemberPrefetch struct {
	Group *map[string]DojoGroup `json:"group,omitempty"`
	Role *map[string]Role `json:"role,omitempty"`
	User *map[string]UserStub `json:"user,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DojoGroupMemberPrefetch DojoGroupMemberPrefetch

// NewDojoGroupMemberPrefetch instantiates a new DojoGroupMemberPrefetch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDojoGroupMemberPrefetch() *DojoGroupMemberPrefetch {
	this := DojoGroupMemberPrefetch{}
	return &this
}

// NewDojoGroupMemberPrefetchWithDefaults instantiates a new DojoGroupMemberPrefetch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDojoGroupMemberPrefetchWithDefaults() *DojoGroupMemberPrefetch {
	this := DojoGroupMemberPrefetch{}
	return &this
}

// GetGroup returns the Group field value if set, zero value otherwise.
func (o *DojoGroupMemberPrefetch) GetGroup() map[string]DojoGroup {
	if o == nil || IsNil(o.Group) {
		var ret map[string]DojoGroup
		return ret
	}
	return *o.Group
}

// GetGroupOk returns a tuple with the Group field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DojoGroupMemberPrefetch) GetGroupOk() (*map[string]DojoGroup, bool) {
	if o == nil || IsNil(o.Group) {
		return nil, false
	}
	return o.Group, true
}

// HasGroup returns a boolean if a field has been set.
func (o *DojoGroupMemberPrefetch) HasGroup() bool {
	if o != nil && !IsNil(o.Group) {
		return true
	}

	return false
}

// SetGroup gets a reference to the given map[string]DojoGroup and assigns it to the Group field.
func (o *DojoGroupMemberPrefetch) SetGroup(v map[string]DojoGroup) {
	o.Group = &v
}

// GetRole returns the Role field value if set, zero value otherwise.
func (o *DojoGroupMemberPrefetch) GetRole() map[string]Role {
	if o == nil || IsNil(o.Role) {
		var ret map[string]Role
		return ret
	}
	return *o.Role
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DojoGroupMemberPrefetch) GetRoleOk() (*map[string]Role, bool) {
	if o == nil || IsNil(o.Role) {
		return nil, false
	}
	return o.Role, true
}

// HasRole returns a boolean if a field has been set.
func (o *DojoGroupMemberPrefetch) HasRole() bool {
	if o != nil && !IsNil(o.Role) {
		return true
	}

	return false
}

// SetRole gets a reference to the given map[string]Role and assigns it to the Role field.
func (o *DojoGroupMemberPrefetch) SetRole(v map[string]Role) {
	o.Role = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *DojoGroupMemberPrefetch) GetUser() map[string]UserStub {
	if o == nil || IsNil(o.User) {
		var ret map[string]UserStub
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DojoGroupMemberPrefetch) GetUserOk() (*map[string]UserStub, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *DojoGroupMemberPrefetch) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given map[string]UserStub and assigns it to the User field.
func (o *DojoGroupMemberPrefetch) SetUser(v map[string]UserStub) {
	o.User = &v
}

func (o DojoGroupMemberPrefetch) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DojoGroupMemberPrefetch) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Group) {
		toSerialize["group"] = o.Group
	}
	if !IsNil(o.Role) {
		toSerialize["role"] = o.Role
	}
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DojoGroupMemberPrefetch) UnmarshalJSON(data []byte) (err error) {
	varDojoGroupMemberPrefetch := _DojoGroupMemberPrefetch{}

	err = json.Unmarshal(data, &varDojoGroupMemberPrefetch)

	if err != nil {
		return err
	}

	*o = DojoGroupMemberPrefetch(varDojoGroupMemberPrefetch)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "group")
		delete(additionalProperties, "role")
		delete(additionalProperties, "user")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDojoGroupMemberPrefetch struct {
	value *DojoGroupMemberPrefetch
	isSet bool
}

func (v NullableDojoGroupMemberPrefetch) Get() *DojoGroupMemberPrefetch {
	return v.value
}

func (v *NullableDojoGroupMemberPrefetch) Set(val *DojoGroupMemberPrefetch) {
	v.value = val
	v.isSet = true
}

func (v NullableDojoGroupMemberPrefetch) IsSet() bool {
	return v.isSet
}

func (v *NullableDojoGroupMemberPrefetch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDojoGroupMemberPrefetch(val *DojoGroupMemberPrefetch) *NullableDojoGroupMemberPrefetch {
	return &NullableDojoGroupMemberPrefetch{value: val, isSet: true}
}

func (v NullableDojoGroupMemberPrefetch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDojoGroupMemberPrefetch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


