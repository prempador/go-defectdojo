/*
Defect Dojo API v2

Defect Dojo - Open Source vulnerability Management made easy. Prefetch related parameters/responses not yet in the schema.

API version: 2.38.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package defectdojo

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


type ProductTypeMembersAPI interface {

	/*
	ProductTypeMembersCreate Method for ProductTypeMembersCreate

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiProductTypeMembersCreateRequest
	*/
	ProductTypeMembersCreate(ctx context.Context) ApiProductTypeMembersCreateRequest

	// ProductTypeMembersCreateExecute executes the request
	//  @return ProductTypeMember
	ProductTypeMembersCreateExecute(r ApiProductTypeMembersCreateRequest) (*ProductTypeMember, *http.Response, error)

	/*
	ProductTypeMembersDeletePreviewList Method for ProductTypeMembersDeletePreviewList

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this product_ type_ member.
	@return ApiProductTypeMembersDeletePreviewListRequest
	*/
	ProductTypeMembersDeletePreviewList(ctx context.Context, id int32) ApiProductTypeMembersDeletePreviewListRequest

	// ProductTypeMembersDeletePreviewListExecute executes the request
	//  @return PaginatedDeletePreviewList
	ProductTypeMembersDeletePreviewListExecute(r ApiProductTypeMembersDeletePreviewListRequest) (*PaginatedDeletePreviewList, *http.Response, error)

	/*
	ProductTypeMembersDestroy Method for ProductTypeMembersDestroy

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this product_ type_ member.
	@return ApiProductTypeMembersDestroyRequest
	*/
	ProductTypeMembersDestroy(ctx context.Context, id int32) ApiProductTypeMembersDestroyRequest

	// ProductTypeMembersDestroyExecute executes the request
	ProductTypeMembersDestroyExecute(r ApiProductTypeMembersDestroyRequest) (*http.Response, error)

	/*
	ProductTypeMembersList Method for ProductTypeMembersList

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiProductTypeMembersListRequest
	*/
	ProductTypeMembersList(ctx context.Context) ApiProductTypeMembersListRequest

	// ProductTypeMembersListExecute executes the request
	//  @return PaginatedProductTypeMemberList
	ProductTypeMembersListExecute(r ApiProductTypeMembersListRequest) (*PaginatedProductTypeMemberList, *http.Response, error)

	/*
	ProductTypeMembersRetrieve Method for ProductTypeMembersRetrieve

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this product_ type_ member.
	@return ApiProductTypeMembersRetrieveRequest
	*/
	ProductTypeMembersRetrieve(ctx context.Context, id int32) ApiProductTypeMembersRetrieveRequest

	// ProductTypeMembersRetrieveExecute executes the request
	//  @return ProductTypeMember
	ProductTypeMembersRetrieveExecute(r ApiProductTypeMembersRetrieveRequest) (*ProductTypeMember, *http.Response, error)

	/*
	ProductTypeMembersUpdate Method for ProductTypeMembersUpdate

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this product_ type_ member.
	@return ApiProductTypeMembersUpdateRequest
	*/
	ProductTypeMembersUpdate(ctx context.Context, id int32) ApiProductTypeMembersUpdateRequest

	// ProductTypeMembersUpdateExecute executes the request
	//  @return ProductTypeMember
	ProductTypeMembersUpdateExecute(r ApiProductTypeMembersUpdateRequest) (*ProductTypeMember, *http.Response, error)
}

// ProductTypeMembersAPIService ProductTypeMembersAPI service
type ProductTypeMembersAPIService service

type ApiProductTypeMembersCreateRequest struct {
	ctx context.Context
	ApiService ProductTypeMembersAPI
	productTypeMemberRequest *ProductTypeMemberRequest
}

func (r ApiProductTypeMembersCreateRequest) ProductTypeMemberRequest(productTypeMemberRequest ProductTypeMemberRequest) ApiProductTypeMembersCreateRequest {
	r.productTypeMemberRequest = &productTypeMemberRequest
	return r
}

func (r ApiProductTypeMembersCreateRequest) Execute() (*ProductTypeMember, *http.Response, error) {
	return r.ApiService.ProductTypeMembersCreateExecute(r)
}

/*
ProductTypeMembersCreate Method for ProductTypeMembersCreate

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiProductTypeMembersCreateRequest
*/
func (a *ProductTypeMembersAPIService) ProductTypeMembersCreate(ctx context.Context) ApiProductTypeMembersCreateRequest {
	return ApiProductTypeMembersCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ProductTypeMember
func (a *ProductTypeMembersAPIService) ProductTypeMembersCreateExecute(r ApiProductTypeMembersCreateRequest) (*ProductTypeMember, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProductTypeMember
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProductTypeMembersAPIService.ProductTypeMembersCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/product_type_members/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.productTypeMemberRequest == nil {
		return localVarReturnValue, nil, reportError("productTypeMemberRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.productTypeMemberRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiProductTypeMembersDeletePreviewListRequest struct {
	ctx context.Context
	ApiService ProductTypeMembersAPI
	id int32
	limit *int32
	offset *int32
}

// Number of results to return per page.
func (r ApiProductTypeMembersDeletePreviewListRequest) Limit(limit int32) ApiProductTypeMembersDeletePreviewListRequest {
	r.limit = &limit
	return r
}

// The initial index from which to return the results.
func (r ApiProductTypeMembersDeletePreviewListRequest) Offset(offset int32) ApiProductTypeMembersDeletePreviewListRequest {
	r.offset = &offset
	return r
}

func (r ApiProductTypeMembersDeletePreviewListRequest) Execute() (*PaginatedDeletePreviewList, *http.Response, error) {
	return r.ApiService.ProductTypeMembersDeletePreviewListExecute(r)
}

/*
ProductTypeMembersDeletePreviewList Method for ProductTypeMembersDeletePreviewList

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A unique integer value identifying this product_ type_ member.
 @return ApiProductTypeMembersDeletePreviewListRequest
*/
func (a *ProductTypeMembersAPIService) ProductTypeMembersDeletePreviewList(ctx context.Context, id int32) ApiProductTypeMembersDeletePreviewListRequest {
	return ApiProductTypeMembersDeletePreviewListRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PaginatedDeletePreviewList
func (a *ProductTypeMembersAPIService) ProductTypeMembersDeletePreviewListExecute(r ApiProductTypeMembersDeletePreviewListRequest) (*PaginatedDeletePreviewList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedDeletePreviewList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProductTypeMembersAPIService.ProductTypeMembersDeletePreviewList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/product_type_members/{id}/delete_preview/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiProductTypeMembersDestroyRequest struct {
	ctx context.Context
	ApiService ProductTypeMembersAPI
	id int32
}

func (r ApiProductTypeMembersDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.ProductTypeMembersDestroyExecute(r)
}

/*
ProductTypeMembersDestroy Method for ProductTypeMembersDestroy

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A unique integer value identifying this product_ type_ member.
 @return ApiProductTypeMembersDestroyRequest
*/
func (a *ProductTypeMembersAPIService) ProductTypeMembersDestroy(ctx context.Context, id int32) ApiProductTypeMembersDestroyRequest {
	return ApiProductTypeMembersDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *ProductTypeMembersAPIService) ProductTypeMembersDestroyExecute(r ApiProductTypeMembersDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProductTypeMembersAPIService.ProductTypeMembersDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/product_type_members/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiProductTypeMembersListRequest struct {
	ctx context.Context
	ApiService ProductTypeMembersAPI
	id *int32
	limit *int32
	offset *int32
	prefetch *[]string
	productTypeId *int32
	userId *int32
}

func (r ApiProductTypeMembersListRequest) Id(id int32) ApiProductTypeMembersListRequest {
	r.id = &id
	return r
}

// Number of results to return per page.
func (r ApiProductTypeMembersListRequest) Limit(limit int32) ApiProductTypeMembersListRequest {
	r.limit = &limit
	return r
}

// The initial index from which to return the results.
func (r ApiProductTypeMembersListRequest) Offset(offset int32) ApiProductTypeMembersListRequest {
	r.offset = &offset
	return r
}

// List of fields for which to prefetch model instances and add those to the response
func (r ApiProductTypeMembersListRequest) Prefetch(prefetch []string) ApiProductTypeMembersListRequest {
	r.prefetch = &prefetch
	return r
}

func (r ApiProductTypeMembersListRequest) ProductTypeId(productTypeId int32) ApiProductTypeMembersListRequest {
	r.productTypeId = &productTypeId
	return r
}

func (r ApiProductTypeMembersListRequest) UserId(userId int32) ApiProductTypeMembersListRequest {
	r.userId = &userId
	return r
}

func (r ApiProductTypeMembersListRequest) Execute() (*PaginatedProductTypeMemberList, *http.Response, error) {
	return r.ApiService.ProductTypeMembersListExecute(r)
}

/*
ProductTypeMembersList Method for ProductTypeMembersList

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiProductTypeMembersListRequest
*/
func (a *ProductTypeMembersAPIService) ProductTypeMembersList(ctx context.Context) ApiProductTypeMembersListRequest {
	return ApiProductTypeMembersListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedProductTypeMemberList
func (a *ProductTypeMembersAPIService) ProductTypeMembersListExecute(r ApiProductTypeMembersListRequest) (*PaginatedProductTypeMemberList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedProductTypeMemberList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProductTypeMembersAPIService.ProductTypeMembersList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/product_type_members/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.id != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id", r.id, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.prefetch != nil {
		t := *r.prefetch
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "prefetch", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "prefetch", t, "form", "multi")
		}
	}
	if r.productTypeId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "product_type_id", r.productTypeId, "form", "")
	}
	if r.userId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "user_id", r.userId, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiProductTypeMembersRetrieveRequest struct {
	ctx context.Context
	ApiService ProductTypeMembersAPI
	id int32
	prefetch *[]string
}

// List of fields for which to prefetch model instances and add those to the response
func (r ApiProductTypeMembersRetrieveRequest) Prefetch(prefetch []string) ApiProductTypeMembersRetrieveRequest {
	r.prefetch = &prefetch
	return r
}

func (r ApiProductTypeMembersRetrieveRequest) Execute() (*ProductTypeMember, *http.Response, error) {
	return r.ApiService.ProductTypeMembersRetrieveExecute(r)
}

/*
ProductTypeMembersRetrieve Method for ProductTypeMembersRetrieve

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A unique integer value identifying this product_ type_ member.
 @return ApiProductTypeMembersRetrieveRequest
*/
func (a *ProductTypeMembersAPIService) ProductTypeMembersRetrieve(ctx context.Context, id int32) ApiProductTypeMembersRetrieveRequest {
	return ApiProductTypeMembersRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ProductTypeMember
func (a *ProductTypeMembersAPIService) ProductTypeMembersRetrieveExecute(r ApiProductTypeMembersRetrieveRequest) (*ProductTypeMember, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProductTypeMember
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProductTypeMembersAPIService.ProductTypeMembersRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/product_type_members/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.prefetch != nil {
		t := *r.prefetch
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "prefetch", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "prefetch", t, "form", "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiProductTypeMembersUpdateRequest struct {
	ctx context.Context
	ApiService ProductTypeMembersAPI
	id int32
	productTypeMemberRequest *ProductTypeMemberRequest
}

func (r ApiProductTypeMembersUpdateRequest) ProductTypeMemberRequest(productTypeMemberRequest ProductTypeMemberRequest) ApiProductTypeMembersUpdateRequest {
	r.productTypeMemberRequest = &productTypeMemberRequest
	return r
}

func (r ApiProductTypeMembersUpdateRequest) Execute() (*ProductTypeMember, *http.Response, error) {
	return r.ApiService.ProductTypeMembersUpdateExecute(r)
}

/*
ProductTypeMembersUpdate Method for ProductTypeMembersUpdate

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A unique integer value identifying this product_ type_ member.
 @return ApiProductTypeMembersUpdateRequest
*/
func (a *ProductTypeMembersAPIService) ProductTypeMembersUpdate(ctx context.Context, id int32) ApiProductTypeMembersUpdateRequest {
	return ApiProductTypeMembersUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return ProductTypeMember
func (a *ProductTypeMembersAPIService) ProductTypeMembersUpdateExecute(r ApiProductTypeMembersUpdateRequest) (*ProductTypeMember, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProductTypeMember
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ProductTypeMembersAPIService.ProductTypeMembersUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/product_type_members/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.productTypeMemberRequest == nil {
		return localVarReturnValue, nil, reportError("productTypeMemberRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.productTypeMemberRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
