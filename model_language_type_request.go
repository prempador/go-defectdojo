/*
Defect Dojo API v2

Defect Dojo - Open Source vulnerability Management made easy. Prefetch related parameters/responses not yet in the schema.

API version: 2.30.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the LanguageTypeRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LanguageTypeRequest{}

// LanguageTypeRequest struct for LanguageTypeRequest
type LanguageTypeRequest struct {
	Language string `json:"language"`
	Color NullableString `json:"color,omitempty"`
}

type _LanguageTypeRequest LanguageTypeRequest

// NewLanguageTypeRequest instantiates a new LanguageTypeRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLanguageTypeRequest(language string) *LanguageTypeRequest {
	this := LanguageTypeRequest{}
	this.Language = language
	return &this
}

// NewLanguageTypeRequestWithDefaults instantiates a new LanguageTypeRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLanguageTypeRequestWithDefaults() *LanguageTypeRequest {
	this := LanguageTypeRequest{}
	return &this
}

// GetLanguage returns the Language field value
func (o *LanguageTypeRequest) GetLanguage() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Language
}

// GetLanguageOk returns a tuple with the Language field value
// and a boolean to check if the value has been set.
func (o *LanguageTypeRequest) GetLanguageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Language, true
}

// SetLanguage sets field value
func (o *LanguageTypeRequest) SetLanguage(v string) {
	o.Language = v
}

// GetColor returns the Color field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LanguageTypeRequest) GetColor() string {
	if o == nil || IsNil(o.Color.Get()) {
		var ret string
		return ret
	}
	return *o.Color.Get()
}

// GetColorOk returns a tuple with the Color field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LanguageTypeRequest) GetColorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Color.Get(), o.Color.IsSet()
}

// HasColor returns a boolean if a field has been set.
func (o *LanguageTypeRequest) HasColor() bool {
	if o != nil && o.Color.IsSet() {
		return true
	}

	return false
}

// SetColor gets a reference to the given NullableString and assigns it to the Color field.
func (o *LanguageTypeRequest) SetColor(v string) {
	o.Color.Set(&v)
}
// SetColorNil sets the value for Color to be an explicit nil
func (o *LanguageTypeRequest) SetColorNil() {
	o.Color.Set(nil)
}

// UnsetColor ensures that no value is present for Color, not even an explicit nil
func (o *LanguageTypeRequest) UnsetColor() {
	o.Color.Unset()
}

func (o LanguageTypeRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LanguageTypeRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["language"] = o.Language
	if o.Color.IsSet() {
		toSerialize["color"] = o.Color.Get()
	}
	return toSerialize, nil
}

func (o *LanguageTypeRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"language",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLanguageTypeRequest := _LanguageTypeRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varLanguageTypeRequest)

	if err != nil {
		return err
	}

	*o = LanguageTypeRequest(varLanguageTypeRequest)

	return err
}

type NullableLanguageTypeRequest struct {
	value *LanguageTypeRequest
	isSet bool
}

func (v NullableLanguageTypeRequest) Get() *LanguageTypeRequest {
	return v.value
}

func (v *NullableLanguageTypeRequest) Set(val *LanguageTypeRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableLanguageTypeRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableLanguageTypeRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLanguageTypeRequest(val *LanguageTypeRequest) *NullableLanguageTypeRequest {
	return &NullableLanguageTypeRequest{value: val, isSet: true}
}

func (v NullableLanguageTypeRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLanguageTypeRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


