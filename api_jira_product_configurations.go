/*
Defect Dojo API v2

Defect Dojo - Open Source vulnerability Management made easy. Prefetch related parameters/responses not yet in the schema.

API version: 2.38.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package defectdojo

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


type JiraProductConfigurationsAPI interface {

	/*
	JiraProductConfigurationsCreate Method for JiraProductConfigurationsCreate

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiJiraProductConfigurationsCreateRequest
	*/
	JiraProductConfigurationsCreate(ctx context.Context) ApiJiraProductConfigurationsCreateRequest

	// JiraProductConfigurationsCreateExecute executes the request
	//  @return JIRAProject
	JiraProductConfigurationsCreateExecute(r ApiJiraProductConfigurationsCreateRequest) (*JIRAProject, *http.Response, error)

	/*
	JiraProductConfigurationsDeletePreviewList Method for JiraProductConfigurationsDeletePreviewList

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this jir a_ project.
	@return ApiJiraProductConfigurationsDeletePreviewListRequest
	*/
	JiraProductConfigurationsDeletePreviewList(ctx context.Context, id int32) ApiJiraProductConfigurationsDeletePreviewListRequest

	// JiraProductConfigurationsDeletePreviewListExecute executes the request
	//  @return PaginatedDeletePreviewList
	JiraProductConfigurationsDeletePreviewListExecute(r ApiJiraProductConfigurationsDeletePreviewListRequest) (*PaginatedDeletePreviewList, *http.Response, error)

	/*
	JiraProductConfigurationsDestroy Method for JiraProductConfigurationsDestroy

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this jir a_ project.
	@return ApiJiraProductConfigurationsDestroyRequest
	*/
	JiraProductConfigurationsDestroy(ctx context.Context, id int32) ApiJiraProductConfigurationsDestroyRequest

	// JiraProductConfigurationsDestroyExecute executes the request
	JiraProductConfigurationsDestroyExecute(r ApiJiraProductConfigurationsDestroyRequest) (*http.Response, error)

	/*
	JiraProductConfigurationsList Method for JiraProductConfigurationsList

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiJiraProductConfigurationsListRequest
	*/
	JiraProductConfigurationsList(ctx context.Context) ApiJiraProductConfigurationsListRequest

	// JiraProductConfigurationsListExecute executes the request
	//  @return PaginatedJIRAProjectList
	JiraProductConfigurationsListExecute(r ApiJiraProductConfigurationsListRequest) (*PaginatedJIRAProjectList, *http.Response, error)

	/*
	JiraProductConfigurationsPartialUpdate Method for JiraProductConfigurationsPartialUpdate

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this jir a_ project.
	@return ApiJiraProductConfigurationsPartialUpdateRequest
	*/
	JiraProductConfigurationsPartialUpdate(ctx context.Context, id int32) ApiJiraProductConfigurationsPartialUpdateRequest

	// JiraProductConfigurationsPartialUpdateExecute executes the request
	//  @return JIRAProject
	JiraProductConfigurationsPartialUpdateExecute(r ApiJiraProductConfigurationsPartialUpdateRequest) (*JIRAProject, *http.Response, error)

	/*
	JiraProductConfigurationsRetrieve Method for JiraProductConfigurationsRetrieve

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this jir a_ project.
	@return ApiJiraProductConfigurationsRetrieveRequest
	*/
	JiraProductConfigurationsRetrieve(ctx context.Context, id int32) ApiJiraProductConfigurationsRetrieveRequest

	// JiraProductConfigurationsRetrieveExecute executes the request
	//  @return JIRAProject
	JiraProductConfigurationsRetrieveExecute(r ApiJiraProductConfigurationsRetrieveRequest) (*JIRAProject, *http.Response, error)

	/*
	JiraProductConfigurationsUpdate Method for JiraProductConfigurationsUpdate

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this jir a_ project.
	@return ApiJiraProductConfigurationsUpdateRequest
	*/
	JiraProductConfigurationsUpdate(ctx context.Context, id int32) ApiJiraProductConfigurationsUpdateRequest

	// JiraProductConfigurationsUpdateExecute executes the request
	//  @return JIRAProject
	JiraProductConfigurationsUpdateExecute(r ApiJiraProductConfigurationsUpdateRequest) (*JIRAProject, *http.Response, error)
}

// JiraProductConfigurationsAPIService JiraProductConfigurationsAPI service
type JiraProductConfigurationsAPIService service

type ApiJiraProductConfigurationsCreateRequest struct {
	ctx context.Context
	ApiService JiraProductConfigurationsAPI
	jIRAProjectRequest *JIRAProjectRequest
}

func (r ApiJiraProductConfigurationsCreateRequest) JIRAProjectRequest(jIRAProjectRequest JIRAProjectRequest) ApiJiraProductConfigurationsCreateRequest {
	r.jIRAProjectRequest = &jIRAProjectRequest
	return r
}

func (r ApiJiraProductConfigurationsCreateRequest) Execute() (*JIRAProject, *http.Response, error) {
	return r.ApiService.JiraProductConfigurationsCreateExecute(r)
}

/*
JiraProductConfigurationsCreate Method for JiraProductConfigurationsCreate

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiJiraProductConfigurationsCreateRequest
*/
func (a *JiraProductConfigurationsAPIService) JiraProductConfigurationsCreate(ctx context.Context) ApiJiraProductConfigurationsCreateRequest {
	return ApiJiraProductConfigurationsCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return JIRAProject
func (a *JiraProductConfigurationsAPIService) JiraProductConfigurationsCreateExecute(r ApiJiraProductConfigurationsCreateRequest) (*JIRAProject, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *JIRAProject
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "JiraProductConfigurationsAPIService.JiraProductConfigurationsCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/jira_product_configurations/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.jIRAProjectRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiJiraProductConfigurationsDeletePreviewListRequest struct {
	ctx context.Context
	ApiService JiraProductConfigurationsAPI
	id int32
	limit *int32
	offset *int32
}

// Number of results to return per page.
func (r ApiJiraProductConfigurationsDeletePreviewListRequest) Limit(limit int32) ApiJiraProductConfigurationsDeletePreviewListRequest {
	r.limit = &limit
	return r
}

// The initial index from which to return the results.
func (r ApiJiraProductConfigurationsDeletePreviewListRequest) Offset(offset int32) ApiJiraProductConfigurationsDeletePreviewListRequest {
	r.offset = &offset
	return r
}

func (r ApiJiraProductConfigurationsDeletePreviewListRequest) Execute() (*PaginatedDeletePreviewList, *http.Response, error) {
	return r.ApiService.JiraProductConfigurationsDeletePreviewListExecute(r)
}

/*
JiraProductConfigurationsDeletePreviewList Method for JiraProductConfigurationsDeletePreviewList

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A unique integer value identifying this jir a_ project.
 @return ApiJiraProductConfigurationsDeletePreviewListRequest
*/
func (a *JiraProductConfigurationsAPIService) JiraProductConfigurationsDeletePreviewList(ctx context.Context, id int32) ApiJiraProductConfigurationsDeletePreviewListRequest {
	return ApiJiraProductConfigurationsDeletePreviewListRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PaginatedDeletePreviewList
func (a *JiraProductConfigurationsAPIService) JiraProductConfigurationsDeletePreviewListExecute(r ApiJiraProductConfigurationsDeletePreviewListRequest) (*PaginatedDeletePreviewList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedDeletePreviewList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "JiraProductConfigurationsAPIService.JiraProductConfigurationsDeletePreviewList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/jira_product_configurations/{id}/delete_preview/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiJiraProductConfigurationsDestroyRequest struct {
	ctx context.Context
	ApiService JiraProductConfigurationsAPI
	id int32
}

func (r ApiJiraProductConfigurationsDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.JiraProductConfigurationsDestroyExecute(r)
}

/*
JiraProductConfigurationsDestroy Method for JiraProductConfigurationsDestroy

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A unique integer value identifying this jir a_ project.
 @return ApiJiraProductConfigurationsDestroyRequest
*/
func (a *JiraProductConfigurationsAPIService) JiraProductConfigurationsDestroy(ctx context.Context, id int32) ApiJiraProductConfigurationsDestroyRequest {
	return ApiJiraProductConfigurationsDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *JiraProductConfigurationsAPIService) JiraProductConfigurationsDestroyExecute(r ApiJiraProductConfigurationsDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "JiraProductConfigurationsAPIService.JiraProductConfigurationsDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/jira_product_configurations/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiJiraProductConfigurationsListRequest struct {
	ctx context.Context
	ApiService JiraProductConfigurationsAPI
	component *string
	enableEngagementEpicMapping *bool
	engagement *int32
	id *int32
	jiraInstance *int32
	limit *int32
	offset *int32
	prefetch *[]string
	product *int32
	projectKey *string
	pushAllIssues *bool
	pushNotes *bool
}

func (r ApiJiraProductConfigurationsListRequest) Component(component string) ApiJiraProductConfigurationsListRequest {
	r.component = &component
	return r
}

func (r ApiJiraProductConfigurationsListRequest) EnableEngagementEpicMapping(enableEngagementEpicMapping bool) ApiJiraProductConfigurationsListRequest {
	r.enableEngagementEpicMapping = &enableEngagementEpicMapping
	return r
}

func (r ApiJiraProductConfigurationsListRequest) Engagement(engagement int32) ApiJiraProductConfigurationsListRequest {
	r.engagement = &engagement
	return r
}

func (r ApiJiraProductConfigurationsListRequest) Id(id int32) ApiJiraProductConfigurationsListRequest {
	r.id = &id
	return r
}

func (r ApiJiraProductConfigurationsListRequest) JiraInstance(jiraInstance int32) ApiJiraProductConfigurationsListRequest {
	r.jiraInstance = &jiraInstance
	return r
}

// Number of results to return per page.
func (r ApiJiraProductConfigurationsListRequest) Limit(limit int32) ApiJiraProductConfigurationsListRequest {
	r.limit = &limit
	return r
}

// The initial index from which to return the results.
func (r ApiJiraProductConfigurationsListRequest) Offset(offset int32) ApiJiraProductConfigurationsListRequest {
	r.offset = &offset
	return r
}

// List of fields for which to prefetch model instances and add those to the response
func (r ApiJiraProductConfigurationsListRequest) Prefetch(prefetch []string) ApiJiraProductConfigurationsListRequest {
	r.prefetch = &prefetch
	return r
}

func (r ApiJiraProductConfigurationsListRequest) Product(product int32) ApiJiraProductConfigurationsListRequest {
	r.product = &product
	return r
}

func (r ApiJiraProductConfigurationsListRequest) ProjectKey(projectKey string) ApiJiraProductConfigurationsListRequest {
	r.projectKey = &projectKey
	return r
}

func (r ApiJiraProductConfigurationsListRequest) PushAllIssues(pushAllIssues bool) ApiJiraProductConfigurationsListRequest {
	r.pushAllIssues = &pushAllIssues
	return r
}

func (r ApiJiraProductConfigurationsListRequest) PushNotes(pushNotes bool) ApiJiraProductConfigurationsListRequest {
	r.pushNotes = &pushNotes
	return r
}

func (r ApiJiraProductConfigurationsListRequest) Execute() (*PaginatedJIRAProjectList, *http.Response, error) {
	return r.ApiService.JiraProductConfigurationsListExecute(r)
}

/*
JiraProductConfigurationsList Method for JiraProductConfigurationsList

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiJiraProductConfigurationsListRequest
*/
func (a *JiraProductConfigurationsAPIService) JiraProductConfigurationsList(ctx context.Context) ApiJiraProductConfigurationsListRequest {
	return ApiJiraProductConfigurationsListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedJIRAProjectList
func (a *JiraProductConfigurationsAPIService) JiraProductConfigurationsListExecute(r ApiJiraProductConfigurationsListRequest) (*PaginatedJIRAProjectList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedJIRAProjectList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "JiraProductConfigurationsAPIService.JiraProductConfigurationsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/jira_product_configurations/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.component != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "component", r.component, "form", "")
	}
	if r.enableEngagementEpicMapping != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "enable_engagement_epic_mapping", r.enableEngagementEpicMapping, "form", "")
	}
	if r.engagement != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "engagement", r.engagement, "form", "")
	}
	if r.id != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id", r.id, "form", "")
	}
	if r.jiraInstance != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "jira_instance", r.jiraInstance, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.prefetch != nil {
		t := *r.prefetch
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "prefetch", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "prefetch", t, "form", "multi")
		}
	}
	if r.product != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "product", r.product, "form", "")
	}
	if r.projectKey != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "project_key", r.projectKey, "form", "")
	}
	if r.pushAllIssues != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "push_all_issues", r.pushAllIssues, "form", "")
	}
	if r.pushNotes != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "push_notes", r.pushNotes, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiJiraProductConfigurationsPartialUpdateRequest struct {
	ctx context.Context
	ApiService JiraProductConfigurationsAPI
	id int32
	patchedJIRAProjectRequest *PatchedJIRAProjectRequest
}

func (r ApiJiraProductConfigurationsPartialUpdateRequest) PatchedJIRAProjectRequest(patchedJIRAProjectRequest PatchedJIRAProjectRequest) ApiJiraProductConfigurationsPartialUpdateRequest {
	r.patchedJIRAProjectRequest = &patchedJIRAProjectRequest
	return r
}

func (r ApiJiraProductConfigurationsPartialUpdateRequest) Execute() (*JIRAProject, *http.Response, error) {
	return r.ApiService.JiraProductConfigurationsPartialUpdateExecute(r)
}

/*
JiraProductConfigurationsPartialUpdate Method for JiraProductConfigurationsPartialUpdate

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A unique integer value identifying this jir a_ project.
 @return ApiJiraProductConfigurationsPartialUpdateRequest
*/
func (a *JiraProductConfigurationsAPIService) JiraProductConfigurationsPartialUpdate(ctx context.Context, id int32) ApiJiraProductConfigurationsPartialUpdateRequest {
	return ApiJiraProductConfigurationsPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return JIRAProject
func (a *JiraProductConfigurationsAPIService) JiraProductConfigurationsPartialUpdateExecute(r ApiJiraProductConfigurationsPartialUpdateRequest) (*JIRAProject, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *JIRAProject
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "JiraProductConfigurationsAPIService.JiraProductConfigurationsPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/jira_product_configurations/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedJIRAProjectRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiJiraProductConfigurationsRetrieveRequest struct {
	ctx context.Context
	ApiService JiraProductConfigurationsAPI
	id int32
	prefetch *[]string
}

// List of fields for which to prefetch model instances and add those to the response
func (r ApiJiraProductConfigurationsRetrieveRequest) Prefetch(prefetch []string) ApiJiraProductConfigurationsRetrieveRequest {
	r.prefetch = &prefetch
	return r
}

func (r ApiJiraProductConfigurationsRetrieveRequest) Execute() (*JIRAProject, *http.Response, error) {
	return r.ApiService.JiraProductConfigurationsRetrieveExecute(r)
}

/*
JiraProductConfigurationsRetrieve Method for JiraProductConfigurationsRetrieve

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A unique integer value identifying this jir a_ project.
 @return ApiJiraProductConfigurationsRetrieveRequest
*/
func (a *JiraProductConfigurationsAPIService) JiraProductConfigurationsRetrieve(ctx context.Context, id int32) ApiJiraProductConfigurationsRetrieveRequest {
	return ApiJiraProductConfigurationsRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return JIRAProject
func (a *JiraProductConfigurationsAPIService) JiraProductConfigurationsRetrieveExecute(r ApiJiraProductConfigurationsRetrieveRequest) (*JIRAProject, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *JIRAProject
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "JiraProductConfigurationsAPIService.JiraProductConfigurationsRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/jira_product_configurations/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.prefetch != nil {
		t := *r.prefetch
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "prefetch", s.Index(i).Interface(), "form", "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "prefetch", t, "form", "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiJiraProductConfigurationsUpdateRequest struct {
	ctx context.Context
	ApiService JiraProductConfigurationsAPI
	id int32
	jIRAProjectRequest *JIRAProjectRequest
}

func (r ApiJiraProductConfigurationsUpdateRequest) JIRAProjectRequest(jIRAProjectRequest JIRAProjectRequest) ApiJiraProductConfigurationsUpdateRequest {
	r.jIRAProjectRequest = &jIRAProjectRequest
	return r
}

func (r ApiJiraProductConfigurationsUpdateRequest) Execute() (*JIRAProject, *http.Response, error) {
	return r.ApiService.JiraProductConfigurationsUpdateExecute(r)
}

/*
JiraProductConfigurationsUpdate Method for JiraProductConfigurationsUpdate

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A unique integer value identifying this jir a_ project.
 @return ApiJiraProductConfigurationsUpdateRequest
*/
func (a *JiraProductConfigurationsAPIService) JiraProductConfigurationsUpdate(ctx context.Context, id int32) ApiJiraProductConfigurationsUpdateRequest {
	return ApiJiraProductConfigurationsUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return JIRAProject
func (a *JiraProductConfigurationsAPIService) JiraProductConfigurationsUpdateExecute(r ApiJiraProductConfigurationsUpdateRequest) (*JIRAProject, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *JIRAProject
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "JiraProductConfigurationsAPIService.JiraProductConfigurationsUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/jira_product_configurations/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.jIRAProjectRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
