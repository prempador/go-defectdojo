/*
Defect Dojo API v2

Defect Dojo - Open Source vulnerability Management made easy. Prefetch related parameters/responses not yet in the schema.

API version: 2.33.5
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package defectdojo

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MetaRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MetaRequest{}

// MetaRequest struct for MetaRequest
type MetaRequest struct {
	Product NullableInt32 `json:"product,omitempty"`
	Endpoint NullableInt32 `json:"endpoint,omitempty"`
	Finding NullableInt32 `json:"finding,omitempty"`
	Name string `json:"name"`
	Value string `json:"value"`
}

type _MetaRequest MetaRequest

// NewMetaRequest instantiates a new MetaRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetaRequest(name string, value string) *MetaRequest {
	this := MetaRequest{}
	this.Name = name
	this.Value = value
	return &this
}

// NewMetaRequestWithDefaults instantiates a new MetaRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetaRequestWithDefaults() *MetaRequest {
	this := MetaRequest{}
	return &this
}

// GetProduct returns the Product field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MetaRequest) GetProduct() int32 {
	if o == nil || IsNil(o.Product.Get()) {
		var ret int32
		return ret
	}
	return *o.Product.Get()
}

// GetProductOk returns a tuple with the Product field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MetaRequest) GetProductOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Product.Get(), o.Product.IsSet()
}

// HasProduct returns a boolean if a field has been set.
func (o *MetaRequest) HasProduct() bool {
	if o != nil && o.Product.IsSet() {
		return true
	}

	return false
}

// SetProduct gets a reference to the given NullableInt32 and assigns it to the Product field.
func (o *MetaRequest) SetProduct(v int32) {
	o.Product.Set(&v)
}
// SetProductNil sets the value for Product to be an explicit nil
func (o *MetaRequest) SetProductNil() {
	o.Product.Set(nil)
}

// UnsetProduct ensures that no value is present for Product, not even an explicit nil
func (o *MetaRequest) UnsetProduct() {
	o.Product.Unset()
}

// GetEndpoint returns the Endpoint field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MetaRequest) GetEndpoint() int32 {
	if o == nil || IsNil(o.Endpoint.Get()) {
		var ret int32
		return ret
	}
	return *o.Endpoint.Get()
}

// GetEndpointOk returns a tuple with the Endpoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MetaRequest) GetEndpointOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Endpoint.Get(), o.Endpoint.IsSet()
}

// HasEndpoint returns a boolean if a field has been set.
func (o *MetaRequest) HasEndpoint() bool {
	if o != nil && o.Endpoint.IsSet() {
		return true
	}

	return false
}

// SetEndpoint gets a reference to the given NullableInt32 and assigns it to the Endpoint field.
func (o *MetaRequest) SetEndpoint(v int32) {
	o.Endpoint.Set(&v)
}
// SetEndpointNil sets the value for Endpoint to be an explicit nil
func (o *MetaRequest) SetEndpointNil() {
	o.Endpoint.Set(nil)
}

// UnsetEndpoint ensures that no value is present for Endpoint, not even an explicit nil
func (o *MetaRequest) UnsetEndpoint() {
	o.Endpoint.Unset()
}

// GetFinding returns the Finding field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MetaRequest) GetFinding() int32 {
	if o == nil || IsNil(o.Finding.Get()) {
		var ret int32
		return ret
	}
	return *o.Finding.Get()
}

// GetFindingOk returns a tuple with the Finding field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MetaRequest) GetFindingOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Finding.Get(), o.Finding.IsSet()
}

// HasFinding returns a boolean if a field has been set.
func (o *MetaRequest) HasFinding() bool {
	if o != nil && o.Finding.IsSet() {
		return true
	}

	return false
}

// SetFinding gets a reference to the given NullableInt32 and assigns it to the Finding field.
func (o *MetaRequest) SetFinding(v int32) {
	o.Finding.Set(&v)
}
// SetFindingNil sets the value for Finding to be an explicit nil
func (o *MetaRequest) SetFindingNil() {
	o.Finding.Set(nil)
}

// UnsetFinding ensures that no value is present for Finding, not even an explicit nil
func (o *MetaRequest) UnsetFinding() {
	o.Finding.Unset()
}

// GetName returns the Name field value
func (o *MetaRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *MetaRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *MetaRequest) SetName(v string) {
	o.Name = v
}

// GetValue returns the Value field value
func (o *MetaRequest) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *MetaRequest) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *MetaRequest) SetValue(v string) {
	o.Value = v
}

func (o MetaRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MetaRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Product.IsSet() {
		toSerialize["product"] = o.Product.Get()
	}
	if o.Endpoint.IsSet() {
		toSerialize["endpoint"] = o.Endpoint.Get()
	}
	if o.Finding.IsSet() {
		toSerialize["finding"] = o.Finding.Get()
	}
	toSerialize["name"] = o.Name
	toSerialize["value"] = o.Value
	return toSerialize, nil
}

func (o *MetaRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"value",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMetaRequest := _MetaRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMetaRequest)

	if err != nil {
		return err
	}

	*o = MetaRequest(varMetaRequest)

	return err
}

type NullableMetaRequest struct {
	value *MetaRequest
	isSet bool
}

func (v NullableMetaRequest) Get() *MetaRequest {
	return v.value
}

func (v *NullableMetaRequest) Set(val *MetaRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableMetaRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableMetaRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetaRequest(val *MetaRequest) *NullableMetaRequest {
	return &NullableMetaRequest{value: val, isSet: true}
}

func (v NullableMetaRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetaRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


