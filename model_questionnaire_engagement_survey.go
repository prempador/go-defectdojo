/*
Defect Dojo API v2

Defect Dojo - Open Source vulnerability Management made easy. Prefetch related parameters/responses not yet in the schema.

API version: 2.38.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package defectdojo

import (
	"encoding/json"
	"fmt"
)

// checks if the QuestionnaireEngagementSurvey type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QuestionnaireEngagementSurvey{}

// QuestionnaireEngagementSurvey struct for QuestionnaireEngagementSurvey
type QuestionnaireEngagementSurvey struct {
	Id int32 `json:"id"`
	Questions []string `json:"questions"`
	Name *string `json:"name,omitempty"`
	Description *string `json:"description,omitempty"`
	Active *bool `json:"active,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _QuestionnaireEngagementSurvey QuestionnaireEngagementSurvey

// NewQuestionnaireEngagementSurvey instantiates a new QuestionnaireEngagementSurvey object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQuestionnaireEngagementSurvey(id int32, questions []string) *QuestionnaireEngagementSurvey {
	this := QuestionnaireEngagementSurvey{}
	this.Id = id
	this.Questions = questions
	return &this
}

// NewQuestionnaireEngagementSurveyWithDefaults instantiates a new QuestionnaireEngagementSurvey object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQuestionnaireEngagementSurveyWithDefaults() *QuestionnaireEngagementSurvey {
	this := QuestionnaireEngagementSurvey{}
	return &this
}

// GetId returns the Id field value
func (o *QuestionnaireEngagementSurvey) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *QuestionnaireEngagementSurvey) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *QuestionnaireEngagementSurvey) SetId(v int32) {
	o.Id = v
}


// GetQuestions returns the Questions field value
func (o *QuestionnaireEngagementSurvey) GetQuestions() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Questions
}

// GetQuestionsOk returns a tuple with the Questions field value
// and a boolean to check if the value has been set.
func (o *QuestionnaireEngagementSurvey) GetQuestionsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Questions, true
}

// SetQuestions sets field value
func (o *QuestionnaireEngagementSurvey) SetQuestions(v []string) {
	o.Questions = v
}


// GetName returns the Name field value if set, zero value otherwise.
func (o *QuestionnaireEngagementSurvey) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuestionnaireEngagementSurvey) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *QuestionnaireEngagementSurvey) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *QuestionnaireEngagementSurvey) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *QuestionnaireEngagementSurvey) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuestionnaireEngagementSurvey) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *QuestionnaireEngagementSurvey) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *QuestionnaireEngagementSurvey) SetDescription(v string) {
	o.Description = &v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *QuestionnaireEngagementSurvey) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuestionnaireEngagementSurvey) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *QuestionnaireEngagementSurvey) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *QuestionnaireEngagementSurvey) SetActive(v bool) {
	o.Active = &v
}

func (o QuestionnaireEngagementSurvey) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QuestionnaireEngagementSurvey) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["questions"] = o.Questions
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *QuestionnaireEngagementSurvey) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"questions",
	}

	// defaultValueFuncMap captures the default values for required properties.
	// These values are used when required properties are missing from the payload.
	defaultValueFuncMap := map[string]func() interface{} {
	}
	var defaultValueApplied bool
	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if value, exists := allProperties[requiredProperty]; !exists || value == "" {
			if _, ok := defaultValueFuncMap[requiredProperty]; ok {
				allProperties[requiredProperty] = defaultValueFuncMap[requiredProperty]()
				defaultValueApplied = true
			}
		}
		if value, exists := allProperties[requiredProperty]; !exists || value == ""{
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	if defaultValueApplied {
		data, err = json.Marshal(allProperties)
		if err != nil{
			return err
		}
	}
	varQuestionnaireEngagementSurvey := _QuestionnaireEngagementSurvey{}

	err = json.Unmarshal(data, &varQuestionnaireEngagementSurvey)

	if err != nil {
		return err
	}

	*o = QuestionnaireEngagementSurvey(varQuestionnaireEngagementSurvey)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "questions")
		delete(additionalProperties, "name")
		delete(additionalProperties, "description")
		delete(additionalProperties, "active")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableQuestionnaireEngagementSurvey struct {
	value *QuestionnaireEngagementSurvey
	isSet bool
}

func (v NullableQuestionnaireEngagementSurvey) Get() *QuestionnaireEngagementSurvey {
	return v.value
}

func (v *NullableQuestionnaireEngagementSurvey) Set(val *QuestionnaireEngagementSurvey) {
	v.value = val
	v.isSet = true
}

func (v NullableQuestionnaireEngagementSurvey) IsSet() bool {
	return v.isSet
}

func (v *NullableQuestionnaireEngagementSurvey) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQuestionnaireEngagementSurvey(val *QuestionnaireEngagementSurvey) *NullableQuestionnaireEngagementSurvey {
	return &NullableQuestionnaireEngagementSurvey{value: val, isSet: true}
}

func (v NullableQuestionnaireEngagementSurvey) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQuestionnaireEngagementSurvey) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


