/*
Defect Dojo API v2

Defect Dojo - Open Source vulnerability Management made easy. Prefetch related parameters/responses not yet in the schema.

API version: 2.30.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package defectdojo

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the Engagement type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Engagement{}

// Engagement struct for Engagement
type Engagement struct {
	Id int32 `json:"id"`
	Tags []string `json:"tags,omitempty"`
	Name NullableString `json:"name,omitempty"`
	Description NullableString `json:"description,omitempty"`
	// Version of the product the engagement tested.
	Version NullableString `json:"version,omitempty"`
	FirstContacted NullableString `json:"first_contacted,omitempty"`
	TargetStart string `json:"target_start"`
	TargetEnd string `json:"target_end"`
	Reason NullableString `json:"reason,omitempty"`
	Updated NullableTime `json:"updated"`
	Created NullableTime `json:"created"`
	Active bool `json:"active"`
	// Link to epic or ticket system with changes to version.
	Tracker NullableString `json:"tracker,omitempty"`
	TestStrategy NullableString `json:"test_strategy,omitempty"`
	ThreatModel *bool `json:"threat_model,omitempty"`
	ApiTest *bool `json:"api_test,omitempty"`
	PenTest *bool `json:"pen_test,omitempty"`
	CheckList *bool `json:"check_list,omitempty"`
	// * `Not Started` - Not Started * `Blocked` - Blocked * `Cancelled` - Cancelled * `Completed` - Completed * `In Progress` - In Progress * `On Hold` - On Hold * `Waiting for Resource` - Waiting for Resource
	Status NullableString `json:"status,omitempty"`
	Progress string `json:"progress"`
	TmodelPath NullableString `json:"tmodel_path"`
	DoneTesting bool `json:"done_testing"`
	// * `Interactive` - Interactive * `CI/CD` - CI/CD
	EngagementType NullableString `json:"engagement_type,omitempty"`
	// Build ID of the product the engagement tested.
	BuildId NullableString `json:"build_id,omitempty"`
	// Commit hash from repo
	CommitHash NullableString `json:"commit_hash,omitempty"`
	// Tag or branch of the product the engagement tested.
	BranchTag NullableString `json:"branch_tag,omitempty"`
	// Resource link to source code
	SourceCodeManagementUri NullableString `json:"source_code_management_uri,omitempty"`
	// If enabled deduplication will only mark a finding in this engagement as duplicate of another finding if both findings are in this engagement. If disabled, deduplication is on the product level.
	DeduplicationOnEngagement *bool `json:"deduplication_on_engagement,omitempty"`
	Lead NullableInt32 `json:"lead,omitempty"`
	Requester NullableInt32 `json:"requester,omitempty"`
	// Settings and notes for performing this engagement.
	Preset NullableInt32 `json:"preset,omitempty"`
	ReportType NullableInt32 `json:"report_type,omitempty"`
	Product int32 `json:"product"`
	// Build server responsible for CI/CD test
	BuildServer NullableInt32 `json:"build_server,omitempty"`
	// Source code server for CI/CD test
	SourceCodeManagementServer NullableInt32 `json:"source_code_management_server,omitempty"`
	// Orchestration service responsible for CI/CD test
	OrchestrationEngine NullableInt32 `json:"orchestration_engine,omitempty"`
	Notes []Note `json:"notes"`
	Files []File `json:"files"`
	RiskAcceptance []int32 `json:"risk_acceptance"`
}

type _Engagement Engagement

// NewEngagement instantiates a new Engagement object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEngagement(id int32, targetStart string, targetEnd string, updated NullableTime, created NullableTime, active bool, progress string, tmodelPath NullableString, doneTesting bool, product int32, notes []Note, files []File, riskAcceptance []int32) *Engagement {
	this := Engagement{}
	this.Id = id
	this.TargetStart = targetStart
	this.TargetEnd = targetEnd
	this.Updated = updated
	this.Created = created
	this.Active = active
	this.Progress = progress
	this.TmodelPath = tmodelPath
	this.DoneTesting = doneTesting
	this.Product = product
	this.Notes = notes
	this.Files = files
	this.RiskAcceptance = riskAcceptance
	return &this
}

// NewEngagementWithDefaults instantiates a new Engagement object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEngagementWithDefaults() *Engagement {
	this := Engagement{}
	return &this
}

// GetId returns the Id field value
func (o *Engagement) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Engagement) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Engagement) SetId(v int32) {
	o.Id = v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *Engagement) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Engagement) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *Engagement) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *Engagement) SetTags(v []string) {
	o.Tags = v
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Engagement) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Engagement) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *Engagement) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *Engagement) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *Engagement) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *Engagement) UnsetName() {
	o.Name.Unset()
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Engagement) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Engagement) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *Engagement) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *Engagement) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *Engagement) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *Engagement) UnsetDescription() {
	o.Description.Unset()
}

// GetVersion returns the Version field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Engagement) GetVersion() string {
	if o == nil || IsNil(o.Version.Get()) {
		var ret string
		return ret
	}
	return *o.Version.Get()
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Engagement) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Version.Get(), o.Version.IsSet()
}

// HasVersion returns a boolean if a field has been set.
func (o *Engagement) HasVersion() bool {
	if o != nil && o.Version.IsSet() {
		return true
	}

	return false
}

// SetVersion gets a reference to the given NullableString and assigns it to the Version field.
func (o *Engagement) SetVersion(v string) {
	o.Version.Set(&v)
}
// SetVersionNil sets the value for Version to be an explicit nil
func (o *Engagement) SetVersionNil() {
	o.Version.Set(nil)
}

// UnsetVersion ensures that no value is present for Version, not even an explicit nil
func (o *Engagement) UnsetVersion() {
	o.Version.Unset()
}

// GetFirstContacted returns the FirstContacted field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Engagement) GetFirstContacted() string {
	if o == nil || IsNil(o.FirstContacted.Get()) {
		var ret string
		return ret
	}
	return *o.FirstContacted.Get()
}

// GetFirstContactedOk returns a tuple with the FirstContacted field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Engagement) GetFirstContactedOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FirstContacted.Get(), o.FirstContacted.IsSet()
}

// HasFirstContacted returns a boolean if a field has been set.
func (o *Engagement) HasFirstContacted() bool {
	if o != nil && o.FirstContacted.IsSet() {
		return true
	}

	return false
}

// SetFirstContacted gets a reference to the given NullableString and assigns it to the FirstContacted field.
func (o *Engagement) SetFirstContacted(v string) {
	o.FirstContacted.Set(&v)
}
// SetFirstContactedNil sets the value for FirstContacted to be an explicit nil
func (o *Engagement) SetFirstContactedNil() {
	o.FirstContacted.Set(nil)
}

// UnsetFirstContacted ensures that no value is present for FirstContacted, not even an explicit nil
func (o *Engagement) UnsetFirstContacted() {
	o.FirstContacted.Unset()
}

// GetTargetStart returns the TargetStart field value
func (o *Engagement) GetTargetStart() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TargetStart
}

// GetTargetStartOk returns a tuple with the TargetStart field value
// and a boolean to check if the value has been set.
func (o *Engagement) GetTargetStartOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TargetStart, true
}

// SetTargetStart sets field value
func (o *Engagement) SetTargetStart(v string) {
	o.TargetStart = v
}

// GetTargetEnd returns the TargetEnd field value
func (o *Engagement) GetTargetEnd() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TargetEnd
}

// GetTargetEndOk returns a tuple with the TargetEnd field value
// and a boolean to check if the value has been set.
func (o *Engagement) GetTargetEndOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TargetEnd, true
}

// SetTargetEnd sets field value
func (o *Engagement) SetTargetEnd(v string) {
	o.TargetEnd = v
}

// GetReason returns the Reason field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Engagement) GetReason() string {
	if o == nil || IsNil(o.Reason.Get()) {
		var ret string
		return ret
	}
	return *o.Reason.Get()
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Engagement) GetReasonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Reason.Get(), o.Reason.IsSet()
}

// HasReason returns a boolean if a field has been set.
func (o *Engagement) HasReason() bool {
	if o != nil && o.Reason.IsSet() {
		return true
	}

	return false
}

// SetReason gets a reference to the given NullableString and assigns it to the Reason field.
func (o *Engagement) SetReason(v string) {
	o.Reason.Set(&v)
}
// SetReasonNil sets the value for Reason to be an explicit nil
func (o *Engagement) SetReasonNil() {
	o.Reason.Set(nil)
}

// UnsetReason ensures that no value is present for Reason, not even an explicit nil
func (o *Engagement) UnsetReason() {
	o.Reason.Unset()
}

// GetUpdated returns the Updated field value
// If the value is explicit nil, the zero value for time.Time will be returned
func (o *Engagement) GetUpdated() time.Time {
	if o == nil || o.Updated.Get() == nil {
		var ret time.Time
		return ret
	}

	return *o.Updated.Get()
}

// GetUpdatedOk returns a tuple with the Updated field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Engagement) GetUpdatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.Updated.Get(), o.Updated.IsSet()
}

// SetUpdated sets field value
func (o *Engagement) SetUpdated(v time.Time) {
	o.Updated.Set(&v)
}

// GetCreated returns the Created field value
// If the value is explicit nil, the zero value for time.Time will be returned
func (o *Engagement) GetCreated() time.Time {
	if o == nil || o.Created.Get() == nil {
		var ret time.Time
		return ret
	}

	return *o.Created.Get()
}

// GetCreatedOk returns a tuple with the Created field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Engagement) GetCreatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.Created.Get(), o.Created.IsSet()
}

// SetCreated sets field value
func (o *Engagement) SetCreated(v time.Time) {
	o.Created.Set(&v)
}

// GetActive returns the Active field value
func (o *Engagement) GetActive() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Active
}

// GetActiveOk returns a tuple with the Active field value
// and a boolean to check if the value has been set.
func (o *Engagement) GetActiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Active, true
}

// SetActive sets field value
func (o *Engagement) SetActive(v bool) {
	o.Active = v
}

// GetTracker returns the Tracker field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Engagement) GetTracker() string {
	if o == nil || IsNil(o.Tracker.Get()) {
		var ret string
		return ret
	}
	return *o.Tracker.Get()
}

// GetTrackerOk returns a tuple with the Tracker field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Engagement) GetTrackerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Tracker.Get(), o.Tracker.IsSet()
}

// HasTracker returns a boolean if a field has been set.
func (o *Engagement) HasTracker() bool {
	if o != nil && o.Tracker.IsSet() {
		return true
	}

	return false
}

// SetTracker gets a reference to the given NullableString and assigns it to the Tracker field.
func (o *Engagement) SetTracker(v string) {
	o.Tracker.Set(&v)
}
// SetTrackerNil sets the value for Tracker to be an explicit nil
func (o *Engagement) SetTrackerNil() {
	o.Tracker.Set(nil)
}

// UnsetTracker ensures that no value is present for Tracker, not even an explicit nil
func (o *Engagement) UnsetTracker() {
	o.Tracker.Unset()
}

// GetTestStrategy returns the TestStrategy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Engagement) GetTestStrategy() string {
	if o == nil || IsNil(o.TestStrategy.Get()) {
		var ret string
		return ret
	}
	return *o.TestStrategy.Get()
}

// GetTestStrategyOk returns a tuple with the TestStrategy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Engagement) GetTestStrategyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TestStrategy.Get(), o.TestStrategy.IsSet()
}

// HasTestStrategy returns a boolean if a field has been set.
func (o *Engagement) HasTestStrategy() bool {
	if o != nil && o.TestStrategy.IsSet() {
		return true
	}

	return false
}

// SetTestStrategy gets a reference to the given NullableString and assigns it to the TestStrategy field.
func (o *Engagement) SetTestStrategy(v string) {
	o.TestStrategy.Set(&v)
}
// SetTestStrategyNil sets the value for TestStrategy to be an explicit nil
func (o *Engagement) SetTestStrategyNil() {
	o.TestStrategy.Set(nil)
}

// UnsetTestStrategy ensures that no value is present for TestStrategy, not even an explicit nil
func (o *Engagement) UnsetTestStrategy() {
	o.TestStrategy.Unset()
}

// GetThreatModel returns the ThreatModel field value if set, zero value otherwise.
func (o *Engagement) GetThreatModel() bool {
	if o == nil || IsNil(o.ThreatModel) {
		var ret bool
		return ret
	}
	return *o.ThreatModel
}

// GetThreatModelOk returns a tuple with the ThreatModel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Engagement) GetThreatModelOk() (*bool, bool) {
	if o == nil || IsNil(o.ThreatModel) {
		return nil, false
	}
	return o.ThreatModel, true
}

// HasThreatModel returns a boolean if a field has been set.
func (o *Engagement) HasThreatModel() bool {
	if o != nil && !IsNil(o.ThreatModel) {
		return true
	}

	return false
}

// SetThreatModel gets a reference to the given bool and assigns it to the ThreatModel field.
func (o *Engagement) SetThreatModel(v bool) {
	o.ThreatModel = &v
}

// GetApiTest returns the ApiTest field value if set, zero value otherwise.
func (o *Engagement) GetApiTest() bool {
	if o == nil || IsNil(o.ApiTest) {
		var ret bool
		return ret
	}
	return *o.ApiTest
}

// GetApiTestOk returns a tuple with the ApiTest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Engagement) GetApiTestOk() (*bool, bool) {
	if o == nil || IsNil(o.ApiTest) {
		return nil, false
	}
	return o.ApiTest, true
}

// HasApiTest returns a boolean if a field has been set.
func (o *Engagement) HasApiTest() bool {
	if o != nil && !IsNil(o.ApiTest) {
		return true
	}

	return false
}

// SetApiTest gets a reference to the given bool and assigns it to the ApiTest field.
func (o *Engagement) SetApiTest(v bool) {
	o.ApiTest = &v
}

// GetPenTest returns the PenTest field value if set, zero value otherwise.
func (o *Engagement) GetPenTest() bool {
	if o == nil || IsNil(o.PenTest) {
		var ret bool
		return ret
	}
	return *o.PenTest
}

// GetPenTestOk returns a tuple with the PenTest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Engagement) GetPenTestOk() (*bool, bool) {
	if o == nil || IsNil(o.PenTest) {
		return nil, false
	}
	return o.PenTest, true
}

// HasPenTest returns a boolean if a field has been set.
func (o *Engagement) HasPenTest() bool {
	if o != nil && !IsNil(o.PenTest) {
		return true
	}

	return false
}

// SetPenTest gets a reference to the given bool and assigns it to the PenTest field.
func (o *Engagement) SetPenTest(v bool) {
	o.PenTest = &v
}

// GetCheckList returns the CheckList field value if set, zero value otherwise.
func (o *Engagement) GetCheckList() bool {
	if o == nil || IsNil(o.CheckList) {
		var ret bool
		return ret
	}
	return *o.CheckList
}

// GetCheckListOk returns a tuple with the CheckList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Engagement) GetCheckListOk() (*bool, bool) {
	if o == nil || IsNil(o.CheckList) {
		return nil, false
	}
	return o.CheckList, true
}

// HasCheckList returns a boolean if a field has been set.
func (o *Engagement) HasCheckList() bool {
	if o != nil && !IsNil(o.CheckList) {
		return true
	}

	return false
}

// SetCheckList gets a reference to the given bool and assigns it to the CheckList field.
func (o *Engagement) SetCheckList(v bool) {
	o.CheckList = &v
}

// GetStatus returns the Status field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Engagement) GetStatus() string {
	if o == nil || IsNil(o.Status.Get()) {
		var ret string
		return ret
	}
	return *o.Status.Get()
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Engagement) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Status.Get(), o.Status.IsSet()
}

// HasStatus returns a boolean if a field has been set.
func (o *Engagement) HasStatus() bool {
	if o != nil && o.Status.IsSet() {
		return true
	}

	return false
}

// SetStatus gets a reference to the given NullableString and assigns it to the Status field.
func (o *Engagement) SetStatus(v string) {
	o.Status.Set(&v)
}
// SetStatusNil sets the value for Status to be an explicit nil
func (o *Engagement) SetStatusNil() {
	o.Status.Set(nil)
}

// UnsetStatus ensures that no value is present for Status, not even an explicit nil
func (o *Engagement) UnsetStatus() {
	o.Status.Unset()
}

// GetProgress returns the Progress field value
func (o *Engagement) GetProgress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Progress
}

// GetProgressOk returns a tuple with the Progress field value
// and a boolean to check if the value has been set.
func (o *Engagement) GetProgressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Progress, true
}

// SetProgress sets field value
func (o *Engagement) SetProgress(v string) {
	o.Progress = v
}

// GetTmodelPath returns the TmodelPath field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Engagement) GetTmodelPath() string {
	if o == nil || o.TmodelPath.Get() == nil {
		var ret string
		return ret
	}

	return *o.TmodelPath.Get()
}

// GetTmodelPathOk returns a tuple with the TmodelPath field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Engagement) GetTmodelPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TmodelPath.Get(), o.TmodelPath.IsSet()
}

// SetTmodelPath sets field value
func (o *Engagement) SetTmodelPath(v string) {
	o.TmodelPath.Set(&v)
}

// GetDoneTesting returns the DoneTesting field value
func (o *Engagement) GetDoneTesting() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.DoneTesting
}

// GetDoneTestingOk returns a tuple with the DoneTesting field value
// and a boolean to check if the value has been set.
func (o *Engagement) GetDoneTestingOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DoneTesting, true
}

// SetDoneTesting sets field value
func (o *Engagement) SetDoneTesting(v bool) {
	o.DoneTesting = v
}

// GetEngagementType returns the EngagementType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Engagement) GetEngagementType() string {
	if o == nil || IsNil(o.EngagementType.Get()) {
		var ret string
		return ret
	}
	return *o.EngagementType.Get()
}

// GetEngagementTypeOk returns a tuple with the EngagementType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Engagement) GetEngagementTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EngagementType.Get(), o.EngagementType.IsSet()
}

// HasEngagementType returns a boolean if a field has been set.
func (o *Engagement) HasEngagementType() bool {
	if o != nil && o.EngagementType.IsSet() {
		return true
	}

	return false
}

// SetEngagementType gets a reference to the given NullableString and assigns it to the EngagementType field.
func (o *Engagement) SetEngagementType(v string) {
	o.EngagementType.Set(&v)
}
// SetEngagementTypeNil sets the value for EngagementType to be an explicit nil
func (o *Engagement) SetEngagementTypeNil() {
	o.EngagementType.Set(nil)
}

// UnsetEngagementType ensures that no value is present for EngagementType, not even an explicit nil
func (o *Engagement) UnsetEngagementType() {
	o.EngagementType.Unset()
}

// GetBuildId returns the BuildId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Engagement) GetBuildId() string {
	if o == nil || IsNil(o.BuildId.Get()) {
		var ret string
		return ret
	}
	return *o.BuildId.Get()
}

// GetBuildIdOk returns a tuple with the BuildId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Engagement) GetBuildIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BuildId.Get(), o.BuildId.IsSet()
}

// HasBuildId returns a boolean if a field has been set.
func (o *Engagement) HasBuildId() bool {
	if o != nil && o.BuildId.IsSet() {
		return true
	}

	return false
}

// SetBuildId gets a reference to the given NullableString and assigns it to the BuildId field.
func (o *Engagement) SetBuildId(v string) {
	o.BuildId.Set(&v)
}
// SetBuildIdNil sets the value for BuildId to be an explicit nil
func (o *Engagement) SetBuildIdNil() {
	o.BuildId.Set(nil)
}

// UnsetBuildId ensures that no value is present for BuildId, not even an explicit nil
func (o *Engagement) UnsetBuildId() {
	o.BuildId.Unset()
}

// GetCommitHash returns the CommitHash field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Engagement) GetCommitHash() string {
	if o == nil || IsNil(o.CommitHash.Get()) {
		var ret string
		return ret
	}
	return *o.CommitHash.Get()
}

// GetCommitHashOk returns a tuple with the CommitHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Engagement) GetCommitHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CommitHash.Get(), o.CommitHash.IsSet()
}

// HasCommitHash returns a boolean if a field has been set.
func (o *Engagement) HasCommitHash() bool {
	if o != nil && o.CommitHash.IsSet() {
		return true
	}

	return false
}

// SetCommitHash gets a reference to the given NullableString and assigns it to the CommitHash field.
func (o *Engagement) SetCommitHash(v string) {
	o.CommitHash.Set(&v)
}
// SetCommitHashNil sets the value for CommitHash to be an explicit nil
func (o *Engagement) SetCommitHashNil() {
	o.CommitHash.Set(nil)
}

// UnsetCommitHash ensures that no value is present for CommitHash, not even an explicit nil
func (o *Engagement) UnsetCommitHash() {
	o.CommitHash.Unset()
}

// GetBranchTag returns the BranchTag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Engagement) GetBranchTag() string {
	if o == nil || IsNil(o.BranchTag.Get()) {
		var ret string
		return ret
	}
	return *o.BranchTag.Get()
}

// GetBranchTagOk returns a tuple with the BranchTag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Engagement) GetBranchTagOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BranchTag.Get(), o.BranchTag.IsSet()
}

// HasBranchTag returns a boolean if a field has been set.
func (o *Engagement) HasBranchTag() bool {
	if o != nil && o.BranchTag.IsSet() {
		return true
	}

	return false
}

// SetBranchTag gets a reference to the given NullableString and assigns it to the BranchTag field.
func (o *Engagement) SetBranchTag(v string) {
	o.BranchTag.Set(&v)
}
// SetBranchTagNil sets the value for BranchTag to be an explicit nil
func (o *Engagement) SetBranchTagNil() {
	o.BranchTag.Set(nil)
}

// UnsetBranchTag ensures that no value is present for BranchTag, not even an explicit nil
func (o *Engagement) UnsetBranchTag() {
	o.BranchTag.Unset()
}

// GetSourceCodeManagementUri returns the SourceCodeManagementUri field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Engagement) GetSourceCodeManagementUri() string {
	if o == nil || IsNil(o.SourceCodeManagementUri.Get()) {
		var ret string
		return ret
	}
	return *o.SourceCodeManagementUri.Get()
}

// GetSourceCodeManagementUriOk returns a tuple with the SourceCodeManagementUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Engagement) GetSourceCodeManagementUriOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SourceCodeManagementUri.Get(), o.SourceCodeManagementUri.IsSet()
}

// HasSourceCodeManagementUri returns a boolean if a field has been set.
func (o *Engagement) HasSourceCodeManagementUri() bool {
	if o != nil && o.SourceCodeManagementUri.IsSet() {
		return true
	}

	return false
}

// SetSourceCodeManagementUri gets a reference to the given NullableString and assigns it to the SourceCodeManagementUri field.
func (o *Engagement) SetSourceCodeManagementUri(v string) {
	o.SourceCodeManagementUri.Set(&v)
}
// SetSourceCodeManagementUriNil sets the value for SourceCodeManagementUri to be an explicit nil
func (o *Engagement) SetSourceCodeManagementUriNil() {
	o.SourceCodeManagementUri.Set(nil)
}

// UnsetSourceCodeManagementUri ensures that no value is present for SourceCodeManagementUri, not even an explicit nil
func (o *Engagement) UnsetSourceCodeManagementUri() {
	o.SourceCodeManagementUri.Unset()
}

// GetDeduplicationOnEngagement returns the DeduplicationOnEngagement field value if set, zero value otherwise.
func (o *Engagement) GetDeduplicationOnEngagement() bool {
	if o == nil || IsNil(o.DeduplicationOnEngagement) {
		var ret bool
		return ret
	}
	return *o.DeduplicationOnEngagement
}

// GetDeduplicationOnEngagementOk returns a tuple with the DeduplicationOnEngagement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Engagement) GetDeduplicationOnEngagementOk() (*bool, bool) {
	if o == nil || IsNil(o.DeduplicationOnEngagement) {
		return nil, false
	}
	return o.DeduplicationOnEngagement, true
}

// HasDeduplicationOnEngagement returns a boolean if a field has been set.
func (o *Engagement) HasDeduplicationOnEngagement() bool {
	if o != nil && !IsNil(o.DeduplicationOnEngagement) {
		return true
	}

	return false
}

// SetDeduplicationOnEngagement gets a reference to the given bool and assigns it to the DeduplicationOnEngagement field.
func (o *Engagement) SetDeduplicationOnEngagement(v bool) {
	o.DeduplicationOnEngagement = &v
}

// GetLead returns the Lead field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Engagement) GetLead() int32 {
	if o == nil || IsNil(o.Lead.Get()) {
		var ret int32
		return ret
	}
	return *o.Lead.Get()
}

// GetLeadOk returns a tuple with the Lead field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Engagement) GetLeadOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Lead.Get(), o.Lead.IsSet()
}

// HasLead returns a boolean if a field has been set.
func (o *Engagement) HasLead() bool {
	if o != nil && o.Lead.IsSet() {
		return true
	}

	return false
}

// SetLead gets a reference to the given NullableInt32 and assigns it to the Lead field.
func (o *Engagement) SetLead(v int32) {
	o.Lead.Set(&v)
}
// SetLeadNil sets the value for Lead to be an explicit nil
func (o *Engagement) SetLeadNil() {
	o.Lead.Set(nil)
}

// UnsetLead ensures that no value is present for Lead, not even an explicit nil
func (o *Engagement) UnsetLead() {
	o.Lead.Unset()
}

// GetRequester returns the Requester field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Engagement) GetRequester() int32 {
	if o == nil || IsNil(o.Requester.Get()) {
		var ret int32
		return ret
	}
	return *o.Requester.Get()
}

// GetRequesterOk returns a tuple with the Requester field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Engagement) GetRequesterOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Requester.Get(), o.Requester.IsSet()
}

// HasRequester returns a boolean if a field has been set.
func (o *Engagement) HasRequester() bool {
	if o != nil && o.Requester.IsSet() {
		return true
	}

	return false
}

// SetRequester gets a reference to the given NullableInt32 and assigns it to the Requester field.
func (o *Engagement) SetRequester(v int32) {
	o.Requester.Set(&v)
}
// SetRequesterNil sets the value for Requester to be an explicit nil
func (o *Engagement) SetRequesterNil() {
	o.Requester.Set(nil)
}

// UnsetRequester ensures that no value is present for Requester, not even an explicit nil
func (o *Engagement) UnsetRequester() {
	o.Requester.Unset()
}

// GetPreset returns the Preset field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Engagement) GetPreset() int32 {
	if o == nil || IsNil(o.Preset.Get()) {
		var ret int32
		return ret
	}
	return *o.Preset.Get()
}

// GetPresetOk returns a tuple with the Preset field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Engagement) GetPresetOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Preset.Get(), o.Preset.IsSet()
}

// HasPreset returns a boolean if a field has been set.
func (o *Engagement) HasPreset() bool {
	if o != nil && o.Preset.IsSet() {
		return true
	}

	return false
}

// SetPreset gets a reference to the given NullableInt32 and assigns it to the Preset field.
func (o *Engagement) SetPreset(v int32) {
	o.Preset.Set(&v)
}
// SetPresetNil sets the value for Preset to be an explicit nil
func (o *Engagement) SetPresetNil() {
	o.Preset.Set(nil)
}

// UnsetPreset ensures that no value is present for Preset, not even an explicit nil
func (o *Engagement) UnsetPreset() {
	o.Preset.Unset()
}

// GetReportType returns the ReportType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Engagement) GetReportType() int32 {
	if o == nil || IsNil(o.ReportType.Get()) {
		var ret int32
		return ret
	}
	return *o.ReportType.Get()
}

// GetReportTypeOk returns a tuple with the ReportType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Engagement) GetReportTypeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ReportType.Get(), o.ReportType.IsSet()
}

// HasReportType returns a boolean if a field has been set.
func (o *Engagement) HasReportType() bool {
	if o != nil && o.ReportType.IsSet() {
		return true
	}

	return false
}

// SetReportType gets a reference to the given NullableInt32 and assigns it to the ReportType field.
func (o *Engagement) SetReportType(v int32) {
	o.ReportType.Set(&v)
}
// SetReportTypeNil sets the value for ReportType to be an explicit nil
func (o *Engagement) SetReportTypeNil() {
	o.ReportType.Set(nil)
}

// UnsetReportType ensures that no value is present for ReportType, not even an explicit nil
func (o *Engagement) UnsetReportType() {
	o.ReportType.Unset()
}

// GetProduct returns the Product field value
func (o *Engagement) GetProduct() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Product
}

// GetProductOk returns a tuple with the Product field value
// and a boolean to check if the value has been set.
func (o *Engagement) GetProductOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Product, true
}

// SetProduct sets field value
func (o *Engagement) SetProduct(v int32) {
	o.Product = v
}

// GetBuildServer returns the BuildServer field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Engagement) GetBuildServer() int32 {
	if o == nil || IsNil(o.BuildServer.Get()) {
		var ret int32
		return ret
	}
	return *o.BuildServer.Get()
}

// GetBuildServerOk returns a tuple with the BuildServer field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Engagement) GetBuildServerOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.BuildServer.Get(), o.BuildServer.IsSet()
}

// HasBuildServer returns a boolean if a field has been set.
func (o *Engagement) HasBuildServer() bool {
	if o != nil && o.BuildServer.IsSet() {
		return true
	}

	return false
}

// SetBuildServer gets a reference to the given NullableInt32 and assigns it to the BuildServer field.
func (o *Engagement) SetBuildServer(v int32) {
	o.BuildServer.Set(&v)
}
// SetBuildServerNil sets the value for BuildServer to be an explicit nil
func (o *Engagement) SetBuildServerNil() {
	o.BuildServer.Set(nil)
}

// UnsetBuildServer ensures that no value is present for BuildServer, not even an explicit nil
func (o *Engagement) UnsetBuildServer() {
	o.BuildServer.Unset()
}

// GetSourceCodeManagementServer returns the SourceCodeManagementServer field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Engagement) GetSourceCodeManagementServer() int32 {
	if o == nil || IsNil(o.SourceCodeManagementServer.Get()) {
		var ret int32
		return ret
	}
	return *o.SourceCodeManagementServer.Get()
}

// GetSourceCodeManagementServerOk returns a tuple with the SourceCodeManagementServer field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Engagement) GetSourceCodeManagementServerOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.SourceCodeManagementServer.Get(), o.SourceCodeManagementServer.IsSet()
}

// HasSourceCodeManagementServer returns a boolean if a field has been set.
func (o *Engagement) HasSourceCodeManagementServer() bool {
	if o != nil && o.SourceCodeManagementServer.IsSet() {
		return true
	}

	return false
}

// SetSourceCodeManagementServer gets a reference to the given NullableInt32 and assigns it to the SourceCodeManagementServer field.
func (o *Engagement) SetSourceCodeManagementServer(v int32) {
	o.SourceCodeManagementServer.Set(&v)
}
// SetSourceCodeManagementServerNil sets the value for SourceCodeManagementServer to be an explicit nil
func (o *Engagement) SetSourceCodeManagementServerNil() {
	o.SourceCodeManagementServer.Set(nil)
}

// UnsetSourceCodeManagementServer ensures that no value is present for SourceCodeManagementServer, not even an explicit nil
func (o *Engagement) UnsetSourceCodeManagementServer() {
	o.SourceCodeManagementServer.Unset()
}

// GetOrchestrationEngine returns the OrchestrationEngine field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Engagement) GetOrchestrationEngine() int32 {
	if o == nil || IsNil(o.OrchestrationEngine.Get()) {
		var ret int32
		return ret
	}
	return *o.OrchestrationEngine.Get()
}

// GetOrchestrationEngineOk returns a tuple with the OrchestrationEngine field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Engagement) GetOrchestrationEngineOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.OrchestrationEngine.Get(), o.OrchestrationEngine.IsSet()
}

// HasOrchestrationEngine returns a boolean if a field has been set.
func (o *Engagement) HasOrchestrationEngine() bool {
	if o != nil && o.OrchestrationEngine.IsSet() {
		return true
	}

	return false
}

// SetOrchestrationEngine gets a reference to the given NullableInt32 and assigns it to the OrchestrationEngine field.
func (o *Engagement) SetOrchestrationEngine(v int32) {
	o.OrchestrationEngine.Set(&v)
}
// SetOrchestrationEngineNil sets the value for OrchestrationEngine to be an explicit nil
func (o *Engagement) SetOrchestrationEngineNil() {
	o.OrchestrationEngine.Set(nil)
}

// UnsetOrchestrationEngine ensures that no value is present for OrchestrationEngine, not even an explicit nil
func (o *Engagement) UnsetOrchestrationEngine() {
	o.OrchestrationEngine.Unset()
}

// GetNotes returns the Notes field value
func (o *Engagement) GetNotes() []Note {
	if o == nil {
		var ret []Note
		return ret
	}

	return o.Notes
}

// GetNotesOk returns a tuple with the Notes field value
// and a boolean to check if the value has been set.
func (o *Engagement) GetNotesOk() ([]Note, bool) {
	if o == nil {
		return nil, false
	}
	return o.Notes, true
}

// SetNotes sets field value
func (o *Engagement) SetNotes(v []Note) {
	o.Notes = v
}

// GetFiles returns the Files field value
func (o *Engagement) GetFiles() []File {
	if o == nil {
		var ret []File
		return ret
	}

	return o.Files
}

// GetFilesOk returns a tuple with the Files field value
// and a boolean to check if the value has been set.
func (o *Engagement) GetFilesOk() ([]File, bool) {
	if o == nil {
		return nil, false
	}
	return o.Files, true
}

// SetFiles sets field value
func (o *Engagement) SetFiles(v []File) {
	o.Files = v
}

// GetRiskAcceptance returns the RiskAcceptance field value
func (o *Engagement) GetRiskAcceptance() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}

	return o.RiskAcceptance
}

// GetRiskAcceptanceOk returns a tuple with the RiskAcceptance field value
// and a boolean to check if the value has been set.
func (o *Engagement) GetRiskAcceptanceOk() ([]int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.RiskAcceptance, true
}

// SetRiskAcceptance sets field value
func (o *Engagement) SetRiskAcceptance(v []int32) {
	o.RiskAcceptance = v
}

func (o Engagement) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Engagement) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.Version.IsSet() {
		toSerialize["version"] = o.Version.Get()
	}
	if o.FirstContacted.IsSet() {
		toSerialize["first_contacted"] = o.FirstContacted.Get()
	}
	toSerialize["target_start"] = o.TargetStart
	toSerialize["target_end"] = o.TargetEnd
	if o.Reason.IsSet() {
		toSerialize["reason"] = o.Reason.Get()
	}
	toSerialize["updated"] = o.Updated.Get()
	toSerialize["created"] = o.Created.Get()
	toSerialize["active"] = o.Active
	if o.Tracker.IsSet() {
		toSerialize["tracker"] = o.Tracker.Get()
	}
	if o.TestStrategy.IsSet() {
		toSerialize["test_strategy"] = o.TestStrategy.Get()
	}
	if !IsNil(o.ThreatModel) {
		toSerialize["threat_model"] = o.ThreatModel
	}
	if !IsNil(o.ApiTest) {
		toSerialize["api_test"] = o.ApiTest
	}
	if !IsNil(o.PenTest) {
		toSerialize["pen_test"] = o.PenTest
	}
	if !IsNil(o.CheckList) {
		toSerialize["check_list"] = o.CheckList
	}
	if o.Status.IsSet() {
		toSerialize["status"] = o.Status.Get()
	}
	toSerialize["progress"] = o.Progress
	toSerialize["tmodel_path"] = o.TmodelPath.Get()
	toSerialize["done_testing"] = o.DoneTesting
	if o.EngagementType.IsSet() {
		toSerialize["engagement_type"] = o.EngagementType.Get()
	}
	if o.BuildId.IsSet() {
		toSerialize["build_id"] = o.BuildId.Get()
	}
	if o.CommitHash.IsSet() {
		toSerialize["commit_hash"] = o.CommitHash.Get()
	}
	if o.BranchTag.IsSet() {
		toSerialize["branch_tag"] = o.BranchTag.Get()
	}
	if o.SourceCodeManagementUri.IsSet() {
		toSerialize["source_code_management_uri"] = o.SourceCodeManagementUri.Get()
	}
	if !IsNil(o.DeduplicationOnEngagement) {
		toSerialize["deduplication_on_engagement"] = o.DeduplicationOnEngagement
	}
	if o.Lead.IsSet() {
		toSerialize["lead"] = o.Lead.Get()
	}
	if o.Requester.IsSet() {
		toSerialize["requester"] = o.Requester.Get()
	}
	if o.Preset.IsSet() {
		toSerialize["preset"] = o.Preset.Get()
	}
	if o.ReportType.IsSet() {
		toSerialize["report_type"] = o.ReportType.Get()
	}
	toSerialize["product"] = o.Product
	if o.BuildServer.IsSet() {
		toSerialize["build_server"] = o.BuildServer.Get()
	}
	if o.SourceCodeManagementServer.IsSet() {
		toSerialize["source_code_management_server"] = o.SourceCodeManagementServer.Get()
	}
	if o.OrchestrationEngine.IsSet() {
		toSerialize["orchestration_engine"] = o.OrchestrationEngine.Get()
	}
	toSerialize["notes"] = o.Notes
	toSerialize["files"] = o.Files
	toSerialize["risk_acceptance"] = o.RiskAcceptance
	return toSerialize, nil
}

func (o *Engagement) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"target_start",
		"target_end",
		"updated",
		"created",
		"active",
		"progress",
		"tmodel_path",
		"done_testing",
		"product",
		"notes",
		"files",
		"risk_acceptance",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEngagement := _Engagement{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEngagement)

	if err != nil {
		return err
	}

	*o = Engagement(varEngagement)

	return err
}

type NullableEngagement struct {
	value *Engagement
	isSet bool
}

func (v NullableEngagement) Get() *Engagement {
	return v.value
}

func (v *NullableEngagement) Set(val *Engagement) {
	v.value = val
	v.isSet = true
}

func (v NullableEngagement) IsSet() bool {
	return v.isSet
}

func (v *NullableEngagement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEngagement(val *Engagement) *NullableEngagement {
	return &NullableEngagement{value: val, isSet: true}
}

func (v NullableEngagement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEngagement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


