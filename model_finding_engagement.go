/*
Defect Dojo API v2

Defect Dojo - Open Source vulnerability Management made easy. Prefetch related parameters/responses not yet in the schema.

API version: 2.33.5
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package defectdojo

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the FindingEngagement type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FindingEngagement{}

// FindingEngagement struct for FindingEngagement
type FindingEngagement struct {
	Id int32 `json:"id"`
	Name NullableString `json:"name,omitempty"`
	Description NullableString `json:"description,omitempty"`
	Product *FindingProduct `json:"product,omitempty"`
	TargetStart string `json:"target_start"`
	TargetEnd string `json:"target_end"`
	// Tag or branch of the product the engagement tested.
	BranchTag NullableString `json:"branch_tag,omitempty"`
	// * `Interactive` - Interactive * `CI/CD` - CI/CD
	EngagementType NullableString `json:"engagement_type,omitempty"`
	// Build ID of the product the engagement tested.
	BuildId NullableString `json:"build_id,omitempty"`
	// Commit hash from repo
	CommitHash NullableString `json:"commit_hash,omitempty"`
	// Version of the product the engagement tested.
	Version NullableString `json:"version,omitempty"`
	Created NullableTime `json:"created"`
	Updated NullableTime `json:"updated"`
}

type _FindingEngagement FindingEngagement

// NewFindingEngagement instantiates a new FindingEngagement object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFindingEngagement(id int32, targetStart string, targetEnd string, created NullableTime, updated NullableTime) *FindingEngagement {
	this := FindingEngagement{}
	this.Id = id
	this.TargetStart = targetStart
	this.TargetEnd = targetEnd
	this.Created = created
	this.Updated = updated
	return &this
}

// NewFindingEngagementWithDefaults instantiates a new FindingEngagement object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFindingEngagementWithDefaults() *FindingEngagement {
	this := FindingEngagement{}
	return &this
}

// GetId returns the Id field value
func (o *FindingEngagement) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *FindingEngagement) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *FindingEngagement) SetId(v int32) {
	o.Id = v
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FindingEngagement) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FindingEngagement) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *FindingEngagement) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *FindingEngagement) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *FindingEngagement) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *FindingEngagement) UnsetName() {
	o.Name.Unset()
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FindingEngagement) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FindingEngagement) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *FindingEngagement) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *FindingEngagement) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *FindingEngagement) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *FindingEngagement) UnsetDescription() {
	o.Description.Unset()
}

// GetProduct returns the Product field value if set, zero value otherwise.
func (o *FindingEngagement) GetProduct() FindingProduct {
	if o == nil || IsNil(o.Product) {
		var ret FindingProduct
		return ret
	}
	return *o.Product
}

// GetProductOk returns a tuple with the Product field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FindingEngagement) GetProductOk() (*FindingProduct, bool) {
	if o == nil || IsNil(o.Product) {
		return nil, false
	}
	return o.Product, true
}

// HasProduct returns a boolean if a field has been set.
func (o *FindingEngagement) HasProduct() bool {
	if o != nil && !IsNil(o.Product) {
		return true
	}

	return false
}

// SetProduct gets a reference to the given FindingProduct and assigns it to the Product field.
func (o *FindingEngagement) SetProduct(v FindingProduct) {
	o.Product = &v
}

// GetTargetStart returns the TargetStart field value
func (o *FindingEngagement) GetTargetStart() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TargetStart
}

// GetTargetStartOk returns a tuple with the TargetStart field value
// and a boolean to check if the value has been set.
func (o *FindingEngagement) GetTargetStartOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TargetStart, true
}

// SetTargetStart sets field value
func (o *FindingEngagement) SetTargetStart(v string) {
	o.TargetStart = v
}

// GetTargetEnd returns the TargetEnd field value
func (o *FindingEngagement) GetTargetEnd() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TargetEnd
}

// GetTargetEndOk returns a tuple with the TargetEnd field value
// and a boolean to check if the value has been set.
func (o *FindingEngagement) GetTargetEndOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TargetEnd, true
}

// SetTargetEnd sets field value
func (o *FindingEngagement) SetTargetEnd(v string) {
	o.TargetEnd = v
}

// GetBranchTag returns the BranchTag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FindingEngagement) GetBranchTag() string {
	if o == nil || IsNil(o.BranchTag.Get()) {
		var ret string
		return ret
	}
	return *o.BranchTag.Get()
}

// GetBranchTagOk returns a tuple with the BranchTag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FindingEngagement) GetBranchTagOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BranchTag.Get(), o.BranchTag.IsSet()
}

// HasBranchTag returns a boolean if a field has been set.
func (o *FindingEngagement) HasBranchTag() bool {
	if o != nil && o.BranchTag.IsSet() {
		return true
	}

	return false
}

// SetBranchTag gets a reference to the given NullableString and assigns it to the BranchTag field.
func (o *FindingEngagement) SetBranchTag(v string) {
	o.BranchTag.Set(&v)
}
// SetBranchTagNil sets the value for BranchTag to be an explicit nil
func (o *FindingEngagement) SetBranchTagNil() {
	o.BranchTag.Set(nil)
}

// UnsetBranchTag ensures that no value is present for BranchTag, not even an explicit nil
func (o *FindingEngagement) UnsetBranchTag() {
	o.BranchTag.Unset()
}

// GetEngagementType returns the EngagementType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FindingEngagement) GetEngagementType() string {
	if o == nil || IsNil(o.EngagementType.Get()) {
		var ret string
		return ret
	}
	return *o.EngagementType.Get()
}

// GetEngagementTypeOk returns a tuple with the EngagementType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FindingEngagement) GetEngagementTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EngagementType.Get(), o.EngagementType.IsSet()
}

// HasEngagementType returns a boolean if a field has been set.
func (o *FindingEngagement) HasEngagementType() bool {
	if o != nil && o.EngagementType.IsSet() {
		return true
	}

	return false
}

// SetEngagementType gets a reference to the given NullableString and assigns it to the EngagementType field.
func (o *FindingEngagement) SetEngagementType(v string) {
	o.EngagementType.Set(&v)
}
// SetEngagementTypeNil sets the value for EngagementType to be an explicit nil
func (o *FindingEngagement) SetEngagementTypeNil() {
	o.EngagementType.Set(nil)
}

// UnsetEngagementType ensures that no value is present for EngagementType, not even an explicit nil
func (o *FindingEngagement) UnsetEngagementType() {
	o.EngagementType.Unset()
}

// GetBuildId returns the BuildId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FindingEngagement) GetBuildId() string {
	if o == nil || IsNil(o.BuildId.Get()) {
		var ret string
		return ret
	}
	return *o.BuildId.Get()
}

// GetBuildIdOk returns a tuple with the BuildId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FindingEngagement) GetBuildIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BuildId.Get(), o.BuildId.IsSet()
}

// HasBuildId returns a boolean if a field has been set.
func (o *FindingEngagement) HasBuildId() bool {
	if o != nil && o.BuildId.IsSet() {
		return true
	}

	return false
}

// SetBuildId gets a reference to the given NullableString and assigns it to the BuildId field.
func (o *FindingEngagement) SetBuildId(v string) {
	o.BuildId.Set(&v)
}
// SetBuildIdNil sets the value for BuildId to be an explicit nil
func (o *FindingEngagement) SetBuildIdNil() {
	o.BuildId.Set(nil)
}

// UnsetBuildId ensures that no value is present for BuildId, not even an explicit nil
func (o *FindingEngagement) UnsetBuildId() {
	o.BuildId.Unset()
}

// GetCommitHash returns the CommitHash field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FindingEngagement) GetCommitHash() string {
	if o == nil || IsNil(o.CommitHash.Get()) {
		var ret string
		return ret
	}
	return *o.CommitHash.Get()
}

// GetCommitHashOk returns a tuple with the CommitHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FindingEngagement) GetCommitHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CommitHash.Get(), o.CommitHash.IsSet()
}

// HasCommitHash returns a boolean if a field has been set.
func (o *FindingEngagement) HasCommitHash() bool {
	if o != nil && o.CommitHash.IsSet() {
		return true
	}

	return false
}

// SetCommitHash gets a reference to the given NullableString and assigns it to the CommitHash field.
func (o *FindingEngagement) SetCommitHash(v string) {
	o.CommitHash.Set(&v)
}
// SetCommitHashNil sets the value for CommitHash to be an explicit nil
func (o *FindingEngagement) SetCommitHashNil() {
	o.CommitHash.Set(nil)
}

// UnsetCommitHash ensures that no value is present for CommitHash, not even an explicit nil
func (o *FindingEngagement) UnsetCommitHash() {
	o.CommitHash.Unset()
}

// GetVersion returns the Version field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FindingEngagement) GetVersion() string {
	if o == nil || IsNil(o.Version.Get()) {
		var ret string
		return ret
	}
	return *o.Version.Get()
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FindingEngagement) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Version.Get(), o.Version.IsSet()
}

// HasVersion returns a boolean if a field has been set.
func (o *FindingEngagement) HasVersion() bool {
	if o != nil && o.Version.IsSet() {
		return true
	}

	return false
}

// SetVersion gets a reference to the given NullableString and assigns it to the Version field.
func (o *FindingEngagement) SetVersion(v string) {
	o.Version.Set(&v)
}
// SetVersionNil sets the value for Version to be an explicit nil
func (o *FindingEngagement) SetVersionNil() {
	o.Version.Set(nil)
}

// UnsetVersion ensures that no value is present for Version, not even an explicit nil
func (o *FindingEngagement) UnsetVersion() {
	o.Version.Unset()
}

// GetCreated returns the Created field value
// If the value is explicit nil, the zero value for time.Time will be returned
func (o *FindingEngagement) GetCreated() time.Time {
	if o == nil || o.Created.Get() == nil {
		var ret time.Time
		return ret
	}

	return *o.Created.Get()
}

// GetCreatedOk returns a tuple with the Created field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FindingEngagement) GetCreatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.Created.Get(), o.Created.IsSet()
}

// SetCreated sets field value
func (o *FindingEngagement) SetCreated(v time.Time) {
	o.Created.Set(&v)
}

// GetUpdated returns the Updated field value
// If the value is explicit nil, the zero value for time.Time will be returned
func (o *FindingEngagement) GetUpdated() time.Time {
	if o == nil || o.Updated.Get() == nil {
		var ret time.Time
		return ret
	}

	return *o.Updated.Get()
}

// GetUpdatedOk returns a tuple with the Updated field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FindingEngagement) GetUpdatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.Updated.Get(), o.Updated.IsSet()
}

// SetUpdated sets field value
func (o *FindingEngagement) SetUpdated(v time.Time) {
	o.Updated.Set(&v)
}

func (o FindingEngagement) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FindingEngagement) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if !IsNil(o.Product) {
		toSerialize["product"] = o.Product
	}
	toSerialize["target_start"] = o.TargetStart
	toSerialize["target_end"] = o.TargetEnd
	if o.BranchTag.IsSet() {
		toSerialize["branch_tag"] = o.BranchTag.Get()
	}
	if o.EngagementType.IsSet() {
		toSerialize["engagement_type"] = o.EngagementType.Get()
	}
	if o.BuildId.IsSet() {
		toSerialize["build_id"] = o.BuildId.Get()
	}
	if o.CommitHash.IsSet() {
		toSerialize["commit_hash"] = o.CommitHash.Get()
	}
	if o.Version.IsSet() {
		toSerialize["version"] = o.Version.Get()
	}
	toSerialize["created"] = o.Created.Get()
	toSerialize["updated"] = o.Updated.Get()
	return toSerialize, nil
}

func (o *FindingEngagement) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"target_start",
		"target_end",
		"created",
		"updated",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFindingEngagement := _FindingEngagement{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFindingEngagement)

	if err != nil {
		return err
	}

	*o = FindingEngagement(varFindingEngagement)

	return err
}

type NullableFindingEngagement struct {
	value *FindingEngagement
	isSet bool
}

func (v NullableFindingEngagement) Get() *FindingEngagement {
	return v.value
}

func (v *NullableFindingEngagement) Set(val *FindingEngagement) {
	v.value = val
	v.isSet = true
}

func (v NullableFindingEngagement) IsSet() bool {
	return v.isSet
}

func (v *NullableFindingEngagement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFindingEngagement(val *FindingEngagement) *NullableFindingEngagement {
	return &NullableFindingEngagement{value: val, isSet: true}
}

func (v NullableFindingEngagement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFindingEngagement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


