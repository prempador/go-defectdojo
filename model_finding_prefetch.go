/*
Defect Dojo API v2

Defect Dojo - Open Source vulnerability Management made easy. Prefetch related parameters/responses not yet in the schema.

API version: 2.30.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the FindingPrefetch type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FindingPrefetch{}

// FindingPrefetch struct for FindingPrefetch
type FindingPrefetch struct {
	AuthIssues *map[string]EngagementCheckList `json:"auth_issues,omitempty"`
	AuthorIssues *map[string]EngagementCheckList `json:"author_issues,omitempty"`
	ConfigIssues *map[string]EngagementCheckList `json:"config_issues,omitempty"`
	CryptoIssues *map[string]EngagementCheckList `json:"crypto_issues,omitempty"`
	DataIssues *map[string]EngagementCheckList `json:"data_issues,omitempty"`
	DefectReviewRequestedBy *map[string]UserStub `json:"defect_review_requested_by,omitempty"`
	DuplicateFinding *map[string]Finding `json:"duplicate_finding,omitempty"`
	EndpointSet *map[string]Endpoint `json:"endpoint_set,omitempty"`
	Endpoints *map[string]Endpoint `json:"endpoints,omitempty"`
	Files *map[string]RawFile `json:"files,omitempty"`
	FindingGroupSet *map[string]FindingGroup `json:"finding_group_set,omitempty"`
	FoundBy *map[string]TestType `json:"found_by,omitempty"`
	LastReviewedBy *map[string]UserStub `json:"last_reviewed_by,omitempty"`
	MitigatedBy *map[string]UserStub `json:"mitigated_by,omitempty"`
	Notes *map[string]Note `json:"notes,omitempty"`
	OtherIssues *map[string]EngagementCheckList `json:"other_issues,omitempty"`
	Reporter *map[string]UserStub `json:"reporter,omitempty"`
	ReviewRequestedBy *map[string]UserStub `json:"review_requested_by,omitempty"`
	Reviewers *map[string]UserStub `json:"reviewers,omitempty"`
	RiskAcceptanceSet *map[string]RiskAcceptance `json:"risk_acceptance_set,omitempty"`
	SensitiveIssues *map[string]EngagementCheckList `json:"sensitive_issues,omitempty"`
	SessionIssues *map[string]EngagementCheckList `json:"session_issues,omitempty"`
	SonarqubeIssue *map[string]SonarqubeIssue `json:"sonarqube_issue,omitempty"`
	Test *map[string]Test `json:"test,omitempty"`
	TestImportSet *map[string]TestImport `json:"test_import_set,omitempty"`
}

// NewFindingPrefetch instantiates a new FindingPrefetch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFindingPrefetch() *FindingPrefetch {
	this := FindingPrefetch{}
	return &this
}

// NewFindingPrefetchWithDefaults instantiates a new FindingPrefetch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFindingPrefetchWithDefaults() *FindingPrefetch {
	this := FindingPrefetch{}
	return &this
}

// GetAuthIssues returns the AuthIssues field value if set, zero value otherwise.
func (o *FindingPrefetch) GetAuthIssues() map[string]EngagementCheckList {
	if o == nil || IsNil(o.AuthIssues) {
		var ret map[string]EngagementCheckList
		return ret
	}
	return *o.AuthIssues
}

// GetAuthIssuesOk returns a tuple with the AuthIssues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FindingPrefetch) GetAuthIssuesOk() (*map[string]EngagementCheckList, bool) {
	if o == nil || IsNil(o.AuthIssues) {
		return nil, false
	}
	return o.AuthIssues, true
}

// HasAuthIssues returns a boolean if a field has been set.
func (o *FindingPrefetch) HasAuthIssues() bool {
	if o != nil && !IsNil(o.AuthIssues) {
		return true
	}

	return false
}

// SetAuthIssues gets a reference to the given map[string]EngagementCheckList and assigns it to the AuthIssues field.
func (o *FindingPrefetch) SetAuthIssues(v map[string]EngagementCheckList) {
	o.AuthIssues = &v
}

// GetAuthorIssues returns the AuthorIssues field value if set, zero value otherwise.
func (o *FindingPrefetch) GetAuthorIssues() map[string]EngagementCheckList {
	if o == nil || IsNil(o.AuthorIssues) {
		var ret map[string]EngagementCheckList
		return ret
	}
	return *o.AuthorIssues
}

// GetAuthorIssuesOk returns a tuple with the AuthorIssues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FindingPrefetch) GetAuthorIssuesOk() (*map[string]EngagementCheckList, bool) {
	if o == nil || IsNil(o.AuthorIssues) {
		return nil, false
	}
	return o.AuthorIssues, true
}

// HasAuthorIssues returns a boolean if a field has been set.
func (o *FindingPrefetch) HasAuthorIssues() bool {
	if o != nil && !IsNil(o.AuthorIssues) {
		return true
	}

	return false
}

// SetAuthorIssues gets a reference to the given map[string]EngagementCheckList and assigns it to the AuthorIssues field.
func (o *FindingPrefetch) SetAuthorIssues(v map[string]EngagementCheckList) {
	o.AuthorIssues = &v
}

// GetConfigIssues returns the ConfigIssues field value if set, zero value otherwise.
func (o *FindingPrefetch) GetConfigIssues() map[string]EngagementCheckList {
	if o == nil || IsNil(o.ConfigIssues) {
		var ret map[string]EngagementCheckList
		return ret
	}
	return *o.ConfigIssues
}

// GetConfigIssuesOk returns a tuple with the ConfigIssues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FindingPrefetch) GetConfigIssuesOk() (*map[string]EngagementCheckList, bool) {
	if o == nil || IsNil(o.ConfigIssues) {
		return nil, false
	}
	return o.ConfigIssues, true
}

// HasConfigIssues returns a boolean if a field has been set.
func (o *FindingPrefetch) HasConfigIssues() bool {
	if o != nil && !IsNil(o.ConfigIssues) {
		return true
	}

	return false
}

// SetConfigIssues gets a reference to the given map[string]EngagementCheckList and assigns it to the ConfigIssues field.
func (o *FindingPrefetch) SetConfigIssues(v map[string]EngagementCheckList) {
	o.ConfigIssues = &v
}

// GetCryptoIssues returns the CryptoIssues field value if set, zero value otherwise.
func (o *FindingPrefetch) GetCryptoIssues() map[string]EngagementCheckList {
	if o == nil || IsNil(o.CryptoIssues) {
		var ret map[string]EngagementCheckList
		return ret
	}
	return *o.CryptoIssues
}

// GetCryptoIssuesOk returns a tuple with the CryptoIssues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FindingPrefetch) GetCryptoIssuesOk() (*map[string]EngagementCheckList, bool) {
	if o == nil || IsNil(o.CryptoIssues) {
		return nil, false
	}
	return o.CryptoIssues, true
}

// HasCryptoIssues returns a boolean if a field has been set.
func (o *FindingPrefetch) HasCryptoIssues() bool {
	if o != nil && !IsNil(o.CryptoIssues) {
		return true
	}

	return false
}

// SetCryptoIssues gets a reference to the given map[string]EngagementCheckList and assigns it to the CryptoIssues field.
func (o *FindingPrefetch) SetCryptoIssues(v map[string]EngagementCheckList) {
	o.CryptoIssues = &v
}

// GetDataIssues returns the DataIssues field value if set, zero value otherwise.
func (o *FindingPrefetch) GetDataIssues() map[string]EngagementCheckList {
	if o == nil || IsNil(o.DataIssues) {
		var ret map[string]EngagementCheckList
		return ret
	}
	return *o.DataIssues
}

// GetDataIssuesOk returns a tuple with the DataIssues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FindingPrefetch) GetDataIssuesOk() (*map[string]EngagementCheckList, bool) {
	if o == nil || IsNil(o.DataIssues) {
		return nil, false
	}
	return o.DataIssues, true
}

// HasDataIssues returns a boolean if a field has been set.
func (o *FindingPrefetch) HasDataIssues() bool {
	if o != nil && !IsNil(o.DataIssues) {
		return true
	}

	return false
}

// SetDataIssues gets a reference to the given map[string]EngagementCheckList and assigns it to the DataIssues field.
func (o *FindingPrefetch) SetDataIssues(v map[string]EngagementCheckList) {
	o.DataIssues = &v
}

// GetDefectReviewRequestedBy returns the DefectReviewRequestedBy field value if set, zero value otherwise.
func (o *FindingPrefetch) GetDefectReviewRequestedBy() map[string]UserStub {
	if o == nil || IsNil(o.DefectReviewRequestedBy) {
		var ret map[string]UserStub
		return ret
	}
	return *o.DefectReviewRequestedBy
}

// GetDefectReviewRequestedByOk returns a tuple with the DefectReviewRequestedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FindingPrefetch) GetDefectReviewRequestedByOk() (*map[string]UserStub, bool) {
	if o == nil || IsNil(o.DefectReviewRequestedBy) {
		return nil, false
	}
	return o.DefectReviewRequestedBy, true
}

// HasDefectReviewRequestedBy returns a boolean if a field has been set.
func (o *FindingPrefetch) HasDefectReviewRequestedBy() bool {
	if o != nil && !IsNil(o.DefectReviewRequestedBy) {
		return true
	}

	return false
}

// SetDefectReviewRequestedBy gets a reference to the given map[string]UserStub and assigns it to the DefectReviewRequestedBy field.
func (o *FindingPrefetch) SetDefectReviewRequestedBy(v map[string]UserStub) {
	o.DefectReviewRequestedBy = &v
}

// GetDuplicateFinding returns the DuplicateFinding field value if set, zero value otherwise.
func (o *FindingPrefetch) GetDuplicateFinding() map[string]Finding {
	if o == nil || IsNil(o.DuplicateFinding) {
		var ret map[string]Finding
		return ret
	}
	return *o.DuplicateFinding
}

// GetDuplicateFindingOk returns a tuple with the DuplicateFinding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FindingPrefetch) GetDuplicateFindingOk() (*map[string]Finding, bool) {
	if o == nil || IsNil(o.DuplicateFinding) {
		return nil, false
	}
	return o.DuplicateFinding, true
}

// HasDuplicateFinding returns a boolean if a field has been set.
func (o *FindingPrefetch) HasDuplicateFinding() bool {
	if o != nil && !IsNil(o.DuplicateFinding) {
		return true
	}

	return false
}

// SetDuplicateFinding gets a reference to the given map[string]Finding and assigns it to the DuplicateFinding field.
func (o *FindingPrefetch) SetDuplicateFinding(v map[string]Finding) {
	o.DuplicateFinding = &v
}

// GetEndpointSet returns the EndpointSet field value if set, zero value otherwise.
func (o *FindingPrefetch) GetEndpointSet() map[string]Endpoint {
	if o == nil || IsNil(o.EndpointSet) {
		var ret map[string]Endpoint
		return ret
	}
	return *o.EndpointSet
}

// GetEndpointSetOk returns a tuple with the EndpointSet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FindingPrefetch) GetEndpointSetOk() (*map[string]Endpoint, bool) {
	if o == nil || IsNil(o.EndpointSet) {
		return nil, false
	}
	return o.EndpointSet, true
}

// HasEndpointSet returns a boolean if a field has been set.
func (o *FindingPrefetch) HasEndpointSet() bool {
	if o != nil && !IsNil(o.EndpointSet) {
		return true
	}

	return false
}

// SetEndpointSet gets a reference to the given map[string]Endpoint and assigns it to the EndpointSet field.
func (o *FindingPrefetch) SetEndpointSet(v map[string]Endpoint) {
	o.EndpointSet = &v
}

// GetEndpoints returns the Endpoints field value if set, zero value otherwise.
func (o *FindingPrefetch) GetEndpoints() map[string]Endpoint {
	if o == nil || IsNil(o.Endpoints) {
		var ret map[string]Endpoint
		return ret
	}
	return *o.Endpoints
}

// GetEndpointsOk returns a tuple with the Endpoints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FindingPrefetch) GetEndpointsOk() (*map[string]Endpoint, bool) {
	if o == nil || IsNil(o.Endpoints) {
		return nil, false
	}
	return o.Endpoints, true
}

// HasEndpoints returns a boolean if a field has been set.
func (o *FindingPrefetch) HasEndpoints() bool {
	if o != nil && !IsNil(o.Endpoints) {
		return true
	}

	return false
}

// SetEndpoints gets a reference to the given map[string]Endpoint and assigns it to the Endpoints field.
func (o *FindingPrefetch) SetEndpoints(v map[string]Endpoint) {
	o.Endpoints = &v
}

// GetFiles returns the Files field value if set, zero value otherwise.
func (o *FindingPrefetch) GetFiles() map[string]RawFile {
	if o == nil || IsNil(o.Files) {
		var ret map[string]RawFile
		return ret
	}
	return *o.Files
}

// GetFilesOk returns a tuple with the Files field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FindingPrefetch) GetFilesOk() (*map[string]RawFile, bool) {
	if o == nil || IsNil(o.Files) {
		return nil, false
	}
	return o.Files, true
}

// HasFiles returns a boolean if a field has been set.
func (o *FindingPrefetch) HasFiles() bool {
	if o != nil && !IsNil(o.Files) {
		return true
	}

	return false
}

// SetFiles gets a reference to the given map[string]RawFile and assigns it to the Files field.
func (o *FindingPrefetch) SetFiles(v map[string]RawFile) {
	o.Files = &v
}

// GetFindingGroupSet returns the FindingGroupSet field value if set, zero value otherwise.
func (o *FindingPrefetch) GetFindingGroupSet() map[string]FindingGroup {
	if o == nil || IsNil(o.FindingGroupSet) {
		var ret map[string]FindingGroup
		return ret
	}
	return *o.FindingGroupSet
}

// GetFindingGroupSetOk returns a tuple with the FindingGroupSet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FindingPrefetch) GetFindingGroupSetOk() (*map[string]FindingGroup, bool) {
	if o == nil || IsNil(o.FindingGroupSet) {
		return nil, false
	}
	return o.FindingGroupSet, true
}

// HasFindingGroupSet returns a boolean if a field has been set.
func (o *FindingPrefetch) HasFindingGroupSet() bool {
	if o != nil && !IsNil(o.FindingGroupSet) {
		return true
	}

	return false
}

// SetFindingGroupSet gets a reference to the given map[string]FindingGroup and assigns it to the FindingGroupSet field.
func (o *FindingPrefetch) SetFindingGroupSet(v map[string]FindingGroup) {
	o.FindingGroupSet = &v
}

// GetFoundBy returns the FoundBy field value if set, zero value otherwise.
func (o *FindingPrefetch) GetFoundBy() map[string]TestType {
	if o == nil || IsNil(o.FoundBy) {
		var ret map[string]TestType
		return ret
	}
	return *o.FoundBy
}

// GetFoundByOk returns a tuple with the FoundBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FindingPrefetch) GetFoundByOk() (*map[string]TestType, bool) {
	if o == nil || IsNil(o.FoundBy) {
		return nil, false
	}
	return o.FoundBy, true
}

// HasFoundBy returns a boolean if a field has been set.
func (o *FindingPrefetch) HasFoundBy() bool {
	if o != nil && !IsNil(o.FoundBy) {
		return true
	}

	return false
}

// SetFoundBy gets a reference to the given map[string]TestType and assigns it to the FoundBy field.
func (o *FindingPrefetch) SetFoundBy(v map[string]TestType) {
	o.FoundBy = &v
}

// GetLastReviewedBy returns the LastReviewedBy field value if set, zero value otherwise.
func (o *FindingPrefetch) GetLastReviewedBy() map[string]UserStub {
	if o == nil || IsNil(o.LastReviewedBy) {
		var ret map[string]UserStub
		return ret
	}
	return *o.LastReviewedBy
}

// GetLastReviewedByOk returns a tuple with the LastReviewedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FindingPrefetch) GetLastReviewedByOk() (*map[string]UserStub, bool) {
	if o == nil || IsNil(o.LastReviewedBy) {
		return nil, false
	}
	return o.LastReviewedBy, true
}

// HasLastReviewedBy returns a boolean if a field has been set.
func (o *FindingPrefetch) HasLastReviewedBy() bool {
	if o != nil && !IsNil(o.LastReviewedBy) {
		return true
	}

	return false
}

// SetLastReviewedBy gets a reference to the given map[string]UserStub and assigns it to the LastReviewedBy field.
func (o *FindingPrefetch) SetLastReviewedBy(v map[string]UserStub) {
	o.LastReviewedBy = &v
}

// GetMitigatedBy returns the MitigatedBy field value if set, zero value otherwise.
func (o *FindingPrefetch) GetMitigatedBy() map[string]UserStub {
	if o == nil || IsNil(o.MitigatedBy) {
		var ret map[string]UserStub
		return ret
	}
	return *o.MitigatedBy
}

// GetMitigatedByOk returns a tuple with the MitigatedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FindingPrefetch) GetMitigatedByOk() (*map[string]UserStub, bool) {
	if o == nil || IsNil(o.MitigatedBy) {
		return nil, false
	}
	return o.MitigatedBy, true
}

// HasMitigatedBy returns a boolean if a field has been set.
func (o *FindingPrefetch) HasMitigatedBy() bool {
	if o != nil && !IsNil(o.MitigatedBy) {
		return true
	}

	return false
}

// SetMitigatedBy gets a reference to the given map[string]UserStub and assigns it to the MitigatedBy field.
func (o *FindingPrefetch) SetMitigatedBy(v map[string]UserStub) {
	o.MitigatedBy = &v
}

// GetNotes returns the Notes field value if set, zero value otherwise.
func (o *FindingPrefetch) GetNotes() map[string]Note {
	if o == nil || IsNil(o.Notes) {
		var ret map[string]Note
		return ret
	}
	return *o.Notes
}

// GetNotesOk returns a tuple with the Notes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FindingPrefetch) GetNotesOk() (*map[string]Note, bool) {
	if o == nil || IsNil(o.Notes) {
		return nil, false
	}
	return o.Notes, true
}

// HasNotes returns a boolean if a field has been set.
func (o *FindingPrefetch) HasNotes() bool {
	if o != nil && !IsNil(o.Notes) {
		return true
	}

	return false
}

// SetNotes gets a reference to the given map[string]Note and assigns it to the Notes field.
func (o *FindingPrefetch) SetNotes(v map[string]Note) {
	o.Notes = &v
}

// GetOtherIssues returns the OtherIssues field value if set, zero value otherwise.
func (o *FindingPrefetch) GetOtherIssues() map[string]EngagementCheckList {
	if o == nil || IsNil(o.OtherIssues) {
		var ret map[string]EngagementCheckList
		return ret
	}
	return *o.OtherIssues
}

// GetOtherIssuesOk returns a tuple with the OtherIssues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FindingPrefetch) GetOtherIssuesOk() (*map[string]EngagementCheckList, bool) {
	if o == nil || IsNil(o.OtherIssues) {
		return nil, false
	}
	return o.OtherIssues, true
}

// HasOtherIssues returns a boolean if a field has been set.
func (o *FindingPrefetch) HasOtherIssues() bool {
	if o != nil && !IsNil(o.OtherIssues) {
		return true
	}

	return false
}

// SetOtherIssues gets a reference to the given map[string]EngagementCheckList and assigns it to the OtherIssues field.
func (o *FindingPrefetch) SetOtherIssues(v map[string]EngagementCheckList) {
	o.OtherIssues = &v
}

// GetReporter returns the Reporter field value if set, zero value otherwise.
func (o *FindingPrefetch) GetReporter() map[string]UserStub {
	if o == nil || IsNil(o.Reporter) {
		var ret map[string]UserStub
		return ret
	}
	return *o.Reporter
}

// GetReporterOk returns a tuple with the Reporter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FindingPrefetch) GetReporterOk() (*map[string]UserStub, bool) {
	if o == nil || IsNil(o.Reporter) {
		return nil, false
	}
	return o.Reporter, true
}

// HasReporter returns a boolean if a field has been set.
func (o *FindingPrefetch) HasReporter() bool {
	if o != nil && !IsNil(o.Reporter) {
		return true
	}

	return false
}

// SetReporter gets a reference to the given map[string]UserStub and assigns it to the Reporter field.
func (o *FindingPrefetch) SetReporter(v map[string]UserStub) {
	o.Reporter = &v
}

// GetReviewRequestedBy returns the ReviewRequestedBy field value if set, zero value otherwise.
func (o *FindingPrefetch) GetReviewRequestedBy() map[string]UserStub {
	if o == nil || IsNil(o.ReviewRequestedBy) {
		var ret map[string]UserStub
		return ret
	}
	return *o.ReviewRequestedBy
}

// GetReviewRequestedByOk returns a tuple with the ReviewRequestedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FindingPrefetch) GetReviewRequestedByOk() (*map[string]UserStub, bool) {
	if o == nil || IsNil(o.ReviewRequestedBy) {
		return nil, false
	}
	return o.ReviewRequestedBy, true
}

// HasReviewRequestedBy returns a boolean if a field has been set.
func (o *FindingPrefetch) HasReviewRequestedBy() bool {
	if o != nil && !IsNil(o.ReviewRequestedBy) {
		return true
	}

	return false
}

// SetReviewRequestedBy gets a reference to the given map[string]UserStub and assigns it to the ReviewRequestedBy field.
func (o *FindingPrefetch) SetReviewRequestedBy(v map[string]UserStub) {
	o.ReviewRequestedBy = &v
}

// GetReviewers returns the Reviewers field value if set, zero value otherwise.
func (o *FindingPrefetch) GetReviewers() map[string]UserStub {
	if o == nil || IsNil(o.Reviewers) {
		var ret map[string]UserStub
		return ret
	}
	return *o.Reviewers
}

// GetReviewersOk returns a tuple with the Reviewers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FindingPrefetch) GetReviewersOk() (*map[string]UserStub, bool) {
	if o == nil || IsNil(o.Reviewers) {
		return nil, false
	}
	return o.Reviewers, true
}

// HasReviewers returns a boolean if a field has been set.
func (o *FindingPrefetch) HasReviewers() bool {
	if o != nil && !IsNil(o.Reviewers) {
		return true
	}

	return false
}

// SetReviewers gets a reference to the given map[string]UserStub and assigns it to the Reviewers field.
func (o *FindingPrefetch) SetReviewers(v map[string]UserStub) {
	o.Reviewers = &v
}

// GetRiskAcceptanceSet returns the RiskAcceptanceSet field value if set, zero value otherwise.
func (o *FindingPrefetch) GetRiskAcceptanceSet() map[string]RiskAcceptance {
	if o == nil || IsNil(o.RiskAcceptanceSet) {
		var ret map[string]RiskAcceptance
		return ret
	}
	return *o.RiskAcceptanceSet
}

// GetRiskAcceptanceSetOk returns a tuple with the RiskAcceptanceSet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FindingPrefetch) GetRiskAcceptanceSetOk() (*map[string]RiskAcceptance, bool) {
	if o == nil || IsNil(o.RiskAcceptanceSet) {
		return nil, false
	}
	return o.RiskAcceptanceSet, true
}

// HasRiskAcceptanceSet returns a boolean if a field has been set.
func (o *FindingPrefetch) HasRiskAcceptanceSet() bool {
	if o != nil && !IsNil(o.RiskAcceptanceSet) {
		return true
	}

	return false
}

// SetRiskAcceptanceSet gets a reference to the given map[string]RiskAcceptance and assigns it to the RiskAcceptanceSet field.
func (o *FindingPrefetch) SetRiskAcceptanceSet(v map[string]RiskAcceptance) {
	o.RiskAcceptanceSet = &v
}

// GetSensitiveIssues returns the SensitiveIssues field value if set, zero value otherwise.
func (o *FindingPrefetch) GetSensitiveIssues() map[string]EngagementCheckList {
	if o == nil || IsNil(o.SensitiveIssues) {
		var ret map[string]EngagementCheckList
		return ret
	}
	return *o.SensitiveIssues
}

// GetSensitiveIssuesOk returns a tuple with the SensitiveIssues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FindingPrefetch) GetSensitiveIssuesOk() (*map[string]EngagementCheckList, bool) {
	if o == nil || IsNil(o.SensitiveIssues) {
		return nil, false
	}
	return o.SensitiveIssues, true
}

// HasSensitiveIssues returns a boolean if a field has been set.
func (o *FindingPrefetch) HasSensitiveIssues() bool {
	if o != nil && !IsNil(o.SensitiveIssues) {
		return true
	}

	return false
}

// SetSensitiveIssues gets a reference to the given map[string]EngagementCheckList and assigns it to the SensitiveIssues field.
func (o *FindingPrefetch) SetSensitiveIssues(v map[string]EngagementCheckList) {
	o.SensitiveIssues = &v
}

// GetSessionIssues returns the SessionIssues field value if set, zero value otherwise.
func (o *FindingPrefetch) GetSessionIssues() map[string]EngagementCheckList {
	if o == nil || IsNil(o.SessionIssues) {
		var ret map[string]EngagementCheckList
		return ret
	}
	return *o.SessionIssues
}

// GetSessionIssuesOk returns a tuple with the SessionIssues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FindingPrefetch) GetSessionIssuesOk() (*map[string]EngagementCheckList, bool) {
	if o == nil || IsNil(o.SessionIssues) {
		return nil, false
	}
	return o.SessionIssues, true
}

// HasSessionIssues returns a boolean if a field has been set.
func (o *FindingPrefetch) HasSessionIssues() bool {
	if o != nil && !IsNil(o.SessionIssues) {
		return true
	}

	return false
}

// SetSessionIssues gets a reference to the given map[string]EngagementCheckList and assigns it to the SessionIssues field.
func (o *FindingPrefetch) SetSessionIssues(v map[string]EngagementCheckList) {
	o.SessionIssues = &v
}

// GetSonarqubeIssue returns the SonarqubeIssue field value if set, zero value otherwise.
func (o *FindingPrefetch) GetSonarqubeIssue() map[string]SonarqubeIssue {
	if o == nil || IsNil(o.SonarqubeIssue) {
		var ret map[string]SonarqubeIssue
		return ret
	}
	return *o.SonarqubeIssue
}

// GetSonarqubeIssueOk returns a tuple with the SonarqubeIssue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FindingPrefetch) GetSonarqubeIssueOk() (*map[string]SonarqubeIssue, bool) {
	if o == nil || IsNil(o.SonarqubeIssue) {
		return nil, false
	}
	return o.SonarqubeIssue, true
}

// HasSonarqubeIssue returns a boolean if a field has been set.
func (o *FindingPrefetch) HasSonarqubeIssue() bool {
	if o != nil && !IsNil(o.SonarqubeIssue) {
		return true
	}

	return false
}

// SetSonarqubeIssue gets a reference to the given map[string]SonarqubeIssue and assigns it to the SonarqubeIssue field.
func (o *FindingPrefetch) SetSonarqubeIssue(v map[string]SonarqubeIssue) {
	o.SonarqubeIssue = &v
}

// GetTest returns the Test field value if set, zero value otherwise.
func (o *FindingPrefetch) GetTest() map[string]Test {
	if o == nil || IsNil(o.Test) {
		var ret map[string]Test
		return ret
	}
	return *o.Test
}

// GetTestOk returns a tuple with the Test field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FindingPrefetch) GetTestOk() (*map[string]Test, bool) {
	if o == nil || IsNil(o.Test) {
		return nil, false
	}
	return o.Test, true
}

// HasTest returns a boolean if a field has been set.
func (o *FindingPrefetch) HasTest() bool {
	if o != nil && !IsNil(o.Test) {
		return true
	}

	return false
}

// SetTest gets a reference to the given map[string]Test and assigns it to the Test field.
func (o *FindingPrefetch) SetTest(v map[string]Test) {
	o.Test = &v
}

// GetTestImportSet returns the TestImportSet field value if set, zero value otherwise.
func (o *FindingPrefetch) GetTestImportSet() map[string]TestImport {
	if o == nil || IsNil(o.TestImportSet) {
		var ret map[string]TestImport
		return ret
	}
	return *o.TestImportSet
}

// GetTestImportSetOk returns a tuple with the TestImportSet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FindingPrefetch) GetTestImportSetOk() (*map[string]TestImport, bool) {
	if o == nil || IsNil(o.TestImportSet) {
		return nil, false
	}
	return o.TestImportSet, true
}

// HasTestImportSet returns a boolean if a field has been set.
func (o *FindingPrefetch) HasTestImportSet() bool {
	if o != nil && !IsNil(o.TestImportSet) {
		return true
	}

	return false
}

// SetTestImportSet gets a reference to the given map[string]TestImport and assigns it to the TestImportSet field.
func (o *FindingPrefetch) SetTestImportSet(v map[string]TestImport) {
	o.TestImportSet = &v
}

func (o FindingPrefetch) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FindingPrefetch) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AuthIssues) {
		toSerialize["auth_issues"] = o.AuthIssues
	}
	if !IsNil(o.AuthorIssues) {
		toSerialize["author_issues"] = o.AuthorIssues
	}
	if !IsNil(o.ConfigIssues) {
		toSerialize["config_issues"] = o.ConfigIssues
	}
	if !IsNil(o.CryptoIssues) {
		toSerialize["crypto_issues"] = o.CryptoIssues
	}
	if !IsNil(o.DataIssues) {
		toSerialize["data_issues"] = o.DataIssues
	}
	if !IsNil(o.DefectReviewRequestedBy) {
		toSerialize["defect_review_requested_by"] = o.DefectReviewRequestedBy
	}
	if !IsNil(o.DuplicateFinding) {
		toSerialize["duplicate_finding"] = o.DuplicateFinding
	}
	if !IsNil(o.EndpointSet) {
		toSerialize["endpoint_set"] = o.EndpointSet
	}
	if !IsNil(o.Endpoints) {
		toSerialize["endpoints"] = o.Endpoints
	}
	if !IsNil(o.Files) {
		toSerialize["files"] = o.Files
	}
	if !IsNil(o.FindingGroupSet) {
		toSerialize["finding_group_set"] = o.FindingGroupSet
	}
	if !IsNil(o.FoundBy) {
		toSerialize["found_by"] = o.FoundBy
	}
	if !IsNil(o.LastReviewedBy) {
		toSerialize["last_reviewed_by"] = o.LastReviewedBy
	}
	if !IsNil(o.MitigatedBy) {
		toSerialize["mitigated_by"] = o.MitigatedBy
	}
	if !IsNil(o.Notes) {
		toSerialize["notes"] = o.Notes
	}
	if !IsNil(o.OtherIssues) {
		toSerialize["other_issues"] = o.OtherIssues
	}
	if !IsNil(o.Reporter) {
		toSerialize["reporter"] = o.Reporter
	}
	if !IsNil(o.ReviewRequestedBy) {
		toSerialize["review_requested_by"] = o.ReviewRequestedBy
	}
	if !IsNil(o.Reviewers) {
		toSerialize["reviewers"] = o.Reviewers
	}
	if !IsNil(o.RiskAcceptanceSet) {
		toSerialize["risk_acceptance_set"] = o.RiskAcceptanceSet
	}
	if !IsNil(o.SensitiveIssues) {
		toSerialize["sensitive_issues"] = o.SensitiveIssues
	}
	if !IsNil(o.SessionIssues) {
		toSerialize["session_issues"] = o.SessionIssues
	}
	if !IsNil(o.SonarqubeIssue) {
		toSerialize["sonarqube_issue"] = o.SonarqubeIssue
	}
	if !IsNil(o.Test) {
		toSerialize["test"] = o.Test
	}
	if !IsNil(o.TestImportSet) {
		toSerialize["test_import_set"] = o.TestImportSet
	}
	return toSerialize, nil
}

type NullableFindingPrefetch struct {
	value *FindingPrefetch
	isSet bool
}

func (v NullableFindingPrefetch) Get() *FindingPrefetch {
	return v.value
}

func (v *NullableFindingPrefetch) Set(val *FindingPrefetch) {
	v.value = val
	v.isSet = true
}

func (v NullableFindingPrefetch) IsSet() bool {
	return v.isSet
}

func (v *NullableFindingPrefetch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFindingPrefetch(val *FindingPrefetch) *NullableFindingPrefetch {
	return &NullableFindingPrefetch{value: val, isSet: true}
}

func (v NullableFindingPrefetch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFindingPrefetch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


