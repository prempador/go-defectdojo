/*
Defect Dojo API v2

Defect Dojo - Open Source vulnerability Management made easy. Prefetch related parameters/responses not yet in the schema.

API version: 2.30.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package defectdojo

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type JiraConfigurationsAPI interface {

	/*
	JiraConfigurationsCreate Method for JiraConfigurationsCreate

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiJiraConfigurationsCreateRequest
	*/
	JiraConfigurationsCreate(ctx context.Context) ApiJiraConfigurationsCreateRequest

	// JiraConfigurationsCreateExecute executes the request
	//  @return JIRAInstance
	JiraConfigurationsCreateExecute(r ApiJiraConfigurationsCreateRequest) (*JIRAInstance, *http.Response, error)

	/*
	JiraConfigurationsDeletePreviewList Method for JiraConfigurationsDeletePreviewList

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this jir a_ instance.
	@return ApiJiraConfigurationsDeletePreviewListRequest
	*/
	JiraConfigurationsDeletePreviewList(ctx context.Context, id int32) ApiJiraConfigurationsDeletePreviewListRequest

	// JiraConfigurationsDeletePreviewListExecute executes the request
	//  @return PaginatedDeletePreviewList
	JiraConfigurationsDeletePreviewListExecute(r ApiJiraConfigurationsDeletePreviewListRequest) (*PaginatedDeletePreviewList, *http.Response, error)

	/*
	JiraConfigurationsDestroy Method for JiraConfigurationsDestroy

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this jir a_ instance.
	@return ApiJiraConfigurationsDestroyRequest
	*/
	JiraConfigurationsDestroy(ctx context.Context, id int32) ApiJiraConfigurationsDestroyRequest

	// JiraConfigurationsDestroyExecute executes the request
	JiraConfigurationsDestroyExecute(r ApiJiraConfigurationsDestroyRequest) (*http.Response, error)

	/*
	JiraConfigurationsList Method for JiraConfigurationsList

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiJiraConfigurationsListRequest
	*/
	JiraConfigurationsList(ctx context.Context) ApiJiraConfigurationsListRequest

	// JiraConfigurationsListExecute executes the request
	//  @return PaginatedJIRAInstanceList
	JiraConfigurationsListExecute(r ApiJiraConfigurationsListRequest) (*PaginatedJIRAInstanceList, *http.Response, error)

	/*
	JiraConfigurationsPartialUpdate Method for JiraConfigurationsPartialUpdate

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this jir a_ instance.
	@return ApiJiraConfigurationsPartialUpdateRequest
	*/
	JiraConfigurationsPartialUpdate(ctx context.Context, id int32) ApiJiraConfigurationsPartialUpdateRequest

	// JiraConfigurationsPartialUpdateExecute executes the request
	//  @return JIRAInstance
	JiraConfigurationsPartialUpdateExecute(r ApiJiraConfigurationsPartialUpdateRequest) (*JIRAInstance, *http.Response, error)

	/*
	JiraConfigurationsRetrieve Method for JiraConfigurationsRetrieve

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this jir a_ instance.
	@return ApiJiraConfigurationsRetrieveRequest
	*/
	JiraConfigurationsRetrieve(ctx context.Context, id int32) ApiJiraConfigurationsRetrieveRequest

	// JiraConfigurationsRetrieveExecute executes the request
	//  @return JIRAInstance
	JiraConfigurationsRetrieveExecute(r ApiJiraConfigurationsRetrieveRequest) (*JIRAInstance, *http.Response, error)

	/*
	JiraConfigurationsUpdate Method for JiraConfigurationsUpdate

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this jir a_ instance.
	@return ApiJiraConfigurationsUpdateRequest
	*/
	JiraConfigurationsUpdate(ctx context.Context, id int32) ApiJiraConfigurationsUpdateRequest

	// JiraConfigurationsUpdateExecute executes the request
	//  @return JIRAInstance
	JiraConfigurationsUpdateExecute(r ApiJiraConfigurationsUpdateRequest) (*JIRAInstance, *http.Response, error)
}

// JiraConfigurationsAPIService JiraConfigurationsAPI service
type JiraConfigurationsAPIService service

type ApiJiraConfigurationsCreateRequest struct {
	ctx context.Context
	ApiService JiraConfigurationsAPI
	jIRAInstanceRequest *JIRAInstanceRequest
}

func (r ApiJiraConfigurationsCreateRequest) JIRAInstanceRequest(jIRAInstanceRequest JIRAInstanceRequest) ApiJiraConfigurationsCreateRequest {
	r.jIRAInstanceRequest = &jIRAInstanceRequest
	return r
}

func (r ApiJiraConfigurationsCreateRequest) Execute() (*JIRAInstance, *http.Response, error) {
	return r.ApiService.JiraConfigurationsCreateExecute(r)
}

/*
JiraConfigurationsCreate Method for JiraConfigurationsCreate

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiJiraConfigurationsCreateRequest
*/
func (a *JiraConfigurationsAPIService) JiraConfigurationsCreate(ctx context.Context) ApiJiraConfigurationsCreateRequest {
	return ApiJiraConfigurationsCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return JIRAInstance
func (a *JiraConfigurationsAPIService) JiraConfigurationsCreateExecute(r ApiJiraConfigurationsCreateRequest) (*JIRAInstance, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *JIRAInstance
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "JiraConfigurationsAPIService.JiraConfigurationsCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/jira_configurations/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.jIRAInstanceRequest == nil {
		return localVarReturnValue, nil, reportError("jIRAInstanceRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.jIRAInstanceRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiJiraConfigurationsDeletePreviewListRequest struct {
	ctx context.Context
	ApiService JiraConfigurationsAPI
	id int32
	limit *int32
	offset *int32
}

// Number of results to return per page.
func (r ApiJiraConfigurationsDeletePreviewListRequest) Limit(limit int32) ApiJiraConfigurationsDeletePreviewListRequest {
	r.limit = &limit
	return r
}

// The initial index from which to return the results.
func (r ApiJiraConfigurationsDeletePreviewListRequest) Offset(offset int32) ApiJiraConfigurationsDeletePreviewListRequest {
	r.offset = &offset
	return r
}

func (r ApiJiraConfigurationsDeletePreviewListRequest) Execute() (*PaginatedDeletePreviewList, *http.Response, error) {
	return r.ApiService.JiraConfigurationsDeletePreviewListExecute(r)
}

/*
JiraConfigurationsDeletePreviewList Method for JiraConfigurationsDeletePreviewList

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A unique integer value identifying this jir a_ instance.
 @return ApiJiraConfigurationsDeletePreviewListRequest
*/
func (a *JiraConfigurationsAPIService) JiraConfigurationsDeletePreviewList(ctx context.Context, id int32) ApiJiraConfigurationsDeletePreviewListRequest {
	return ApiJiraConfigurationsDeletePreviewListRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PaginatedDeletePreviewList
func (a *JiraConfigurationsAPIService) JiraConfigurationsDeletePreviewListExecute(r ApiJiraConfigurationsDeletePreviewListRequest) (*PaginatedDeletePreviewList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedDeletePreviewList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "JiraConfigurationsAPIService.JiraConfigurationsDeletePreviewList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/jira_configurations/{id}/delete_preview/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiJiraConfigurationsDestroyRequest struct {
	ctx context.Context
	ApiService JiraConfigurationsAPI
	id int32
}

func (r ApiJiraConfigurationsDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.JiraConfigurationsDestroyExecute(r)
}

/*
JiraConfigurationsDestroy Method for JiraConfigurationsDestroy

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A unique integer value identifying this jir a_ instance.
 @return ApiJiraConfigurationsDestroyRequest
*/
func (a *JiraConfigurationsAPIService) JiraConfigurationsDestroy(ctx context.Context, id int32) ApiJiraConfigurationsDestroyRequest {
	return ApiJiraConfigurationsDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *JiraConfigurationsAPIService) JiraConfigurationsDestroyExecute(r ApiJiraConfigurationsDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "JiraConfigurationsAPIService.JiraConfigurationsDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/jira_configurations/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiJiraConfigurationsListRequest struct {
	ctx context.Context
	ApiService JiraConfigurationsAPI
	id *int32
	limit *int32
	offset *int32
	url *string
}

func (r ApiJiraConfigurationsListRequest) Id(id int32) ApiJiraConfigurationsListRequest {
	r.id = &id
	return r
}

// Number of results to return per page.
func (r ApiJiraConfigurationsListRequest) Limit(limit int32) ApiJiraConfigurationsListRequest {
	r.limit = &limit
	return r
}

// The initial index from which to return the results.
func (r ApiJiraConfigurationsListRequest) Offset(offset int32) ApiJiraConfigurationsListRequest {
	r.offset = &offset
	return r
}

func (r ApiJiraConfigurationsListRequest) Url(url string) ApiJiraConfigurationsListRequest {
	r.url = &url
	return r
}

func (r ApiJiraConfigurationsListRequest) Execute() (*PaginatedJIRAInstanceList, *http.Response, error) {
	return r.ApiService.JiraConfigurationsListExecute(r)
}

/*
JiraConfigurationsList Method for JiraConfigurationsList

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiJiraConfigurationsListRequest
*/
func (a *JiraConfigurationsAPIService) JiraConfigurationsList(ctx context.Context) ApiJiraConfigurationsListRequest {
	return ApiJiraConfigurationsListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedJIRAInstanceList
func (a *JiraConfigurationsAPIService) JiraConfigurationsListExecute(r ApiJiraConfigurationsListRequest) (*PaginatedJIRAInstanceList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedJIRAInstanceList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "JiraConfigurationsAPIService.JiraConfigurationsList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/jira_configurations/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.id != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id", r.id, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.url != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "url", r.url, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiJiraConfigurationsPartialUpdateRequest struct {
	ctx context.Context
	ApiService JiraConfigurationsAPI
	id int32
	patchedJIRAInstanceRequest *PatchedJIRAInstanceRequest
}

func (r ApiJiraConfigurationsPartialUpdateRequest) PatchedJIRAInstanceRequest(patchedJIRAInstanceRequest PatchedJIRAInstanceRequest) ApiJiraConfigurationsPartialUpdateRequest {
	r.patchedJIRAInstanceRequest = &patchedJIRAInstanceRequest
	return r
}

func (r ApiJiraConfigurationsPartialUpdateRequest) Execute() (*JIRAInstance, *http.Response, error) {
	return r.ApiService.JiraConfigurationsPartialUpdateExecute(r)
}

/*
JiraConfigurationsPartialUpdate Method for JiraConfigurationsPartialUpdate

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A unique integer value identifying this jir a_ instance.
 @return ApiJiraConfigurationsPartialUpdateRequest
*/
func (a *JiraConfigurationsAPIService) JiraConfigurationsPartialUpdate(ctx context.Context, id int32) ApiJiraConfigurationsPartialUpdateRequest {
	return ApiJiraConfigurationsPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return JIRAInstance
func (a *JiraConfigurationsAPIService) JiraConfigurationsPartialUpdateExecute(r ApiJiraConfigurationsPartialUpdateRequest) (*JIRAInstance, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *JIRAInstance
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "JiraConfigurationsAPIService.JiraConfigurationsPartialUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/jira_configurations/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.patchedJIRAInstanceRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiJiraConfigurationsRetrieveRequest struct {
	ctx context.Context
	ApiService JiraConfigurationsAPI
	id int32
}

func (r ApiJiraConfigurationsRetrieveRequest) Execute() (*JIRAInstance, *http.Response, error) {
	return r.ApiService.JiraConfigurationsRetrieveExecute(r)
}

/*
JiraConfigurationsRetrieve Method for JiraConfigurationsRetrieve

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A unique integer value identifying this jir a_ instance.
 @return ApiJiraConfigurationsRetrieveRequest
*/
func (a *JiraConfigurationsAPIService) JiraConfigurationsRetrieve(ctx context.Context, id int32) ApiJiraConfigurationsRetrieveRequest {
	return ApiJiraConfigurationsRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return JIRAInstance
func (a *JiraConfigurationsAPIService) JiraConfigurationsRetrieveExecute(r ApiJiraConfigurationsRetrieveRequest) (*JIRAInstance, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *JIRAInstance
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "JiraConfigurationsAPIService.JiraConfigurationsRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/jira_configurations/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiJiraConfigurationsUpdateRequest struct {
	ctx context.Context
	ApiService JiraConfigurationsAPI
	id int32
	jIRAInstanceRequest *JIRAInstanceRequest
}

func (r ApiJiraConfigurationsUpdateRequest) JIRAInstanceRequest(jIRAInstanceRequest JIRAInstanceRequest) ApiJiraConfigurationsUpdateRequest {
	r.jIRAInstanceRequest = &jIRAInstanceRequest
	return r
}

func (r ApiJiraConfigurationsUpdateRequest) Execute() (*JIRAInstance, *http.Response, error) {
	return r.ApiService.JiraConfigurationsUpdateExecute(r)
}

/*
JiraConfigurationsUpdate Method for JiraConfigurationsUpdate

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A unique integer value identifying this jir a_ instance.
 @return ApiJiraConfigurationsUpdateRequest
*/
func (a *JiraConfigurationsAPIService) JiraConfigurationsUpdate(ctx context.Context, id int32) ApiJiraConfigurationsUpdateRequest {
	return ApiJiraConfigurationsUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return JIRAInstance
func (a *JiraConfigurationsAPIService) JiraConfigurationsUpdateExecute(r ApiJiraConfigurationsUpdateRequest) (*JIRAInstance, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *JIRAInstance
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "JiraConfigurationsAPIService.JiraConfigurationsUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/jira_configurations/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.jIRAInstanceRequest == nil {
		return localVarReturnValue, nil, reportError("jIRAInstanceRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.jIRAInstanceRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
