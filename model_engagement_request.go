/*
Defect Dojo API v2

Defect Dojo - Open Source vulnerability Management made easy. Prefetch related parameters/responses not yet in the schema.

API version: 2.31.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package defectdojo

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EngagementRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EngagementRequest{}

// EngagementRequest struct for EngagementRequest
type EngagementRequest struct {
	Tags []string `json:"tags,omitempty"`
	Name NullableString `json:"name,omitempty"`
	Description NullableString `json:"description,omitempty"`
	// Version of the product the engagement tested.
	Version NullableString `json:"version,omitempty"`
	FirstContacted NullableString `json:"first_contacted,omitempty"`
	TargetStart string `json:"target_start"`
	TargetEnd string `json:"target_end"`
	Reason NullableString `json:"reason,omitempty"`
	// Link to epic or ticket system with changes to version.
	Tracker NullableString `json:"tracker,omitempty"`
	TestStrategy NullableString `json:"test_strategy,omitempty"`
	ThreatModel *bool `json:"threat_model,omitempty"`
	ApiTest *bool `json:"api_test,omitempty"`
	PenTest *bool `json:"pen_test,omitempty"`
	CheckList *bool `json:"check_list,omitempty"`
	// * `Not Started` - Not Started * `Blocked` - Blocked * `Cancelled` - Cancelled * `Completed` - Completed * `In Progress` - In Progress * `On Hold` - On Hold * `Waiting for Resource` - Waiting for Resource
	Status NullableString `json:"status,omitempty"`
	// * `Interactive` - Interactive * `CI/CD` - CI/CD
	EngagementType NullableString `json:"engagement_type,omitempty"`
	// Build ID of the product the engagement tested.
	BuildId NullableString `json:"build_id,omitempty"`
	// Commit hash from repo
	CommitHash NullableString `json:"commit_hash,omitempty"`
	// Tag or branch of the product the engagement tested.
	BranchTag NullableString `json:"branch_tag,omitempty"`
	// Resource link to source code
	SourceCodeManagementUri NullableString `json:"source_code_management_uri,omitempty"`
	// If enabled deduplication will only mark a finding in this engagement as duplicate of another finding if both findings are in this engagement. If disabled, deduplication is on the product level.
	DeduplicationOnEngagement *bool `json:"deduplication_on_engagement,omitempty"`
	Lead NullableInt32 `json:"lead,omitempty"`
	Requester NullableInt32 `json:"requester,omitempty"`
	// Settings and notes for performing this engagement.
	Preset NullableInt32 `json:"preset,omitempty"`
	ReportType NullableInt32 `json:"report_type,omitempty"`
	Product int32 `json:"product"`
	// Build server responsible for CI/CD test
	BuildServer NullableInt32 `json:"build_server,omitempty"`
	// Source code server for CI/CD test
	SourceCodeManagementServer NullableInt32 `json:"source_code_management_server,omitempty"`
	// Orchestration service responsible for CI/CD test
	OrchestrationEngine NullableInt32 `json:"orchestration_engine,omitempty"`
}

type _EngagementRequest EngagementRequest

// NewEngagementRequest instantiates a new EngagementRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEngagementRequest(targetStart string, targetEnd string, product int32) *EngagementRequest {
	this := EngagementRequest{}
	this.TargetStart = targetStart
	this.TargetEnd = targetEnd
	this.Product = product
	return &this
}

// NewEngagementRequestWithDefaults instantiates a new EngagementRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEngagementRequestWithDefaults() *EngagementRequest {
	this := EngagementRequest{}
	return &this
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *EngagementRequest) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EngagementRequest) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *EngagementRequest) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *EngagementRequest) SetTags(v []string) {
	o.Tags = v
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EngagementRequest) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EngagementRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *EngagementRequest) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *EngagementRequest) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *EngagementRequest) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *EngagementRequest) UnsetName() {
	o.Name.Unset()
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EngagementRequest) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EngagementRequest) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *EngagementRequest) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *EngagementRequest) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *EngagementRequest) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *EngagementRequest) UnsetDescription() {
	o.Description.Unset()
}

// GetVersion returns the Version field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EngagementRequest) GetVersion() string {
	if o == nil || IsNil(o.Version.Get()) {
		var ret string
		return ret
	}
	return *o.Version.Get()
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EngagementRequest) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Version.Get(), o.Version.IsSet()
}

// HasVersion returns a boolean if a field has been set.
func (o *EngagementRequest) HasVersion() bool {
	if o != nil && o.Version.IsSet() {
		return true
	}

	return false
}

// SetVersion gets a reference to the given NullableString and assigns it to the Version field.
func (o *EngagementRequest) SetVersion(v string) {
	o.Version.Set(&v)
}
// SetVersionNil sets the value for Version to be an explicit nil
func (o *EngagementRequest) SetVersionNil() {
	o.Version.Set(nil)
}

// UnsetVersion ensures that no value is present for Version, not even an explicit nil
func (o *EngagementRequest) UnsetVersion() {
	o.Version.Unset()
}

// GetFirstContacted returns the FirstContacted field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EngagementRequest) GetFirstContacted() string {
	if o == nil || IsNil(o.FirstContacted.Get()) {
		var ret string
		return ret
	}
	return *o.FirstContacted.Get()
}

// GetFirstContactedOk returns a tuple with the FirstContacted field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EngagementRequest) GetFirstContactedOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FirstContacted.Get(), o.FirstContacted.IsSet()
}

// HasFirstContacted returns a boolean if a field has been set.
func (o *EngagementRequest) HasFirstContacted() bool {
	if o != nil && o.FirstContacted.IsSet() {
		return true
	}

	return false
}

// SetFirstContacted gets a reference to the given NullableString and assigns it to the FirstContacted field.
func (o *EngagementRequest) SetFirstContacted(v string) {
	o.FirstContacted.Set(&v)
}
// SetFirstContactedNil sets the value for FirstContacted to be an explicit nil
func (o *EngagementRequest) SetFirstContactedNil() {
	o.FirstContacted.Set(nil)
}

// UnsetFirstContacted ensures that no value is present for FirstContacted, not even an explicit nil
func (o *EngagementRequest) UnsetFirstContacted() {
	o.FirstContacted.Unset()
}

// GetTargetStart returns the TargetStart field value
func (o *EngagementRequest) GetTargetStart() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TargetStart
}

// GetTargetStartOk returns a tuple with the TargetStart field value
// and a boolean to check if the value has been set.
func (o *EngagementRequest) GetTargetStartOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TargetStart, true
}

// SetTargetStart sets field value
func (o *EngagementRequest) SetTargetStart(v string) {
	o.TargetStart = v
}

// GetTargetEnd returns the TargetEnd field value
func (o *EngagementRequest) GetTargetEnd() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TargetEnd
}

// GetTargetEndOk returns a tuple with the TargetEnd field value
// and a boolean to check if the value has been set.
func (o *EngagementRequest) GetTargetEndOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TargetEnd, true
}

// SetTargetEnd sets field value
func (o *EngagementRequest) SetTargetEnd(v string) {
	o.TargetEnd = v
}

// GetReason returns the Reason field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EngagementRequest) GetReason() string {
	if o == nil || IsNil(o.Reason.Get()) {
		var ret string
		return ret
	}
	return *o.Reason.Get()
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EngagementRequest) GetReasonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Reason.Get(), o.Reason.IsSet()
}

// HasReason returns a boolean if a field has been set.
func (o *EngagementRequest) HasReason() bool {
	if o != nil && o.Reason.IsSet() {
		return true
	}

	return false
}

// SetReason gets a reference to the given NullableString and assigns it to the Reason field.
func (o *EngagementRequest) SetReason(v string) {
	o.Reason.Set(&v)
}
// SetReasonNil sets the value for Reason to be an explicit nil
func (o *EngagementRequest) SetReasonNil() {
	o.Reason.Set(nil)
}

// UnsetReason ensures that no value is present for Reason, not even an explicit nil
func (o *EngagementRequest) UnsetReason() {
	o.Reason.Unset()
}

// GetTracker returns the Tracker field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EngagementRequest) GetTracker() string {
	if o == nil || IsNil(o.Tracker.Get()) {
		var ret string
		return ret
	}
	return *o.Tracker.Get()
}

// GetTrackerOk returns a tuple with the Tracker field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EngagementRequest) GetTrackerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Tracker.Get(), o.Tracker.IsSet()
}

// HasTracker returns a boolean if a field has been set.
func (o *EngagementRequest) HasTracker() bool {
	if o != nil && o.Tracker.IsSet() {
		return true
	}

	return false
}

// SetTracker gets a reference to the given NullableString and assigns it to the Tracker field.
func (o *EngagementRequest) SetTracker(v string) {
	o.Tracker.Set(&v)
}
// SetTrackerNil sets the value for Tracker to be an explicit nil
func (o *EngagementRequest) SetTrackerNil() {
	o.Tracker.Set(nil)
}

// UnsetTracker ensures that no value is present for Tracker, not even an explicit nil
func (o *EngagementRequest) UnsetTracker() {
	o.Tracker.Unset()
}

// GetTestStrategy returns the TestStrategy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EngagementRequest) GetTestStrategy() string {
	if o == nil || IsNil(o.TestStrategy.Get()) {
		var ret string
		return ret
	}
	return *o.TestStrategy.Get()
}

// GetTestStrategyOk returns a tuple with the TestStrategy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EngagementRequest) GetTestStrategyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TestStrategy.Get(), o.TestStrategy.IsSet()
}

// HasTestStrategy returns a boolean if a field has been set.
func (o *EngagementRequest) HasTestStrategy() bool {
	if o != nil && o.TestStrategy.IsSet() {
		return true
	}

	return false
}

// SetTestStrategy gets a reference to the given NullableString and assigns it to the TestStrategy field.
func (o *EngagementRequest) SetTestStrategy(v string) {
	o.TestStrategy.Set(&v)
}
// SetTestStrategyNil sets the value for TestStrategy to be an explicit nil
func (o *EngagementRequest) SetTestStrategyNil() {
	o.TestStrategy.Set(nil)
}

// UnsetTestStrategy ensures that no value is present for TestStrategy, not even an explicit nil
func (o *EngagementRequest) UnsetTestStrategy() {
	o.TestStrategy.Unset()
}

// GetThreatModel returns the ThreatModel field value if set, zero value otherwise.
func (o *EngagementRequest) GetThreatModel() bool {
	if o == nil || IsNil(o.ThreatModel) {
		var ret bool
		return ret
	}
	return *o.ThreatModel
}

// GetThreatModelOk returns a tuple with the ThreatModel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EngagementRequest) GetThreatModelOk() (*bool, bool) {
	if o == nil || IsNil(o.ThreatModel) {
		return nil, false
	}
	return o.ThreatModel, true
}

// HasThreatModel returns a boolean if a field has been set.
func (o *EngagementRequest) HasThreatModel() bool {
	if o != nil && !IsNil(o.ThreatModel) {
		return true
	}

	return false
}

// SetThreatModel gets a reference to the given bool and assigns it to the ThreatModel field.
func (o *EngagementRequest) SetThreatModel(v bool) {
	o.ThreatModel = &v
}

// GetApiTest returns the ApiTest field value if set, zero value otherwise.
func (o *EngagementRequest) GetApiTest() bool {
	if o == nil || IsNil(o.ApiTest) {
		var ret bool
		return ret
	}
	return *o.ApiTest
}

// GetApiTestOk returns a tuple with the ApiTest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EngagementRequest) GetApiTestOk() (*bool, bool) {
	if o == nil || IsNil(o.ApiTest) {
		return nil, false
	}
	return o.ApiTest, true
}

// HasApiTest returns a boolean if a field has been set.
func (o *EngagementRequest) HasApiTest() bool {
	if o != nil && !IsNil(o.ApiTest) {
		return true
	}

	return false
}

// SetApiTest gets a reference to the given bool and assigns it to the ApiTest field.
func (o *EngagementRequest) SetApiTest(v bool) {
	o.ApiTest = &v
}

// GetPenTest returns the PenTest field value if set, zero value otherwise.
func (o *EngagementRequest) GetPenTest() bool {
	if o == nil || IsNil(o.PenTest) {
		var ret bool
		return ret
	}
	return *o.PenTest
}

// GetPenTestOk returns a tuple with the PenTest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EngagementRequest) GetPenTestOk() (*bool, bool) {
	if o == nil || IsNil(o.PenTest) {
		return nil, false
	}
	return o.PenTest, true
}

// HasPenTest returns a boolean if a field has been set.
func (o *EngagementRequest) HasPenTest() bool {
	if o != nil && !IsNil(o.PenTest) {
		return true
	}

	return false
}

// SetPenTest gets a reference to the given bool and assigns it to the PenTest field.
func (o *EngagementRequest) SetPenTest(v bool) {
	o.PenTest = &v
}

// GetCheckList returns the CheckList field value if set, zero value otherwise.
func (o *EngagementRequest) GetCheckList() bool {
	if o == nil || IsNil(o.CheckList) {
		var ret bool
		return ret
	}
	return *o.CheckList
}

// GetCheckListOk returns a tuple with the CheckList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EngagementRequest) GetCheckListOk() (*bool, bool) {
	if o == nil || IsNil(o.CheckList) {
		return nil, false
	}
	return o.CheckList, true
}

// HasCheckList returns a boolean if a field has been set.
func (o *EngagementRequest) HasCheckList() bool {
	if o != nil && !IsNil(o.CheckList) {
		return true
	}

	return false
}

// SetCheckList gets a reference to the given bool and assigns it to the CheckList field.
func (o *EngagementRequest) SetCheckList(v bool) {
	o.CheckList = &v
}

// GetStatus returns the Status field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EngagementRequest) GetStatus() string {
	if o == nil || IsNil(o.Status.Get()) {
		var ret string
		return ret
	}
	return *o.Status.Get()
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EngagementRequest) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Status.Get(), o.Status.IsSet()
}

// HasStatus returns a boolean if a field has been set.
func (o *EngagementRequest) HasStatus() bool {
	if o != nil && o.Status.IsSet() {
		return true
	}

	return false
}

// SetStatus gets a reference to the given NullableString and assigns it to the Status field.
func (o *EngagementRequest) SetStatus(v string) {
	o.Status.Set(&v)
}
// SetStatusNil sets the value for Status to be an explicit nil
func (o *EngagementRequest) SetStatusNil() {
	o.Status.Set(nil)
}

// UnsetStatus ensures that no value is present for Status, not even an explicit nil
func (o *EngagementRequest) UnsetStatus() {
	o.Status.Unset()
}

// GetEngagementType returns the EngagementType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EngagementRequest) GetEngagementType() string {
	if o == nil || IsNil(o.EngagementType.Get()) {
		var ret string
		return ret
	}
	return *o.EngagementType.Get()
}

// GetEngagementTypeOk returns a tuple with the EngagementType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EngagementRequest) GetEngagementTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EngagementType.Get(), o.EngagementType.IsSet()
}

// HasEngagementType returns a boolean if a field has been set.
func (o *EngagementRequest) HasEngagementType() bool {
	if o != nil && o.EngagementType.IsSet() {
		return true
	}

	return false
}

// SetEngagementType gets a reference to the given NullableString and assigns it to the EngagementType field.
func (o *EngagementRequest) SetEngagementType(v string) {
	o.EngagementType.Set(&v)
}
// SetEngagementTypeNil sets the value for EngagementType to be an explicit nil
func (o *EngagementRequest) SetEngagementTypeNil() {
	o.EngagementType.Set(nil)
}

// UnsetEngagementType ensures that no value is present for EngagementType, not even an explicit nil
func (o *EngagementRequest) UnsetEngagementType() {
	o.EngagementType.Unset()
}

// GetBuildId returns the BuildId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EngagementRequest) GetBuildId() string {
	if o == nil || IsNil(o.BuildId.Get()) {
		var ret string
		return ret
	}
	return *o.BuildId.Get()
}

// GetBuildIdOk returns a tuple with the BuildId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EngagementRequest) GetBuildIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BuildId.Get(), o.BuildId.IsSet()
}

// HasBuildId returns a boolean if a field has been set.
func (o *EngagementRequest) HasBuildId() bool {
	if o != nil && o.BuildId.IsSet() {
		return true
	}

	return false
}

// SetBuildId gets a reference to the given NullableString and assigns it to the BuildId field.
func (o *EngagementRequest) SetBuildId(v string) {
	o.BuildId.Set(&v)
}
// SetBuildIdNil sets the value for BuildId to be an explicit nil
func (o *EngagementRequest) SetBuildIdNil() {
	o.BuildId.Set(nil)
}

// UnsetBuildId ensures that no value is present for BuildId, not even an explicit nil
func (o *EngagementRequest) UnsetBuildId() {
	o.BuildId.Unset()
}

// GetCommitHash returns the CommitHash field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EngagementRequest) GetCommitHash() string {
	if o == nil || IsNil(o.CommitHash.Get()) {
		var ret string
		return ret
	}
	return *o.CommitHash.Get()
}

// GetCommitHashOk returns a tuple with the CommitHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EngagementRequest) GetCommitHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CommitHash.Get(), o.CommitHash.IsSet()
}

// HasCommitHash returns a boolean if a field has been set.
func (o *EngagementRequest) HasCommitHash() bool {
	if o != nil && o.CommitHash.IsSet() {
		return true
	}

	return false
}

// SetCommitHash gets a reference to the given NullableString and assigns it to the CommitHash field.
func (o *EngagementRequest) SetCommitHash(v string) {
	o.CommitHash.Set(&v)
}
// SetCommitHashNil sets the value for CommitHash to be an explicit nil
func (o *EngagementRequest) SetCommitHashNil() {
	o.CommitHash.Set(nil)
}

// UnsetCommitHash ensures that no value is present for CommitHash, not even an explicit nil
func (o *EngagementRequest) UnsetCommitHash() {
	o.CommitHash.Unset()
}

// GetBranchTag returns the BranchTag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EngagementRequest) GetBranchTag() string {
	if o == nil || IsNil(o.BranchTag.Get()) {
		var ret string
		return ret
	}
	return *o.BranchTag.Get()
}

// GetBranchTagOk returns a tuple with the BranchTag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EngagementRequest) GetBranchTagOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BranchTag.Get(), o.BranchTag.IsSet()
}

// HasBranchTag returns a boolean if a field has been set.
func (o *EngagementRequest) HasBranchTag() bool {
	if o != nil && o.BranchTag.IsSet() {
		return true
	}

	return false
}

// SetBranchTag gets a reference to the given NullableString and assigns it to the BranchTag field.
func (o *EngagementRequest) SetBranchTag(v string) {
	o.BranchTag.Set(&v)
}
// SetBranchTagNil sets the value for BranchTag to be an explicit nil
func (o *EngagementRequest) SetBranchTagNil() {
	o.BranchTag.Set(nil)
}

// UnsetBranchTag ensures that no value is present for BranchTag, not even an explicit nil
func (o *EngagementRequest) UnsetBranchTag() {
	o.BranchTag.Unset()
}

// GetSourceCodeManagementUri returns the SourceCodeManagementUri field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EngagementRequest) GetSourceCodeManagementUri() string {
	if o == nil || IsNil(o.SourceCodeManagementUri.Get()) {
		var ret string
		return ret
	}
	return *o.SourceCodeManagementUri.Get()
}

// GetSourceCodeManagementUriOk returns a tuple with the SourceCodeManagementUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EngagementRequest) GetSourceCodeManagementUriOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SourceCodeManagementUri.Get(), o.SourceCodeManagementUri.IsSet()
}

// HasSourceCodeManagementUri returns a boolean if a field has been set.
func (o *EngagementRequest) HasSourceCodeManagementUri() bool {
	if o != nil && o.SourceCodeManagementUri.IsSet() {
		return true
	}

	return false
}

// SetSourceCodeManagementUri gets a reference to the given NullableString and assigns it to the SourceCodeManagementUri field.
func (o *EngagementRequest) SetSourceCodeManagementUri(v string) {
	o.SourceCodeManagementUri.Set(&v)
}
// SetSourceCodeManagementUriNil sets the value for SourceCodeManagementUri to be an explicit nil
func (o *EngagementRequest) SetSourceCodeManagementUriNil() {
	o.SourceCodeManagementUri.Set(nil)
}

// UnsetSourceCodeManagementUri ensures that no value is present for SourceCodeManagementUri, not even an explicit nil
func (o *EngagementRequest) UnsetSourceCodeManagementUri() {
	o.SourceCodeManagementUri.Unset()
}

// GetDeduplicationOnEngagement returns the DeduplicationOnEngagement field value if set, zero value otherwise.
func (o *EngagementRequest) GetDeduplicationOnEngagement() bool {
	if o == nil || IsNil(o.DeduplicationOnEngagement) {
		var ret bool
		return ret
	}
	return *o.DeduplicationOnEngagement
}

// GetDeduplicationOnEngagementOk returns a tuple with the DeduplicationOnEngagement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EngagementRequest) GetDeduplicationOnEngagementOk() (*bool, bool) {
	if o == nil || IsNil(o.DeduplicationOnEngagement) {
		return nil, false
	}
	return o.DeduplicationOnEngagement, true
}

// HasDeduplicationOnEngagement returns a boolean if a field has been set.
func (o *EngagementRequest) HasDeduplicationOnEngagement() bool {
	if o != nil && !IsNil(o.DeduplicationOnEngagement) {
		return true
	}

	return false
}

// SetDeduplicationOnEngagement gets a reference to the given bool and assigns it to the DeduplicationOnEngagement field.
func (o *EngagementRequest) SetDeduplicationOnEngagement(v bool) {
	o.DeduplicationOnEngagement = &v
}

// GetLead returns the Lead field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EngagementRequest) GetLead() int32 {
	if o == nil || IsNil(o.Lead.Get()) {
		var ret int32
		return ret
	}
	return *o.Lead.Get()
}

// GetLeadOk returns a tuple with the Lead field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EngagementRequest) GetLeadOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Lead.Get(), o.Lead.IsSet()
}

// HasLead returns a boolean if a field has been set.
func (o *EngagementRequest) HasLead() bool {
	if o != nil && o.Lead.IsSet() {
		return true
	}

	return false
}

// SetLead gets a reference to the given NullableInt32 and assigns it to the Lead field.
func (o *EngagementRequest) SetLead(v int32) {
	o.Lead.Set(&v)
}
// SetLeadNil sets the value for Lead to be an explicit nil
func (o *EngagementRequest) SetLeadNil() {
	o.Lead.Set(nil)
}

// UnsetLead ensures that no value is present for Lead, not even an explicit nil
func (o *EngagementRequest) UnsetLead() {
	o.Lead.Unset()
}

// GetRequester returns the Requester field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EngagementRequest) GetRequester() int32 {
	if o == nil || IsNil(o.Requester.Get()) {
		var ret int32
		return ret
	}
	return *o.Requester.Get()
}

// GetRequesterOk returns a tuple with the Requester field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EngagementRequest) GetRequesterOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Requester.Get(), o.Requester.IsSet()
}

// HasRequester returns a boolean if a field has been set.
func (o *EngagementRequest) HasRequester() bool {
	if o != nil && o.Requester.IsSet() {
		return true
	}

	return false
}

// SetRequester gets a reference to the given NullableInt32 and assigns it to the Requester field.
func (o *EngagementRequest) SetRequester(v int32) {
	o.Requester.Set(&v)
}
// SetRequesterNil sets the value for Requester to be an explicit nil
func (o *EngagementRequest) SetRequesterNil() {
	o.Requester.Set(nil)
}

// UnsetRequester ensures that no value is present for Requester, not even an explicit nil
func (o *EngagementRequest) UnsetRequester() {
	o.Requester.Unset()
}

// GetPreset returns the Preset field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EngagementRequest) GetPreset() int32 {
	if o == nil || IsNil(o.Preset.Get()) {
		var ret int32
		return ret
	}
	return *o.Preset.Get()
}

// GetPresetOk returns a tuple with the Preset field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EngagementRequest) GetPresetOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Preset.Get(), o.Preset.IsSet()
}

// HasPreset returns a boolean if a field has been set.
func (o *EngagementRequest) HasPreset() bool {
	if o != nil && o.Preset.IsSet() {
		return true
	}

	return false
}

// SetPreset gets a reference to the given NullableInt32 and assigns it to the Preset field.
func (o *EngagementRequest) SetPreset(v int32) {
	o.Preset.Set(&v)
}
// SetPresetNil sets the value for Preset to be an explicit nil
func (o *EngagementRequest) SetPresetNil() {
	o.Preset.Set(nil)
}

// UnsetPreset ensures that no value is present for Preset, not even an explicit nil
func (o *EngagementRequest) UnsetPreset() {
	o.Preset.Unset()
}

// GetReportType returns the ReportType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EngagementRequest) GetReportType() int32 {
	if o == nil || IsNil(o.ReportType.Get()) {
		var ret int32
		return ret
	}
	return *o.ReportType.Get()
}

// GetReportTypeOk returns a tuple with the ReportType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EngagementRequest) GetReportTypeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ReportType.Get(), o.ReportType.IsSet()
}

// HasReportType returns a boolean if a field has been set.
func (o *EngagementRequest) HasReportType() bool {
	if o != nil && o.ReportType.IsSet() {
		return true
	}

	return false
}

// SetReportType gets a reference to the given NullableInt32 and assigns it to the ReportType field.
func (o *EngagementRequest) SetReportType(v int32) {
	o.ReportType.Set(&v)
}
// SetReportTypeNil sets the value for ReportType to be an explicit nil
func (o *EngagementRequest) SetReportTypeNil() {
	o.ReportType.Set(nil)
}

// UnsetReportType ensures that no value is present for ReportType, not even an explicit nil
func (o *EngagementRequest) UnsetReportType() {
	o.ReportType.Unset()
}

// GetProduct returns the Product field value
func (o *EngagementRequest) GetProduct() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Product
}

// GetProductOk returns a tuple with the Product field value
// and a boolean to check if the value has been set.
func (o *EngagementRequest) GetProductOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Product, true
}

// SetProduct sets field value
func (o *EngagementRequest) SetProduct(v int32) {
	o.Product = v
}

// GetBuildServer returns the BuildServer field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EngagementRequest) GetBuildServer() int32 {
	if o == nil || IsNil(o.BuildServer.Get()) {
		var ret int32
		return ret
	}
	return *o.BuildServer.Get()
}

// GetBuildServerOk returns a tuple with the BuildServer field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EngagementRequest) GetBuildServerOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.BuildServer.Get(), o.BuildServer.IsSet()
}

// HasBuildServer returns a boolean if a field has been set.
func (o *EngagementRequest) HasBuildServer() bool {
	if o != nil && o.BuildServer.IsSet() {
		return true
	}

	return false
}

// SetBuildServer gets a reference to the given NullableInt32 and assigns it to the BuildServer field.
func (o *EngagementRequest) SetBuildServer(v int32) {
	o.BuildServer.Set(&v)
}
// SetBuildServerNil sets the value for BuildServer to be an explicit nil
func (o *EngagementRequest) SetBuildServerNil() {
	o.BuildServer.Set(nil)
}

// UnsetBuildServer ensures that no value is present for BuildServer, not even an explicit nil
func (o *EngagementRequest) UnsetBuildServer() {
	o.BuildServer.Unset()
}

// GetSourceCodeManagementServer returns the SourceCodeManagementServer field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EngagementRequest) GetSourceCodeManagementServer() int32 {
	if o == nil || IsNil(o.SourceCodeManagementServer.Get()) {
		var ret int32
		return ret
	}
	return *o.SourceCodeManagementServer.Get()
}

// GetSourceCodeManagementServerOk returns a tuple with the SourceCodeManagementServer field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EngagementRequest) GetSourceCodeManagementServerOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.SourceCodeManagementServer.Get(), o.SourceCodeManagementServer.IsSet()
}

// HasSourceCodeManagementServer returns a boolean if a field has been set.
func (o *EngagementRequest) HasSourceCodeManagementServer() bool {
	if o != nil && o.SourceCodeManagementServer.IsSet() {
		return true
	}

	return false
}

// SetSourceCodeManagementServer gets a reference to the given NullableInt32 and assigns it to the SourceCodeManagementServer field.
func (o *EngagementRequest) SetSourceCodeManagementServer(v int32) {
	o.SourceCodeManagementServer.Set(&v)
}
// SetSourceCodeManagementServerNil sets the value for SourceCodeManagementServer to be an explicit nil
func (o *EngagementRequest) SetSourceCodeManagementServerNil() {
	o.SourceCodeManagementServer.Set(nil)
}

// UnsetSourceCodeManagementServer ensures that no value is present for SourceCodeManagementServer, not even an explicit nil
func (o *EngagementRequest) UnsetSourceCodeManagementServer() {
	o.SourceCodeManagementServer.Unset()
}

// GetOrchestrationEngine returns the OrchestrationEngine field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EngagementRequest) GetOrchestrationEngine() int32 {
	if o == nil || IsNil(o.OrchestrationEngine.Get()) {
		var ret int32
		return ret
	}
	return *o.OrchestrationEngine.Get()
}

// GetOrchestrationEngineOk returns a tuple with the OrchestrationEngine field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EngagementRequest) GetOrchestrationEngineOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.OrchestrationEngine.Get(), o.OrchestrationEngine.IsSet()
}

// HasOrchestrationEngine returns a boolean if a field has been set.
func (o *EngagementRequest) HasOrchestrationEngine() bool {
	if o != nil && o.OrchestrationEngine.IsSet() {
		return true
	}

	return false
}

// SetOrchestrationEngine gets a reference to the given NullableInt32 and assigns it to the OrchestrationEngine field.
func (o *EngagementRequest) SetOrchestrationEngine(v int32) {
	o.OrchestrationEngine.Set(&v)
}
// SetOrchestrationEngineNil sets the value for OrchestrationEngine to be an explicit nil
func (o *EngagementRequest) SetOrchestrationEngineNil() {
	o.OrchestrationEngine.Set(nil)
}

// UnsetOrchestrationEngine ensures that no value is present for OrchestrationEngine, not even an explicit nil
func (o *EngagementRequest) UnsetOrchestrationEngine() {
	o.OrchestrationEngine.Unset()
}

func (o EngagementRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EngagementRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.Version.IsSet() {
		toSerialize["version"] = o.Version.Get()
	}
	if o.FirstContacted.IsSet() {
		toSerialize["first_contacted"] = o.FirstContacted.Get()
	}
	toSerialize["target_start"] = o.TargetStart
	toSerialize["target_end"] = o.TargetEnd
	if o.Reason.IsSet() {
		toSerialize["reason"] = o.Reason.Get()
	}
	if o.Tracker.IsSet() {
		toSerialize["tracker"] = o.Tracker.Get()
	}
	if o.TestStrategy.IsSet() {
		toSerialize["test_strategy"] = o.TestStrategy.Get()
	}
	if !IsNil(o.ThreatModel) {
		toSerialize["threat_model"] = o.ThreatModel
	}
	if !IsNil(o.ApiTest) {
		toSerialize["api_test"] = o.ApiTest
	}
	if !IsNil(o.PenTest) {
		toSerialize["pen_test"] = o.PenTest
	}
	if !IsNil(o.CheckList) {
		toSerialize["check_list"] = o.CheckList
	}
	if o.Status.IsSet() {
		toSerialize["status"] = o.Status.Get()
	}
	if o.EngagementType.IsSet() {
		toSerialize["engagement_type"] = o.EngagementType.Get()
	}
	if o.BuildId.IsSet() {
		toSerialize["build_id"] = o.BuildId.Get()
	}
	if o.CommitHash.IsSet() {
		toSerialize["commit_hash"] = o.CommitHash.Get()
	}
	if o.BranchTag.IsSet() {
		toSerialize["branch_tag"] = o.BranchTag.Get()
	}
	if o.SourceCodeManagementUri.IsSet() {
		toSerialize["source_code_management_uri"] = o.SourceCodeManagementUri.Get()
	}
	if !IsNil(o.DeduplicationOnEngagement) {
		toSerialize["deduplication_on_engagement"] = o.DeduplicationOnEngagement
	}
	if o.Lead.IsSet() {
		toSerialize["lead"] = o.Lead.Get()
	}
	if o.Requester.IsSet() {
		toSerialize["requester"] = o.Requester.Get()
	}
	if o.Preset.IsSet() {
		toSerialize["preset"] = o.Preset.Get()
	}
	if o.ReportType.IsSet() {
		toSerialize["report_type"] = o.ReportType.Get()
	}
	toSerialize["product"] = o.Product
	if o.BuildServer.IsSet() {
		toSerialize["build_server"] = o.BuildServer.Get()
	}
	if o.SourceCodeManagementServer.IsSet() {
		toSerialize["source_code_management_server"] = o.SourceCodeManagementServer.Get()
	}
	if o.OrchestrationEngine.IsSet() {
		toSerialize["orchestration_engine"] = o.OrchestrationEngine.Get()
	}
	return toSerialize, nil
}

func (o *EngagementRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"target_start",
		"target_end",
		"product",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEngagementRequest := _EngagementRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEngagementRequest)

	if err != nil {
		return err
	}

	*o = EngagementRequest(varEngagementRequest)

	return err
}

type NullableEngagementRequest struct {
	value *EngagementRequest
	isSet bool
}

func (v NullableEngagementRequest) Get() *EngagementRequest {
	return v.value
}

func (v *NullableEngagementRequest) Set(val *EngagementRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableEngagementRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableEngagementRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEngagementRequest(val *EngagementRequest) *NullableEngagementRequest {
	return &NullableEngagementRequest{value: val, isSet: true}
}

func (v NullableEngagementRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEngagementRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


