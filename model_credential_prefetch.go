/*
Defect Dojo API v2

Defect Dojo - Open Source vulnerability Management made easy. Prefetch related parameters/responses not yet in the schema.

API version: 2.38.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package defectdojo

import (
	"encoding/json"
)

// checks if the CredentialPrefetch type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CredentialPrefetch{}

// CredentialPrefetch struct for CredentialPrefetch
type CredentialPrefetch struct {
	Environment *map[string]FindingEnvironment `json:"environment,omitempty"`
	Notes *map[string]Note `json:"notes,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CredentialPrefetch CredentialPrefetch

// NewCredentialPrefetch instantiates a new CredentialPrefetch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCredentialPrefetch() *CredentialPrefetch {
	this := CredentialPrefetch{}
	return &this
}

// NewCredentialPrefetchWithDefaults instantiates a new CredentialPrefetch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCredentialPrefetchWithDefaults() *CredentialPrefetch {
	this := CredentialPrefetch{}
	return &this
}

// GetEnvironment returns the Environment field value if set, zero value otherwise.
func (o *CredentialPrefetch) GetEnvironment() map[string]FindingEnvironment {
	if o == nil || IsNil(o.Environment) {
		var ret map[string]FindingEnvironment
		return ret
	}
	return *o.Environment
}

// GetEnvironmentOk returns a tuple with the Environment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CredentialPrefetch) GetEnvironmentOk() (*map[string]FindingEnvironment, bool) {
	if o == nil || IsNil(o.Environment) {
		return nil, false
	}
	return o.Environment, true
}

// HasEnvironment returns a boolean if a field has been set.
func (o *CredentialPrefetch) HasEnvironment() bool {
	if o != nil && !IsNil(o.Environment) {
		return true
	}

	return false
}

// SetEnvironment gets a reference to the given map[string]FindingEnvironment and assigns it to the Environment field.
func (o *CredentialPrefetch) SetEnvironment(v map[string]FindingEnvironment) {
	o.Environment = &v
}

// GetNotes returns the Notes field value if set, zero value otherwise.
func (o *CredentialPrefetch) GetNotes() map[string]Note {
	if o == nil || IsNil(o.Notes) {
		var ret map[string]Note
		return ret
	}
	return *o.Notes
}

// GetNotesOk returns a tuple with the Notes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CredentialPrefetch) GetNotesOk() (*map[string]Note, bool) {
	if o == nil || IsNil(o.Notes) {
		return nil, false
	}
	return o.Notes, true
}

// HasNotes returns a boolean if a field has been set.
func (o *CredentialPrefetch) HasNotes() bool {
	if o != nil && !IsNil(o.Notes) {
		return true
	}

	return false
}

// SetNotes gets a reference to the given map[string]Note and assigns it to the Notes field.
func (o *CredentialPrefetch) SetNotes(v map[string]Note) {
	o.Notes = &v
}

func (o CredentialPrefetch) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CredentialPrefetch) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Environment) {
		toSerialize["environment"] = o.Environment
	}
	if !IsNil(o.Notes) {
		toSerialize["notes"] = o.Notes
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CredentialPrefetch) UnmarshalJSON(data []byte) (err error) {
	varCredentialPrefetch := _CredentialPrefetch{}

	err = json.Unmarshal(data, &varCredentialPrefetch)

	if err != nil {
		return err
	}

	*o = CredentialPrefetch(varCredentialPrefetch)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "environment")
		delete(additionalProperties, "notes")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCredentialPrefetch struct {
	value *CredentialPrefetch
	isSet bool
}

func (v NullableCredentialPrefetch) Get() *CredentialPrefetch {
	return v.value
}

func (v *NullableCredentialPrefetch) Set(val *CredentialPrefetch) {
	v.value = val
	v.isSet = true
}

func (v NullableCredentialPrefetch) IsSet() bool {
	return v.isSet
}

func (v *NullableCredentialPrefetch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCredentialPrefetch(val *CredentialPrefetch) *NullableCredentialPrefetch {
	return &NullableCredentialPrefetch{value: val, isSet: true}
}

func (v NullableCredentialPrefetch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCredentialPrefetch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


