/*
Defect Dojo API v2

Defect Dojo - Open Source vulnerability Management made easy. Prefetch related parameters/responses not yet in the schema.

API version: 2.30.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Regulation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Regulation{}

// Regulation struct for Regulation
type Regulation struct {
	Id int32 `json:"id"`
	// The name of the regulation.
	Name string `json:"name"`
	// A shortened representation of the name.
	Acronym string `json:"acronym"`
	// The subject of the regulation.  * `privacy` - Privacy * `finance` - Finance * `education` - Education * `medical` - Medical * `corporate` - Corporate * `other` - Other
	Category string `json:"category"`
	// The territory over which the regulation applies.
	Jurisdiction string `json:"jurisdiction"`
	// Information about the regulation's purpose.
	Description *string `json:"description,omitempty"`
	// An external URL for more information.
	Reference *string `json:"reference,omitempty"`
}

type _Regulation Regulation

// NewRegulation instantiates a new Regulation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegulation(id int32, name string, acronym string, category string, jurisdiction string) *Regulation {
	this := Regulation{}
	this.Id = id
	this.Name = name
	this.Acronym = acronym
	this.Category = category
	this.Jurisdiction = jurisdiction
	return &this
}

// NewRegulationWithDefaults instantiates a new Regulation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegulationWithDefaults() *Regulation {
	this := Regulation{}
	return &this
}

// GetId returns the Id field value
func (o *Regulation) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Regulation) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Regulation) SetId(v int32) {
	o.Id = v
}

// GetName returns the Name field value
func (o *Regulation) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Regulation) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Regulation) SetName(v string) {
	o.Name = v
}

// GetAcronym returns the Acronym field value
func (o *Regulation) GetAcronym() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Acronym
}

// GetAcronymOk returns a tuple with the Acronym field value
// and a boolean to check if the value has been set.
func (o *Regulation) GetAcronymOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Acronym, true
}

// SetAcronym sets field value
func (o *Regulation) SetAcronym(v string) {
	o.Acronym = v
}

// GetCategory returns the Category field value
func (o *Regulation) GetCategory() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Category
}

// GetCategoryOk returns a tuple with the Category field value
// and a boolean to check if the value has been set.
func (o *Regulation) GetCategoryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Category, true
}

// SetCategory sets field value
func (o *Regulation) SetCategory(v string) {
	o.Category = v
}

// GetJurisdiction returns the Jurisdiction field value
func (o *Regulation) GetJurisdiction() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Jurisdiction
}

// GetJurisdictionOk returns a tuple with the Jurisdiction field value
// and a boolean to check if the value has been set.
func (o *Regulation) GetJurisdictionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Jurisdiction, true
}

// SetJurisdiction sets field value
func (o *Regulation) SetJurisdiction(v string) {
	o.Jurisdiction = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Regulation) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Regulation) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Regulation) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Regulation) SetDescription(v string) {
	o.Description = &v
}

// GetReference returns the Reference field value if set, zero value otherwise.
func (o *Regulation) GetReference() string {
	if o == nil || IsNil(o.Reference) {
		var ret string
		return ret
	}
	return *o.Reference
}

// GetReferenceOk returns a tuple with the Reference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Regulation) GetReferenceOk() (*string, bool) {
	if o == nil || IsNil(o.Reference) {
		return nil, false
	}
	return o.Reference, true
}

// HasReference returns a boolean if a field has been set.
func (o *Regulation) HasReference() bool {
	if o != nil && !IsNil(o.Reference) {
		return true
	}

	return false
}

// SetReference gets a reference to the given string and assigns it to the Reference field.
func (o *Regulation) SetReference(v string) {
	o.Reference = &v
}

func (o Regulation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Regulation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["acronym"] = o.Acronym
	toSerialize["category"] = o.Category
	toSerialize["jurisdiction"] = o.Jurisdiction
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Reference) {
		toSerialize["reference"] = o.Reference
	}
	return toSerialize, nil
}

func (o *Regulation) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"acronym",
		"category",
		"jurisdiction",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRegulation := _Regulation{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRegulation)

	if err != nil {
		return err
	}

	*o = Regulation(varRegulation)

	return err
}

type NullableRegulation struct {
	value *Regulation
	isSet bool
}

func (v NullableRegulation) Get() *Regulation {
	return v.value
}

func (v *NullableRegulation) Set(val *Regulation) {
	v.value = val
	v.isSet = true
}

func (v NullableRegulation) IsSet() bool {
	return v.isSet
}

func (v *NullableRegulation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegulation(val *Regulation) *NullableRegulation {
	return &NullableRegulation{value: val, isSet: true}
}

func (v NullableRegulation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegulation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


