/*
Defect Dojo API v2

Defect Dojo - Open Source vulnerability Management made easy. Prefetch related parameters/responses not yet in the schema.

API version: 2.30.4
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the PatchedRegulationRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PatchedRegulationRequest{}

// PatchedRegulationRequest struct for PatchedRegulationRequest
type PatchedRegulationRequest struct {
	// The name of the regulation.
	Name *string `json:"name,omitempty"`
	// A shortened representation of the name.
	Acronym *string `json:"acronym,omitempty"`
	// The subject of the regulation.  * `privacy` - Privacy * `finance` - Finance * `education` - Education * `medical` - Medical * `corporate` - Corporate * `other` - Other
	Category *string `json:"category,omitempty"`
	// The territory over which the regulation applies.
	Jurisdiction *string `json:"jurisdiction,omitempty"`
	// Information about the regulation's purpose.
	Description *string `json:"description,omitempty"`
	// An external URL for more information.
	Reference *string `json:"reference,omitempty"`
}

// NewPatchedRegulationRequest instantiates a new PatchedRegulationRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPatchedRegulationRequest() *PatchedRegulationRequest {
	this := PatchedRegulationRequest{}
	return &this
}

// NewPatchedRegulationRequestWithDefaults instantiates a new PatchedRegulationRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatchedRegulationRequestWithDefaults() *PatchedRegulationRequest {
	this := PatchedRegulationRequest{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PatchedRegulationRequest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedRegulationRequest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PatchedRegulationRequest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PatchedRegulationRequest) SetName(v string) {
	o.Name = &v
}

// GetAcronym returns the Acronym field value if set, zero value otherwise.
func (o *PatchedRegulationRequest) GetAcronym() string {
	if o == nil || IsNil(o.Acronym) {
		var ret string
		return ret
	}
	return *o.Acronym
}

// GetAcronymOk returns a tuple with the Acronym field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedRegulationRequest) GetAcronymOk() (*string, bool) {
	if o == nil || IsNil(o.Acronym) {
		return nil, false
	}
	return o.Acronym, true
}

// HasAcronym returns a boolean if a field has been set.
func (o *PatchedRegulationRequest) HasAcronym() bool {
	if o != nil && !IsNil(o.Acronym) {
		return true
	}

	return false
}

// SetAcronym gets a reference to the given string and assigns it to the Acronym field.
func (o *PatchedRegulationRequest) SetAcronym(v string) {
	o.Acronym = &v
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *PatchedRegulationRequest) GetCategory() string {
	if o == nil || IsNil(o.Category) {
		var ret string
		return ret
	}
	return *o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedRegulationRequest) GetCategoryOk() (*string, bool) {
	if o == nil || IsNil(o.Category) {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *PatchedRegulationRequest) HasCategory() bool {
	if o != nil && !IsNil(o.Category) {
		return true
	}

	return false
}

// SetCategory gets a reference to the given string and assigns it to the Category field.
func (o *PatchedRegulationRequest) SetCategory(v string) {
	o.Category = &v
}

// GetJurisdiction returns the Jurisdiction field value if set, zero value otherwise.
func (o *PatchedRegulationRequest) GetJurisdiction() string {
	if o == nil || IsNil(o.Jurisdiction) {
		var ret string
		return ret
	}
	return *o.Jurisdiction
}

// GetJurisdictionOk returns a tuple with the Jurisdiction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedRegulationRequest) GetJurisdictionOk() (*string, bool) {
	if o == nil || IsNil(o.Jurisdiction) {
		return nil, false
	}
	return o.Jurisdiction, true
}

// HasJurisdiction returns a boolean if a field has been set.
func (o *PatchedRegulationRequest) HasJurisdiction() bool {
	if o != nil && !IsNil(o.Jurisdiction) {
		return true
	}

	return false
}

// SetJurisdiction gets a reference to the given string and assigns it to the Jurisdiction field.
func (o *PatchedRegulationRequest) SetJurisdiction(v string) {
	o.Jurisdiction = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *PatchedRegulationRequest) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedRegulationRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *PatchedRegulationRequest) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *PatchedRegulationRequest) SetDescription(v string) {
	o.Description = &v
}

// GetReference returns the Reference field value if set, zero value otherwise.
func (o *PatchedRegulationRequest) GetReference() string {
	if o == nil || IsNil(o.Reference) {
		var ret string
		return ret
	}
	return *o.Reference
}

// GetReferenceOk returns a tuple with the Reference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchedRegulationRequest) GetReferenceOk() (*string, bool) {
	if o == nil || IsNil(o.Reference) {
		return nil, false
	}
	return o.Reference, true
}

// HasReference returns a boolean if a field has been set.
func (o *PatchedRegulationRequest) HasReference() bool {
	if o != nil && !IsNil(o.Reference) {
		return true
	}

	return false
}

// SetReference gets a reference to the given string and assigns it to the Reference field.
func (o *PatchedRegulationRequest) SetReference(v string) {
	o.Reference = &v
}

func (o PatchedRegulationRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PatchedRegulationRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Acronym) {
		toSerialize["acronym"] = o.Acronym
	}
	if !IsNil(o.Category) {
		toSerialize["category"] = o.Category
	}
	if !IsNil(o.Jurisdiction) {
		toSerialize["jurisdiction"] = o.Jurisdiction
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Reference) {
		toSerialize["reference"] = o.Reference
	}
	return toSerialize, nil
}

type NullablePatchedRegulationRequest struct {
	value *PatchedRegulationRequest
	isSet bool
}

func (v NullablePatchedRegulationRequest) Get() *PatchedRegulationRequest {
	return v.value
}

func (v *NullablePatchedRegulationRequest) Set(val *PatchedRegulationRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchedRegulationRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchedRegulationRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchedRegulationRequest(val *PatchedRegulationRequest) *NullablePatchedRegulationRequest {
	return &NullablePatchedRegulationRequest{value: val, isSet: true}
}

func (v NullablePatchedRegulationRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchedRegulationRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


