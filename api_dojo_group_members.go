/*
Defect Dojo API v2

Defect Dojo - Open Source vulnerability Management made easy. Prefetch related parameters/responses not yet in the schema.

API version: 2.31.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package defectdojo

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
)


type DojoGroupMembersAPI interface {

	/*
	DojoGroupMembersCreate Method for DojoGroupMembersCreate

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDojoGroupMembersCreateRequest
	*/
	DojoGroupMembersCreate(ctx context.Context) ApiDojoGroupMembersCreateRequest

	// DojoGroupMembersCreateExecute executes the request
	//  @return DojoGroupMember
	DojoGroupMembersCreateExecute(r ApiDojoGroupMembersCreateRequest) (*DojoGroupMember, *http.Response, error)

	/*
	DojoGroupMembersDeletePreviewList Method for DojoGroupMembersDeletePreviewList

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this dojo_ group_ member.
	@return ApiDojoGroupMembersDeletePreviewListRequest
	*/
	DojoGroupMembersDeletePreviewList(ctx context.Context, id int32) ApiDojoGroupMembersDeletePreviewListRequest

	// DojoGroupMembersDeletePreviewListExecute executes the request
	//  @return PaginatedDeletePreviewList
	DojoGroupMembersDeletePreviewListExecute(r ApiDojoGroupMembersDeletePreviewListRequest) (*PaginatedDeletePreviewList, *http.Response, error)

	/*
	DojoGroupMembersDestroy Method for DojoGroupMembersDestroy

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this dojo_ group_ member.
	@return ApiDojoGroupMembersDestroyRequest
	*/
	DojoGroupMembersDestroy(ctx context.Context, id int32) ApiDojoGroupMembersDestroyRequest

	// DojoGroupMembersDestroyExecute executes the request
	DojoGroupMembersDestroyExecute(r ApiDojoGroupMembersDestroyRequest) (*http.Response, error)

	/*
	DojoGroupMembersList Method for DojoGroupMembersList

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiDojoGroupMembersListRequest
	*/
	DojoGroupMembersList(ctx context.Context) ApiDojoGroupMembersListRequest

	// DojoGroupMembersListExecute executes the request
	//  @return PaginatedDojoGroupMemberList
	DojoGroupMembersListExecute(r ApiDojoGroupMembersListRequest) (*PaginatedDojoGroupMemberList, *http.Response, error)

	/*
	DojoGroupMembersRetrieve Method for DojoGroupMembersRetrieve

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this dojo_ group_ member.
	@return ApiDojoGroupMembersRetrieveRequest
	*/
	DojoGroupMembersRetrieve(ctx context.Context, id int32) ApiDojoGroupMembersRetrieveRequest

	// DojoGroupMembersRetrieveExecute executes the request
	//  @return DojoGroupMember
	DojoGroupMembersRetrieveExecute(r ApiDojoGroupMembersRetrieveRequest) (*DojoGroupMember, *http.Response, error)

	/*
	DojoGroupMembersUpdate Method for DojoGroupMembersUpdate

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id A unique integer value identifying this dojo_ group_ member.
	@return ApiDojoGroupMembersUpdateRequest
	*/
	DojoGroupMembersUpdate(ctx context.Context, id int32) ApiDojoGroupMembersUpdateRequest

	// DojoGroupMembersUpdateExecute executes the request
	//  @return DojoGroupMember
	DojoGroupMembersUpdateExecute(r ApiDojoGroupMembersUpdateRequest) (*DojoGroupMember, *http.Response, error)
}

// DojoGroupMembersAPIService DojoGroupMembersAPI service
type DojoGroupMembersAPIService service

type ApiDojoGroupMembersCreateRequest struct {
	ctx context.Context
	ApiService DojoGroupMembersAPI
	dojoGroupMemberRequest *DojoGroupMemberRequest
}

func (r ApiDojoGroupMembersCreateRequest) DojoGroupMemberRequest(dojoGroupMemberRequest DojoGroupMemberRequest) ApiDojoGroupMembersCreateRequest {
	r.dojoGroupMemberRequest = &dojoGroupMemberRequest
	return r
}

func (r ApiDojoGroupMembersCreateRequest) Execute() (*DojoGroupMember, *http.Response, error) {
	return r.ApiService.DojoGroupMembersCreateExecute(r)
}

/*
DojoGroupMembersCreate Method for DojoGroupMembersCreate

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDojoGroupMembersCreateRequest
*/
func (a *DojoGroupMembersAPIService) DojoGroupMembersCreate(ctx context.Context) ApiDojoGroupMembersCreateRequest {
	return ApiDojoGroupMembersCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return DojoGroupMember
func (a *DojoGroupMembersAPIService) DojoGroupMembersCreateExecute(r ApiDojoGroupMembersCreateRequest) (*DojoGroupMember, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DojoGroupMember
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DojoGroupMembersAPIService.DojoGroupMembersCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/dojo_group_members/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.dojoGroupMemberRequest == nil {
		return localVarReturnValue, nil, reportError("dojoGroupMemberRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.dojoGroupMemberRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDojoGroupMembersDeletePreviewListRequest struct {
	ctx context.Context
	ApiService DojoGroupMembersAPI
	id int32
	limit *int32
	offset *int32
}

// Number of results to return per page.
func (r ApiDojoGroupMembersDeletePreviewListRequest) Limit(limit int32) ApiDojoGroupMembersDeletePreviewListRequest {
	r.limit = &limit
	return r
}

// The initial index from which to return the results.
func (r ApiDojoGroupMembersDeletePreviewListRequest) Offset(offset int32) ApiDojoGroupMembersDeletePreviewListRequest {
	r.offset = &offset
	return r
}

func (r ApiDojoGroupMembersDeletePreviewListRequest) Execute() (*PaginatedDeletePreviewList, *http.Response, error) {
	return r.ApiService.DojoGroupMembersDeletePreviewListExecute(r)
}

/*
DojoGroupMembersDeletePreviewList Method for DojoGroupMembersDeletePreviewList

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A unique integer value identifying this dojo_ group_ member.
 @return ApiDojoGroupMembersDeletePreviewListRequest
*/
func (a *DojoGroupMembersAPIService) DojoGroupMembersDeletePreviewList(ctx context.Context, id int32) ApiDojoGroupMembersDeletePreviewListRequest {
	return ApiDojoGroupMembersDeletePreviewListRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return PaginatedDeletePreviewList
func (a *DojoGroupMembersAPIService) DojoGroupMembersDeletePreviewListExecute(r ApiDojoGroupMembersDeletePreviewListRequest) (*PaginatedDeletePreviewList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedDeletePreviewList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DojoGroupMembersAPIService.DojoGroupMembersDeletePreviewList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/dojo_group_members/{id}/delete_preview/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDojoGroupMembersDestroyRequest struct {
	ctx context.Context
	ApiService DojoGroupMembersAPI
	id int32
}

func (r ApiDojoGroupMembersDestroyRequest) Execute() (*http.Response, error) {
	return r.ApiService.DojoGroupMembersDestroyExecute(r)
}

/*
DojoGroupMembersDestroy Method for DojoGroupMembersDestroy

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A unique integer value identifying this dojo_ group_ member.
 @return ApiDojoGroupMembersDestroyRequest
*/
func (a *DojoGroupMembersAPIService) DojoGroupMembersDestroy(ctx context.Context, id int32) ApiDojoGroupMembersDestroyRequest {
	return ApiDojoGroupMembersDestroyRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *DojoGroupMembersAPIService) DojoGroupMembersDestroyExecute(r ApiDojoGroupMembersDestroyRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DojoGroupMembersAPIService.DojoGroupMembersDestroy")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/dojo_group_members/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiDojoGroupMembersListRequest struct {
	ctx context.Context
	ApiService DojoGroupMembersAPI
	groupId *int32
	id *int32
	limit *int32
	offset *int32
	prefetch *[]string
	userId *int32
}

func (r ApiDojoGroupMembersListRequest) GroupId(groupId int32) ApiDojoGroupMembersListRequest {
	r.groupId = &groupId
	return r
}

func (r ApiDojoGroupMembersListRequest) Id(id int32) ApiDojoGroupMembersListRequest {
	r.id = &id
	return r
}

// Number of results to return per page.
func (r ApiDojoGroupMembersListRequest) Limit(limit int32) ApiDojoGroupMembersListRequest {
	r.limit = &limit
	return r
}

// The initial index from which to return the results.
func (r ApiDojoGroupMembersListRequest) Offset(offset int32) ApiDojoGroupMembersListRequest {
	r.offset = &offset
	return r
}

// List of fields for which to prefetch model instances and add those to the response
func (r ApiDojoGroupMembersListRequest) Prefetch(prefetch []string) ApiDojoGroupMembersListRequest {
	r.prefetch = &prefetch
	return r
}

func (r ApiDojoGroupMembersListRequest) UserId(userId int32) ApiDojoGroupMembersListRequest {
	r.userId = &userId
	return r
}

func (r ApiDojoGroupMembersListRequest) Execute() (*PaginatedDojoGroupMemberList, *http.Response, error) {
	return r.ApiService.DojoGroupMembersListExecute(r)
}

/*
DojoGroupMembersList Method for DojoGroupMembersList

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiDojoGroupMembersListRequest
*/
func (a *DojoGroupMembersAPIService) DojoGroupMembersList(ctx context.Context) ApiDojoGroupMembersListRequest {
	return ApiDojoGroupMembersListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return PaginatedDojoGroupMemberList
func (a *DojoGroupMembersAPIService) DojoGroupMembersListExecute(r ApiDojoGroupMembersListRequest) (*PaginatedDojoGroupMemberList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *PaginatedDojoGroupMemberList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DojoGroupMembersAPIService.DojoGroupMembersList")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/dojo_group_members/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.groupId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "group_id", r.groupId, "")
	}
	if r.id != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id", r.id, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.prefetch != nil {
		t := *r.prefetch
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "prefetch", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "prefetch", t, "multi")
		}
	}
	if r.userId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "user_id", r.userId, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDojoGroupMembersRetrieveRequest struct {
	ctx context.Context
	ApiService DojoGroupMembersAPI
	id int32
	prefetch *[]string
}

// List of fields for which to prefetch model instances and add those to the response
func (r ApiDojoGroupMembersRetrieveRequest) Prefetch(prefetch []string) ApiDojoGroupMembersRetrieveRequest {
	r.prefetch = &prefetch
	return r
}

func (r ApiDojoGroupMembersRetrieveRequest) Execute() (*DojoGroupMember, *http.Response, error) {
	return r.ApiService.DojoGroupMembersRetrieveExecute(r)
}

/*
DojoGroupMembersRetrieve Method for DojoGroupMembersRetrieve

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A unique integer value identifying this dojo_ group_ member.
 @return ApiDojoGroupMembersRetrieveRequest
*/
func (a *DojoGroupMembersAPIService) DojoGroupMembersRetrieve(ctx context.Context, id int32) ApiDojoGroupMembersRetrieveRequest {
	return ApiDojoGroupMembersRetrieveRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return DojoGroupMember
func (a *DojoGroupMembersAPIService) DojoGroupMembersRetrieveExecute(r ApiDojoGroupMembersRetrieveRequest) (*DojoGroupMember, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DojoGroupMember
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DojoGroupMembersAPIService.DojoGroupMembersRetrieve")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/dojo_group_members/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.prefetch != nil {
		t := *r.prefetch
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "prefetch", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "prefetch", t, "multi")
		}
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDojoGroupMembersUpdateRequest struct {
	ctx context.Context
	ApiService DojoGroupMembersAPI
	id int32
	dojoGroupMemberRequest *DojoGroupMemberRequest
}

func (r ApiDojoGroupMembersUpdateRequest) DojoGroupMemberRequest(dojoGroupMemberRequest DojoGroupMemberRequest) ApiDojoGroupMembersUpdateRequest {
	r.dojoGroupMemberRequest = &dojoGroupMemberRequest
	return r
}

func (r ApiDojoGroupMembersUpdateRequest) Execute() (*DojoGroupMember, *http.Response, error) {
	return r.ApiService.DojoGroupMembersUpdateExecute(r)
}

/*
DojoGroupMembersUpdate Method for DojoGroupMembersUpdate

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id A unique integer value identifying this dojo_ group_ member.
 @return ApiDojoGroupMembersUpdateRequest
*/
func (a *DojoGroupMembersAPIService) DojoGroupMembersUpdate(ctx context.Context, id int32) ApiDojoGroupMembersUpdateRequest {
	return ApiDojoGroupMembersUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return DojoGroupMember
func (a *DojoGroupMembersAPIService) DojoGroupMembersUpdateExecute(r ApiDojoGroupMembersUpdateRequest) (*DojoGroupMember, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *DojoGroupMember
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DojoGroupMembersAPIService.DojoGroupMembersUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/dojo_group_members/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.dojoGroupMemberRequest == nil {
		return localVarReturnValue, nil, reportError("dojoGroupMemberRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json", "application/x-www-form-urlencoded", "multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.dojoGroupMemberRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
